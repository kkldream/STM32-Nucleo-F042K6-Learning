
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08004564  08004564  00014564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004800  08004800  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004800  08004800  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004800  08004800  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000074  0800487c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  0800487c  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc97  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b1  00000000  00000000  0002dd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002fee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  000306b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018369  00000000  00000000  00030db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c487  00000000  00000000  00049119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af1a  00000000  00000000  000555a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e04ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000220c  00000000  00000000  000e0510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800454c 	.word	0x0800454c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	0800454c 	.word	0x0800454c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <MX_GPIO_Init+0x48>)
 800024c:	695a      	ldr	r2, [r3, #20]
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <MX_GPIO_Init+0x48>)
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	03c9      	lsls	r1, r1, #15
 8000254:	430a      	orrs	r2, r1
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <MX_GPIO_Init+0x48>)
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	03db      	lsls	r3, r3, #15
 8000260:	4013      	ands	r3, r2
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000266:	4b09      	ldr	r3, [pc, #36]	; (800028c <MX_GPIO_Init+0x48>)
 8000268:	695a      	ldr	r2, [r3, #20]
 800026a:	4b08      	ldr	r3, [pc, #32]	; (800028c <MX_GPIO_Init+0x48>)
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	0289      	lsls	r1, r1, #10
 8000270:	430a      	orrs	r2, r1
 8000272:	615a      	str	r2, [r3, #20]
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <MX_GPIO_Init+0x48>)
 8000276:	695a      	ldr	r2, [r3, #20]
 8000278:	2380      	movs	r3, #128	; 0x80
 800027a:	029b      	lsls	r3, r3, #10
 800027c:	4013      	ands	r3, r2
 800027e:	603b      	str	r3, [r7, #0]
 8000280:	683b      	ldr	r3, [r7, #0]

}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	b002      	add	sp, #8
 8000288:	bd80      	pop	{r7, pc}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	40021000 	.word	0x40021000

08000290 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d801      	bhi.n	80002aa <jsmn_alloc_token+0x1a>
    return NULL;
 80002a6:	2300      	movs	r3, #0
 80002a8:	e014      	b.n	80002d4 <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	1c59      	adds	r1, r3, #1
 80002b0:	68fa      	ldr	r2, [r7, #12]
 80002b2:	6051      	str	r1, [r2, #4]
 80002b4:	011b      	lsls	r3, r3, #4
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	18d3      	adds	r3, r2, r3
 80002ba:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	2201      	movs	r2, #1
 80002c0:	4252      	negs	r2, r2
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	697b      	ldr	r3, [r7, #20]
 80002ca:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	2200      	movs	r2, #0
 80002d0:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 80002d2:	697b      	ldr	r3, [r7, #20]
}
 80002d4:	0018      	movs	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	b006      	add	sp, #24
 80002da:	bd80      	pop	{r7, pc}

080002dc <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	60f8      	str	r0, [r7, #12]
 80002e4:	607a      	str	r2, [r7, #4]
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	200b      	movs	r0, #11
 80002ea:	183b      	adds	r3, r7, r0
 80002ec:	1c0a      	adds	r2, r1, #0
 80002ee:	701a      	strb	r2, [r3, #0]
  token->type = type;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	183a      	adds	r2, r7, r0
 80002f4:	7812      	ldrb	r2, [r2, #0]
 80002f6:	701a      	strb	r2, [r3, #0]
  token->start = start;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	605a      	str	r2, [r3, #4]
  token->end = end;
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	683a      	ldr	r2, [r7, #0]
 8000302:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b004      	add	sp, #16
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000328:	e03b      	b.n	80003a2 <jsmn_parse_primitive+0x8e>
    switch (js[parser->pos]) {
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	68ba      	ldr	r2, [r7, #8]
 8000330:	18d3      	adds	r3, r2, r3
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	2b7d      	cmp	r3, #125	; 0x7d
 8000336:	d041      	beq.n	80003bc <jsmn_parse_primitive+0xa8>
 8000338:	dc19      	bgt.n	800036e <jsmn_parse_primitive+0x5a>
 800033a:	2b5d      	cmp	r3, #93	; 0x5d
 800033c:	d03e      	beq.n	80003bc <jsmn_parse_primitive+0xa8>
 800033e:	dc16      	bgt.n	800036e <jsmn_parse_primitive+0x5a>
 8000340:	2b3a      	cmp	r3, #58	; 0x3a
 8000342:	dc14      	bgt.n	800036e <jsmn_parse_primitive+0x5a>
 8000344:	2b20      	cmp	r3, #32
 8000346:	da04      	bge.n	8000352 <jsmn_parse_primitive+0x3e>
 8000348:	2b0a      	cmp	r3, #10
 800034a:	dc0e      	bgt.n	800036a <jsmn_parse_primitive+0x56>
 800034c:	2b09      	cmp	r3, #9
 800034e:	da35      	bge.n	80003bc <jsmn_parse_primitive+0xa8>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000350:	e00d      	b.n	800036e <jsmn_parse_primitive+0x5a>
 8000352:	3b20      	subs	r3, #32
 8000354:	2201      	movs	r2, #1
 8000356:	409a      	lsls	r2, r3
 8000358:	0013      	movs	r3, r2
 800035a:	4a30      	ldr	r2, [pc, #192]	; (800041c <jsmn_parse_primitive+0x108>)
 800035c:	4013      	ands	r3, r2
 800035e:	1e5a      	subs	r2, r3, #1
 8000360:	4193      	sbcs	r3, r2
 8000362:	b2db      	uxtb	r3, r3
 8000364:	2b00      	cmp	r3, #0
 8000366:	d129      	bne.n	80003bc <jsmn_parse_primitive+0xa8>
 8000368:	e001      	b.n	800036e <jsmn_parse_primitive+0x5a>
    switch (js[parser->pos]) {
 800036a:	2b0d      	cmp	r3, #13
 800036c:	d026      	beq.n	80003bc <jsmn_parse_primitive+0xa8>
      break;
 800036e:	46c0      	nop			; (mov r8, r8)
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	68ba      	ldr	r2, [r7, #8]
 8000376:	18d3      	adds	r3, r2, r3
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b1f      	cmp	r3, #31
 800037c:	d906      	bls.n	800038c <jsmn_parse_primitive+0x78>
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	68ba      	ldr	r2, [r7, #8]
 8000384:	18d3      	adds	r3, r2, r3
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b7e      	cmp	r3, #126	; 0x7e
 800038a:	d905      	bls.n	8000398 <jsmn_parse_primitive+0x84>
      parser->pos = start;
 800038c:	697a      	ldr	r2, [r7, #20]
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8000392:	2302      	movs	r3, #2
 8000394:	425b      	negs	r3, r3
 8000396:	e03c      	b.n	8000412 <jsmn_parse_primitive+0xfe>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	1c5a      	adds	r2, r3, #1
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	687a      	ldr	r2, [r7, #4]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d909      	bls.n	80003c0 <jsmn_parse_primitive+0xac>
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	68ba      	ldr	r2, [r7, #8]
 80003b2:	18d3      	adds	r3, r2, r3
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d1b7      	bne.n	800032a <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 80003ba:	e001      	b.n	80003c0 <jsmn_parse_primitive+0xac>
      goto found;
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	e000      	b.n	80003c2 <jsmn_parse_primitive+0xae>
found:
 80003c0:	46c0      	nop			; (mov r8, r8)
  if (tokens == NULL) {
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d106      	bne.n	80003d6 <jsmn_parse_primitive+0xc2>
    parser->pos--;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	1e5a      	subs	r2, r3, #1
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	601a      	str	r2, [r3, #0]
    return 0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	e01d      	b.n	8000412 <jsmn_parse_primitive+0xfe>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 80003d6:	6a3a      	ldr	r2, [r7, #32]
 80003d8:	6839      	ldr	r1, [r7, #0]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	0018      	movs	r0, r3
 80003de:	f7ff ff57 	bl	8000290 <jsmn_alloc_token>
 80003e2:	0003      	movs	r3, r0
 80003e4:	613b      	str	r3, [r7, #16]
  if (token == NULL) {
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d105      	bne.n	80003f8 <jsmn_parse_primitive+0xe4>
    parser->pos = start;
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 80003f2:	2301      	movs	r3, #1
 80003f4:	425b      	negs	r3, r3
 80003f6:	e00c      	b.n	8000412 <jsmn_parse_primitive+0xfe>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	697a      	ldr	r2, [r7, #20]
 80003fe:	6938      	ldr	r0, [r7, #16]
 8000400:	2108      	movs	r1, #8
 8000402:	f7ff ff6b 	bl	80002dc <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	1e5a      	subs	r2, r3, #1
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	601a      	str	r2, [r3, #0]
  return 0;
 8000410:	2300      	movs	r3, #0
}
 8000412:	0018      	movs	r0, r3
 8000414:	46bd      	mov	sp, r7
 8000416:	b006      	add	sp, #24
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	04001001 	.word	0x04001001

08000420 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	1c5a      	adds	r2, r3, #1
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800043e:	e0b8      	b.n	80005b2 <jsmn_parse_string+0x192>
    char c = js[parser->pos];
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68ba      	ldr	r2, [r7, #8]
 8000446:	18d2      	adds	r2, r2, r3
 8000448:	2117      	movs	r1, #23
 800044a:	187b      	adds	r3, r7, r1
 800044c:	7812      	ldrb	r2, [r2, #0]
 800044e:	701a      	strb	r2, [r3, #0]

    /* Quote: end of string */
    if (c == '\"') {
 8000450:	187b      	adds	r3, r7, r1
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b22      	cmp	r3, #34	; 0x22
 8000456:	d11f      	bne.n	8000498 <jsmn_parse_string+0x78>
      if (tokens == NULL) {
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d101      	bne.n	8000462 <jsmn_parse_string+0x42>
        return 0;
 800045e:	2300      	movs	r3, #0
 8000460:	e0b9      	b.n	80005d6 <jsmn_parse_string+0x1b6>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000464:	6839      	ldr	r1, [r7, #0]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff ff11 	bl	8000290 <jsmn_alloc_token>
 800046e:	0003      	movs	r3, r0
 8000470:	613b      	str	r3, [r7, #16]
      if (token == NULL) {
 8000472:	693b      	ldr	r3, [r7, #16]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d105      	bne.n	8000484 <jsmn_parse_string+0x64>
        parser->pos = start;
 8000478:	69ba      	ldr	r2, [r7, #24]
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 800047e:	2301      	movs	r3, #1
 8000480:	425b      	negs	r3, r3
 8000482:	e0a8      	b.n	80005d6 <jsmn_parse_string+0x1b6>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8000484:	69bb      	ldr	r3, [r7, #24]
 8000486:	1c5a      	adds	r2, r3, #1
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6938      	ldr	r0, [r7, #16]
 800048e:	2104      	movs	r1, #4
 8000490:	f7ff ff24 	bl	80002dc <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8000494:	2300      	movs	r3, #0
 8000496:	e09e      	b.n	80005d6 <jsmn_parse_string+0x1b6>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 8000498:	2317      	movs	r3, #23
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b5c      	cmp	r3, #92	; 0x5c
 80004a0:	d000      	beq.n	80004a4 <jsmn_parse_string+0x84>
 80004a2:	e07e      	b.n	80005a2 <jsmn_parse_string+0x182>
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	3301      	adds	r3, #1
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d800      	bhi.n	80004b2 <jsmn_parse_string+0x92>
 80004b0:	e077      	b.n	80005a2 <jsmn_parse_string+0x182>
      int i;
      parser->pos++;
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	68ba      	ldr	r2, [r7, #8]
 80004c2:	18d3      	adds	r3, r2, r3
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b75      	cmp	r3, #117	; 0x75
 80004c8:	dd00      	ble.n	80004cc <jsmn_parse_string+0xac>
 80004ca:	e064      	b.n	8000596 <jsmn_parse_string+0x176>
 80004cc:	2b5c      	cmp	r3, #92	; 0x5c
 80004ce:	da05      	bge.n	80004dc <jsmn_parse_string+0xbc>
 80004d0:	2b22      	cmp	r3, #34	; 0x22
 80004d2:	d100      	bne.n	80004d6 <jsmn_parse_string+0xb6>
 80004d4:	e067      	b.n	80005a6 <jsmn_parse_string+0x186>
 80004d6:	2b2f      	cmp	r3, #47	; 0x2f
 80004d8:	d065      	beq.n	80005a6 <jsmn_parse_string+0x186>
 80004da:	e05c      	b.n	8000596 <jsmn_parse_string+0x176>
 80004dc:	3b5c      	subs	r3, #92	; 0x5c
 80004de:	2b19      	cmp	r3, #25
 80004e0:	d859      	bhi.n	8000596 <jsmn_parse_string+0x176>
 80004e2:	009a      	lsls	r2, r3, #2
 80004e4:	4b3e      	ldr	r3, [pc, #248]	; (80005e0 <jsmn_parse_string+0x1c0>)
 80004e6:	18d3      	adds	r3, r2, r3
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	469f      	mov	pc, r3
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
 80004fa:	e037      	b.n	800056c <jsmn_parse_string+0x14c>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	18d3      	adds	r3, r2, r3
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b2f      	cmp	r3, #47	; 0x2f
 8000508:	d906      	bls.n	8000518 <jsmn_parse_string+0xf8>
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	68ba      	ldr	r2, [r7, #8]
 8000510:	18d3      	adds	r3, r2, r3
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b39      	cmp	r3, #57	; 0x39
 8000516:	d921      	bls.n	800055c <jsmn_parse_string+0x13c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	68ba      	ldr	r2, [r7, #8]
 800051e:	18d3      	adds	r3, r2, r3
 8000520:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000522:	2b40      	cmp	r3, #64	; 0x40
 8000524:	d906      	bls.n	8000534 <jsmn_parse_string+0x114>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	18d3      	adds	r3, r2, r3
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b46      	cmp	r3, #70	; 0x46
 8000532:	d913      	bls.n	800055c <jsmn_parse_string+0x13c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	18d3      	adds	r3, r2, r3
 800053c:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800053e:	2b60      	cmp	r3, #96	; 0x60
 8000540:	d906      	bls.n	8000550 <jsmn_parse_string+0x130>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	18d3      	adds	r3, r2, r3
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b66      	cmp	r3, #102	; 0x66
 800054e:	d905      	bls.n	800055c <jsmn_parse_string+0x13c>
            parser->pos = start;
 8000550:	69ba      	ldr	r2, [r7, #24]
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 8000556:	2302      	movs	r3, #2
 8000558:	425b      	negs	r3, r3
 800055a:	e03c      	b.n	80005d6 <jsmn_parse_string+0x1b6>
          }
          parser->pos++;
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	1c5a      	adds	r2, r3, #1
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	601a      	str	r2, [r3, #0]
             i++) {
 8000566:	69fb      	ldr	r3, [r7, #28]
 8000568:	3301      	adds	r3, #1
 800056a:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 800056c:	69fb      	ldr	r3, [r7, #28]
 800056e:	2b03      	cmp	r3, #3
 8000570:	dc0b      	bgt.n	800058a <jsmn_parse_string+0x16a>
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	d906      	bls.n	800058a <jsmn_parse_string+0x16a>
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68ba      	ldr	r2, [r7, #8]
 8000582:	18d3      	adds	r3, r2, r3
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1b8      	bne.n	80004fc <jsmn_parse_string+0xdc>
        }
        parser->pos--;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1e5a      	subs	r2, r3, #1
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	601a      	str	r2, [r3, #0]
        break;
 8000594:	e008      	b.n	80005a8 <jsmn_parse_string+0x188>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8000596:	69ba      	ldr	r2, [r7, #24]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 800059c:	2302      	movs	r3, #2
 800059e:	425b      	negs	r3, r3
 80005a0:	e019      	b.n	80005d6 <jsmn_parse_string+0x1b6>
      }
    }
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	e000      	b.n	80005a8 <jsmn_parse_string+0x188>
        break;
 80005a6:	46c0      	nop			; (mov r8, r8)
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d907      	bls.n	80005cc <jsmn_parse_string+0x1ac>
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	68ba      	ldr	r2, [r7, #8]
 80005c2:	18d3      	adds	r3, r2, r3
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d000      	beq.n	80005cc <jsmn_parse_string+0x1ac>
 80005ca:	e739      	b.n	8000440 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 80005cc:	69ba      	ldr	r2, [r7, #24]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 80005d2:	2303      	movs	r3, #3
 80005d4:	425b      	negs	r3, r3
}
 80005d6:	0018      	movs	r0, r3
 80005d8:	46bd      	mov	sp, r7
 80005da:	b008      	add	sp, #32
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	08004620 	.word	0x08004620

080005e4 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b08d      	sub	sp, #52	; 0x34
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
 80005f0:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80005f8:	e160      	b.n	80008bc <jsmn_parse+0x2d8>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	18d2      	adds	r2, r2, r3
 8000602:	211f      	movs	r1, #31
 8000604:	187b      	adds	r3, r7, r1
 8000606:	7812      	ldrb	r2, [r2, #0]
 8000608:	701a      	strb	r2, [r3, #0]
    switch (c) {
 800060a:	187b      	adds	r3, r7, r1
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b7d      	cmp	r3, #125	; 0x7d
 8000610:	d054      	beq.n	80006bc <jsmn_parse+0xd8>
 8000612:	dd00      	ble.n	8000616 <jsmn_parse+0x32>
 8000614:	e11f      	b.n	8000856 <jsmn_parse+0x272>
 8000616:	2b7b      	cmp	r3, #123	; 0x7b
 8000618:	d016      	beq.n	8000648 <jsmn_parse+0x64>
 800061a:	dd00      	ble.n	800061e <jsmn_parse+0x3a>
 800061c:	e11b      	b.n	8000856 <jsmn_parse+0x272>
 800061e:	2b5d      	cmp	r3, #93	; 0x5d
 8000620:	d04c      	beq.n	80006bc <jsmn_parse+0xd8>
 8000622:	dd00      	ble.n	8000626 <jsmn_parse+0x42>
 8000624:	e117      	b.n	8000856 <jsmn_parse+0x272>
 8000626:	2b3a      	cmp	r3, #58	; 0x3a
 8000628:	dc0b      	bgt.n	8000642 <jsmn_parse+0x5e>
 800062a:	2b09      	cmp	r3, #9
 800062c:	da00      	bge.n	8000630 <jsmn_parse+0x4c>
 800062e:	e112      	b.n	8000856 <jsmn_parse+0x272>
 8000630:	3b09      	subs	r3, #9
 8000632:	2b31      	cmp	r3, #49	; 0x31
 8000634:	d900      	bls.n	8000638 <jsmn_parse+0x54>
 8000636:	e10e      	b.n	8000856 <jsmn_parse+0x272>
 8000638:	009a      	lsls	r2, r3, #2
 800063a:	4bb9      	ldr	r3, [pc, #740]	; (8000920 <jsmn_parse+0x33c>)
 800063c:	18d3      	adds	r3, r2, r3
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	469f      	mov	pc, r3
 8000642:	2b5b      	cmp	r3, #91	; 0x5b
 8000644:	d000      	beq.n	8000648 <jsmn_parse+0x64>
 8000646:	e106      	b.n	8000856 <jsmn_parse+0x272>
    case '{':
    case '[':
      count++;
 8000648:	6a3b      	ldr	r3, [r7, #32]
 800064a:	3301      	adds	r3, #1
 800064c:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d100      	bne.n	8000656 <jsmn_parse+0x72>
 8000654:	e124      	b.n	80008a0 <jsmn_parse+0x2bc>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000658:	6839      	ldr	r1, [r7, #0]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff fe17 	bl	8000290 <jsmn_alloc_token>
 8000662:	0003      	movs	r3, r0
 8000664:	61bb      	str	r3, [r7, #24]
      if (token == NULL) {
 8000666:	69bb      	ldr	r3, [r7, #24]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <jsmn_parse+0x8e>
        return JSMN_ERROR_NOMEM;
 800066c:	2301      	movs	r3, #1
 800066e:	425b      	negs	r3, r3
 8000670:	e151      	b.n	8000916 <jsmn_parse+0x332>
      }
      if (parser->toksuper != -1) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	3301      	adds	r3, #1
 8000678:	d00a      	beq.n	8000690 <jsmn_parse+0xac>
        jsmntok_t *t = &tokens[parser->toksuper];
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	18d3      	adds	r3, r2, r3
 8000684:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8000690:	231f      	movs	r3, #31
 8000692:	18fb      	adds	r3, r7, r3
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b7b      	cmp	r3, #123	; 0x7b
 8000698:	d101      	bne.n	800069e <jsmn_parse+0xba>
 800069a:	2201      	movs	r2, #1
 800069c:	e000      	b.n	80006a0 <jsmn_parse+0xbc>
 800069e:	2202      	movs	r2, #2
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	001a      	movs	r2, r3
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	001a      	movs	r2, r3
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	609a      	str	r2, [r3, #8]
      break;
 80006ba:	e0fa      	b.n	80008b2 <jsmn_parse+0x2ce>
    case '}':
    case ']':
      if (tokens == NULL) {
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d100      	bne.n	80006c4 <jsmn_parse+0xe0>
 80006c2:	e0ef      	b.n	80008a4 <jsmn_parse+0x2c0>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80006c4:	231f      	movs	r3, #31
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b7d      	cmp	r3, #125	; 0x7d
 80006cc:	d101      	bne.n	80006d2 <jsmn_parse+0xee>
 80006ce:	2201      	movs	r2, #1
 80006d0:	e000      	b.n	80006d4 <jsmn_parse+0xf0>
 80006d2:	2202      	movs	r2, #2
 80006d4:	231e      	movs	r3, #30
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	701a      	strb	r2, [r3, #0]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	3b01      	subs	r3, #1
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
 80006e2:	e024      	b.n	800072e <jsmn_parse+0x14a>
        token = &tokens[i];
 80006e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e6:	011b      	lsls	r3, r3, #4
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	18d3      	adds	r3, r2, r3
 80006ec:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 80006ee:	69bb      	ldr	r3, [r7, #24]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	3301      	adds	r3, #1
 80006f4:	d018      	beq.n	8000728 <jsmn_parse+0x144>
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	3301      	adds	r3, #1
 80006fc:	d114      	bne.n	8000728 <jsmn_parse+0x144>
          if (token->type != type) {
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	221e      	movs	r2, #30
 8000704:	18ba      	adds	r2, r7, r2
 8000706:	7812      	ldrb	r2, [r2, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d002      	beq.n	8000712 <jsmn_parse+0x12e>
            return JSMN_ERROR_INVAL;
 800070c:	2302      	movs	r3, #2
 800070e:	425b      	negs	r3, r3
 8000710:	e101      	b.n	8000916 <jsmn_parse+0x332>
          }
          parser->toksuper = -1;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2201      	movs	r2, #1
 8000716:	4252      	negs	r2, r2
 8000718:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	001a      	movs	r2, r3
 8000722:	69bb      	ldr	r3, [r7, #24]
 8000724:	609a      	str	r2, [r3, #8]
          break;
 8000726:	e005      	b.n	8000734 <jsmn_parse+0x150>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	3b01      	subs	r3, #1
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	2b00      	cmp	r3, #0
 8000732:	dad7      	bge.n	80006e4 <jsmn_parse+0x100>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8000734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000736:	3301      	adds	r3, #1
 8000738:	d117      	bne.n	800076a <jsmn_parse+0x186>
        return JSMN_ERROR_INVAL;
 800073a:	2302      	movs	r3, #2
 800073c:	425b      	negs	r3, r3
 800073e:	e0ea      	b.n	8000916 <jsmn_parse+0x332>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	011b      	lsls	r3, r3, #4
 8000744:	683a      	ldr	r2, [r7, #0]
 8000746:	18d3      	adds	r3, r2, r3
 8000748:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 800074a:	69bb      	ldr	r3, [r7, #24]
 800074c:	685b      	ldr	r3, [r3, #4]
 800074e:	3301      	adds	r3, #1
 8000750:	d008      	beq.n	8000764 <jsmn_parse+0x180>
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	3301      	adds	r3, #1
 8000758:	d104      	bne.n	8000764 <jsmn_parse+0x180>
          parser->toksuper = i;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075e:	609a      	str	r2, [r3, #8]
          break;
 8000760:	46c0      	nop			; (mov r8, r8)
        }
      }
#endif
      break;
 8000762:	e0a6      	b.n	80008b2 <jsmn_parse+0x2ce>
      for (; i >= 0; i--) {
 8000764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000766:	3b01      	subs	r3, #1
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
 800076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076c:	2b00      	cmp	r3, #0
 800076e:	dae7      	bge.n	8000740 <jsmn_parse+0x15c>
      break;
 8000770:	e09f      	b.n	80008b2 <jsmn_parse+0x2ce>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8000772:	683c      	ldr	r4, [r7, #0]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	68f8      	ldr	r0, [r7, #12]
 800077a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	0023      	movs	r3, r4
 8000780:	f7ff fe4e 	bl	8000420 <jsmn_parse_string>
 8000784:	0003      	movs	r3, r0
 8000786:	613b      	str	r3, [r7, #16]
      if (r < 0) {
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <jsmn_parse+0x1ae>
        return r;
 800078e:	693b      	ldr	r3, [r7, #16]
 8000790:	e0c1      	b.n	8000916 <jsmn_parse+0x332>
      }
      count++;
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	3301      	adds	r3, #1
 8000796:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	3301      	adds	r3, #1
 800079e:	d100      	bne.n	80007a2 <jsmn_parse+0x1be>
 80007a0:	e082      	b.n	80008a8 <jsmn_parse+0x2c4>
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d100      	bne.n	80007aa <jsmn_parse+0x1c6>
 80007a8:	e07e      	b.n	80008a8 <jsmn_parse+0x2c4>
        tokens[parser->toksuper].size++;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	011b      	lsls	r3, r3, #4
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	18d3      	adds	r3, r2, r3
 80007b4:	68da      	ldr	r2, [r3, #12]
 80007b6:	3201      	adds	r2, #1
 80007b8:	60da      	str	r2, [r3, #12]
      }
      break;
 80007ba:	e075      	b.n	80008a8 <jsmn_parse+0x2c4>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	3b01      	subs	r3, #1
 80007c2:	001a      	movs	r2, r3
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	609a      	str	r2, [r3, #8]
      break;
 80007c8:	e073      	b.n	80008b2 <jsmn_parse+0x2ce>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d100      	bne.n	80007d2 <jsmn_parse+0x1ee>
 80007d0:	e06c      	b.n	80008ac <jsmn_parse+0x2c8>
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	3301      	adds	r3, #1
 80007d8:	d100      	bne.n	80007dc <jsmn_parse+0x1f8>
 80007da:	e067      	b.n	80008ac <jsmn_parse+0x2c8>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	18d3      	adds	r3, r2, r3
 80007e6:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 80007e8:	2b02      	cmp	r3, #2
 80007ea:	d05f      	beq.n	80008ac <jsmn_parse+0x2c8>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	011b      	lsls	r3, r3, #4
 80007f2:	683a      	ldr	r2, [r7, #0]
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d057      	beq.n	80008ac <jsmn_parse+0x2c8>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	3b01      	subs	r3, #1
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
 8000804:	e023      	b.n	800084e <jsmn_parse+0x26a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	18d3      	adds	r3, r2, r3
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d006      	beq.n	8000822 <jsmn_parse+0x23e>
 8000814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000816:	011b      	lsls	r3, r3, #4
 8000818:	683a      	ldr	r2, [r7, #0]
 800081a:	18d3      	adds	r3, r2, r3
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d112      	bne.n	8000848 <jsmn_parse+0x264>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000824:	011b      	lsls	r3, r3, #4
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	18d3      	adds	r3, r2, r3
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	3301      	adds	r3, #1
 800082e:	d00b      	beq.n	8000848 <jsmn_parse+0x264>
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	011b      	lsls	r3, r3, #4
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	18d3      	adds	r3, r2, r3
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	3301      	adds	r3, #1
 800083c:	d104      	bne.n	8000848 <jsmn_parse+0x264>
              parser->toksuper = i;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000842:	609a      	str	r2, [r3, #8]
              break;
 8000844:	46c0      	nop			; (mov r8, r8)
            }
          }
        }
#endif
      }
      break;
 8000846:	e031      	b.n	80008ac <jsmn_parse+0x2c8>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8000848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084a:	3b01      	subs	r3, #1
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
 800084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000850:	2b00      	cmp	r3, #0
 8000852:	dad8      	bge.n	8000806 <jsmn_parse+0x222>
      break;
 8000854:	e02a      	b.n	80008ac <jsmn_parse+0x2c8>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8000856:	683c      	ldr	r4, [r7, #0]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	68b9      	ldr	r1, [r7, #8]
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000860:	9300      	str	r3, [sp, #0]
 8000862:	0023      	movs	r3, r4
 8000864:	f7ff fd56 	bl	8000314 <jsmn_parse_primitive>
 8000868:	0003      	movs	r3, r0
 800086a:	613b      	str	r3, [r7, #16]
      if (r < 0) {
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	2b00      	cmp	r3, #0
 8000870:	da01      	bge.n	8000876 <jsmn_parse+0x292>
        return r;
 8000872:	693b      	ldr	r3, [r7, #16]
 8000874:	e04f      	b.n	8000916 <jsmn_parse+0x332>
      }
      count++;
 8000876:	6a3b      	ldr	r3, [r7, #32]
 8000878:	3301      	adds	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	3301      	adds	r3, #1
 8000882:	d015      	beq.n	80008b0 <jsmn_parse+0x2cc>
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d012      	beq.n	80008b0 <jsmn_parse+0x2cc>
        tokens[parser->toksuper].size++;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	18d3      	adds	r3, r2, r3
 8000894:	68da      	ldr	r2, [r3, #12]
 8000896:	3201      	adds	r2, #1
 8000898:	60da      	str	r2, [r3, #12]
      }
      break;
 800089a:	e009      	b.n	80008b0 <jsmn_parse+0x2cc>
      break;
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	e008      	b.n	80008b2 <jsmn_parse+0x2ce>
        break;
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	e006      	b.n	80008b2 <jsmn_parse+0x2ce>
        break;
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	e004      	b.n	80008b2 <jsmn_parse+0x2ce>
      break;
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	e002      	b.n	80008b2 <jsmn_parse+0x2ce>
      break;
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	e000      	b.n	80008b2 <jsmn_parse+0x2ce>
      break;
 80008b0:	46c0      	nop			; (mov r8, r8)
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d907      	bls.n	80008d6 <jsmn_parse+0x2f2>
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	18d3      	adds	r3, r2, r3
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d000      	beq.n	80008d6 <jsmn_parse+0x2f2>
 80008d4:	e691      	b.n	80005fa <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d01b      	beq.n	8000914 <jsmn_parse+0x330>
    for (i = parser->toknext - 1; i >= 0; i--) {
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
 80008e4:	e013      	b.n	800090e <jsmn_parse+0x32a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	3301      	adds	r3, #1
 80008f2:	d009      	beq.n	8000908 <jsmn_parse+0x324>
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	011b      	lsls	r3, r3, #4
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	3301      	adds	r3, #1
 8000900:	d102      	bne.n	8000908 <jsmn_parse+0x324>
        return JSMN_ERROR_PART;
 8000902:	2303      	movs	r3, #3
 8000904:	425b      	negs	r3, r3
 8000906:	e006      	b.n	8000916 <jsmn_parse+0x332>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8000908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090a:	3b01      	subs	r3, #1
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
 800090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000910:	2b00      	cmp	r3, #0
 8000912:	dae8      	bge.n	80008e6 <jsmn_parse+0x302>
      }
    }
  }

  return count;
 8000914:	6a3b      	ldr	r3, [r7, #32]
}
 8000916:	0018      	movs	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	b00b      	add	sp, #44	; 0x2c
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	08004688 	.word	0x08004688

08000924 <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2201      	movs	r2, #1
 800093c:	4252      	negs	r2, r2
 800093e:	609a      	str	r2, [r3, #8]
}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b002      	add	sp, #8
 8000946:	bd80      	pop	{r7, pc}

08000948 <jsoneq>:
}
#endif

#endif /* JSMN_H */

static int jsoneq(const char *json, jsmntok_t *tok, const char *s) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
	  if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b04      	cmp	r3, #4
 800095a:	d11f      	bne.n	800099c <jsoneq+0x54>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff fbd2 	bl	8000108 <strlen>
 8000964:	0003      	movs	r3, r0
 8000966:	0019      	movs	r1, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	4299      	cmp	r1, r3
 8000974:	d112      	bne.n	800099c <jsoneq+0x54>
		  strncmp(json + tok->start, s, tok->end - tok->start) == 0) {
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	001a      	movs	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	1898      	adds	r0, r3, r2
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	689a      	ldr	r2, [r3, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	001a      	movs	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	0019      	movs	r1, r3
 8000990:	f002 ff00 	bl	8003794 <strncmp>
 8000994:	1e03      	subs	r3, r0, #0
	  if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start &&
 8000996:	d101      	bne.n	800099c <jsoneq+0x54>
		return 0;
 8000998:	2300      	movs	r3, #0
 800099a:	e001      	b.n	80009a0 <jsoneq+0x58>
	  }
	  return -1;
 800099c:	2301      	movs	r3, #1
 800099e:	425b      	negs	r3, r3
	}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b004      	add	sp, #16
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <__io_putchar>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
PUTCHAR_PROTOTYPE
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <__io_putchar+0x20>)
 80009b2:	1d39      	adds	r1, r7, #4
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <__io_putchar+0x24>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	f001 fb9e 	bl	80020f8 <HAL_UART_Transmit>
	return ch;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	0018      	movs	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b002      	add	sp, #8
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	0000ffff 	.word	0x0000ffff
 80009cc:	200002a4 	.word	0x200002a4

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	4c63      	ldr	r4, [pc, #396]	; (8000b60 <main+0x190>)
 80009d4:	44a5      	add	sp, r4
 80009d6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d8:	f000 fb12 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009dc:	f000 f8da 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e0:	f7ff fc30 	bl	8000244 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e4:	f000 fa44 	bl	8000e70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &debug_aRxBuf, 1);
 80009e8:	495e      	ldr	r1, [pc, #376]	; (8000b64 <main+0x194>)
 80009ea:	4b5f      	ldr	r3, [pc, #380]	; (8000b68 <main+0x198>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 fc2b 	bl	800224a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("start\n");
 80009f4:	4b5d      	ldr	r3, [pc, #372]	; (8000b6c <main+0x19c>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f002 feb0 	bl	800375c <puts>
  static const char *JSON_STRING =
      "{\"user\": \"johndoe\", \"admin\": false, \"uid\": 1000,\n  "
      "\"groups\": [\"users\", \"wheel\", \"audio\", \"video\"]}";
  jsmn_parser p;
  jsmntok_t t[128];
  jsmn_init(&p);
 80009fc:	4d5c      	ldr	r5, [pc, #368]	; (8000b70 <main+0x1a0>)
 80009fe:	197b      	adds	r3, r7, r5
 8000a00:	0018      	movs	r0, r3
 8000a02:	f7ff ff8f 	bl	8000924 <jsmn_init>
  int r = jsmn_parse(&p, JSON_STRING, strlen(JSON_STRING), t, sizeof(t)/sizeof(t[0]));
 8000a06:	4b5b      	ldr	r3, [pc, #364]	; (8000b74 <main+0x1a4>)
 8000a08:	681c      	ldr	r4, [r3, #0]
 8000a0a:	4b5a      	ldr	r3, [pc, #360]	; (8000b74 <main+0x1a4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fb7a 	bl	8000108 <strlen>
 8000a14:	0001      	movs	r1, r0
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	1978      	adds	r0, r7, r5
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	9200      	str	r2, [sp, #0]
 8000a1e:	000a      	movs	r2, r1
 8000a20:	0021      	movs	r1, r4
 8000a22:	f7ff fddf 	bl	80005e4 <jsmn_parse>
 8000a26:	0003      	movs	r3, r0
 8000a28:	2281      	movs	r2, #129	; 0x81
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	18ba      	adds	r2, r7, r2
 8000a2e:	6013      	str	r3, [r2, #0]
  for (int i = 1; i < r; i++)
 8000a30:	2301      	movs	r3, #1
 8000a32:	4a51      	ldr	r2, [pc, #324]	; (8000b78 <main+0x1a8>)
 8000a34:	18ba      	adds	r2, r7, r2
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	e086      	b.n	8000b48 <main+0x178>
  {
      if (jsoneq(JSON_STRING, &t[i], "user") == 0)
 8000a3a:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <main+0x1a4>)
 8000a3c:	6818      	ldr	r0, [r3, #0]
 8000a3e:	1d3a      	adds	r2, r7, #4
 8000a40:	4c4d      	ldr	r4, [pc, #308]	; (8000b78 <main+0x1a8>)
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	011b      	lsls	r3, r3, #4
 8000a48:	18d3      	adds	r3, r2, r3
 8000a4a:	4a4c      	ldr	r2, [pc, #304]	; (8000b7c <main+0x1ac>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	f7ff ff7b 	bl	8000948 <jsoneq>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d132      	bne.n	8000abc <main+0xec>
      {
          /* We may use strndup() to fetch string value */
          printf("- User: %.*s\n", t[i+1].end-t[i+1].start, JSON_STRING + t[i+1].start);
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4a48      	ldr	r2, [pc, #288]	; (8000b80 <main+0x1b0>)
 8000a5e:	4949      	ldr	r1, [pc, #292]	; (8000b84 <main+0x1b4>)
 8000a60:	468c      	mov	ip, r1
 8000a62:	44bc      	add	ip, r7
 8000a64:	4462      	add	r2, ip
 8000a66:	011b      	lsls	r3, r3, #4
 8000a68:	18d3      	adds	r3, r2, r3
 8000a6a:	3308      	adds	r3, #8
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3301      	adds	r3, #1
 8000a74:	4942      	ldr	r1, [pc, #264]	; (8000b80 <main+0x1b0>)
 8000a76:	4843      	ldr	r0, [pc, #268]	; (8000b84 <main+0x1b4>)
 8000a78:	4684      	mov	ip, r0
 8000a7a:	44bc      	add	ip, r7
 8000a7c:	4461      	add	r1, ip
 8000a7e:	011b      	lsls	r3, r3, #4
 8000a80:	18cb      	adds	r3, r1, r3
 8000a82:	3304      	adds	r3, #4
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	1ad0      	subs	r0, r2, r3
 8000a88:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <main+0x1a4>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	493b      	ldr	r1, [pc, #236]	; (8000b80 <main+0x1b0>)
 8000a94:	4d3b      	ldr	r5, [pc, #236]	; (8000b84 <main+0x1b4>)
 8000a96:	46ac      	mov	ip, r5
 8000a98:	44bc      	add	ip, r7
 8000a9a:	4461      	add	r1, ip
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	18cb      	adds	r3, r1, r3
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	18d2      	adds	r2, r2, r3
 8000aa6:	4b38      	ldr	r3, [pc, #224]	; (8000b88 <main+0x1b8>)
 8000aa8:	0001      	movs	r1, r0
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 fdca 	bl	8003644 <iprintf>
          i++;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	193a      	adds	r2, r7, r4
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e03f      	b.n	8000b3c <main+0x16c>
      }
      else if (jsoneq(JSON_STRING, &t[i], "admin") == 0)
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <main+0x1a4>)
 8000abe:	6818      	ldr	r0, [r3, #0]
 8000ac0:	1d3a      	adds	r2, r7, #4
 8000ac2:	4c2d      	ldr	r4, [pc, #180]	; (8000b78 <main+0x1a8>)
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	18d3      	adds	r3, r2, r3
 8000acc:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <main+0x1bc>)
 8000ace:	0019      	movs	r1, r3
 8000ad0:	f7ff ff3a 	bl	8000948 <jsoneq>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d131      	bne.n	8000b3c <main+0x16c>
      {
           /* We may additionally check if the value is either "true" or "false" */
          printf("- Admin: %.*s\n", t[i+1].end-t[i+1].start, JSON_STRING + t[i+1].start);
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a28      	ldr	r2, [pc, #160]	; (8000b80 <main+0x1b0>)
 8000ae0:	4928      	ldr	r1, [pc, #160]	; (8000b84 <main+0x1b4>)
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	44bc      	add	ip, r7
 8000ae6:	4462      	add	r2, ip
 8000ae8:	011b      	lsls	r3, r3, #4
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	3308      	adds	r3, #8
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	4922      	ldr	r1, [pc, #136]	; (8000b80 <main+0x1b0>)
 8000af8:	4822      	ldr	r0, [pc, #136]	; (8000b84 <main+0x1b4>)
 8000afa:	4684      	mov	ip, r0
 8000afc:	44bc      	add	ip, r7
 8000afe:	4461      	add	r1, ip
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	18cb      	adds	r3, r1, r3
 8000b04:	3304      	adds	r3, #4
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	1ad0      	subs	r0, r2, r3
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <main+0x1a4>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	491a      	ldr	r1, [pc, #104]	; (8000b80 <main+0x1b0>)
 8000b16:	4d1b      	ldr	r5, [pc, #108]	; (8000b84 <main+0x1b4>)
 8000b18:	46ac      	mov	ip, r5
 8000b1a:	44bc      	add	ip, r7
 8000b1c:	4461      	add	r1, ip
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	18cb      	adds	r3, r1, r3
 8000b22:	3304      	adds	r3, #4
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	18d2      	adds	r2, r2, r3
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <main+0x1c0>)
 8000b2a:	0001      	movs	r1, r0
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f002 fd89 	bl	8003644 <iprintf>
          i++;
 8000b32:	193b      	adds	r3, r7, r4
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	193a      	adds	r2, r7, r4
 8000b3a:	6013      	str	r3, [r2, #0]
  for (int i = 1; i < r; i++)
 8000b3c:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <main+0x1a8>)
 8000b3e:	18bb      	adds	r3, r7, r2
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	18ba      	adds	r2, r7, r2
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <main+0x1a8>)
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	2381      	movs	r3, #129	; 0x81
 8000b50:	011b      	lsls	r3, r3, #4
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	da00      	bge.n	8000b5c <main+0x18c>
 8000b5a:	e76e      	b.n	8000a3a <main+0x6a>
//  result = cJSON_GetObjectItem(result,"0");
//  printf("%d\n",result->valueint);
//  cJSON_Delete(json);
//  cJSON_Delete(result);

  while(1);
 8000b5c:	e7fe      	b.n	8000b5c <main+0x18c>
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	fffff7e0 	.word	0xfffff7e0
 8000b64:	200000a0 	.word	0x200000a0
 8000b68:	200002a4 	.word	0x200002a4
 8000b6c:	08004564 	.word	0x08004564
 8000b70:	00000804 	.word	0x00000804
 8000b74:	20000000 	.word	0x20000000
 8000b78:	00000814 	.word	0x00000814
 8000b7c:	0800456c 	.word	0x0800456c
 8000b80:	fffff7ec 	.word	0xfffff7ec
 8000b84:	00000818 	.word	0x00000818
 8000b88:	08004574 	.word	0x08004574
 8000b8c:	08004584 	.word	0x08004584
 8000b90:	0800458c 	.word	0x0800458c

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b093      	sub	sp, #76	; 0x4c
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	2414      	movs	r4, #20
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	2334      	movs	r3, #52	; 0x34
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f002 fc9c 	bl	80034e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	0018      	movs	r0, r3
 8000bae:	2310      	movs	r3, #16
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	f002 fc95 	bl	80034e2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb8:	0021      	movs	r1, r4
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2210      	movs	r2, #16
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 fd3b 	bl	8001650 <HAL_RCC_OscConfig>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000bde:	f000 f857 	bl	8000c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 f8ac 	bl	8001d5c <HAL_RCC_ClockConfig>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c08:	f000 f842 	bl	8000c90 <Error_Handler>
  }
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b013      	add	sp, #76	; 0x4c
 8000c12:	bd90      	pop	{r4, r7, pc}

08000c14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	debug_rxBuf[debug_rx_cnt++] = debug_aRxBuf;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_UART_RxCpltCallback+0x68>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	b2d1      	uxtb	r1, r2
 8000c24:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <HAL_UART_RxCpltCallback+0x68>)
 8000c26:	7011      	strb	r1, [r2, #0]
 8000c28:	001a      	movs	r2, r3
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_UART_RxCpltCallback+0x6c>)
 8000c2c:	7819      	ldrb	r1, [r3, #0]
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_UART_RxCpltCallback+0x70>)
 8000c30:	5499      	strb	r1, [r3, r2]
	if (debug_aRxBuf == '\n') {
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <HAL_UART_RxCpltCallback+0x6c>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b0a      	cmp	r3, #10
 8000c38:	d115      	bne.n	8000c66 <HAL_UART_RxCpltCallback+0x52>
		debug_rx_flag = true;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_UART_RxCpltCallback+0x74>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
		memcpy(debug_rxData, debug_rxBuf, BUFFER_SIZE);
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_UART_RxCpltCallback+0x78>)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <HAL_UART_RxCpltCallback+0x70>)
 8000c44:	0010      	movs	r0, r2
 8000c46:	0019      	movs	r1, r3
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	f002 fc3f 	bl	80034d0 <memcpy>
		memset(debug_rxBuf, 0, BUFFER_SIZE);
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	005a      	lsls	r2, r3, #1
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_UART_RxCpltCallback+0x70>)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 fc41 	bl	80034e2 <memset>
		debug_rx_cnt = 0;
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_UART_RxCpltCallback+0x68>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(huart, &debug_aRxBuf, 1);
 8000c66:	4906      	ldr	r1, [pc, #24]	; (8000c80 <HAL_UART_RxCpltCallback+0x6c>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f001 faec 	bl	800224a <HAL_UART_Receive_IT>
//	HAL_UART_Receive_DMA(huart, &debug_aRxBuf, 1);
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	20000090 	.word	0x20000090
 8000c80:	200000a0 	.word	0x200000a0
 8000c84:	200000a4 	.word	0x200000a4
 8000c88:	20000091 	.word	0x20000091
 8000c8c:	200001a4 	.word	0x200001a4

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca4:	699a      	ldr	r2, [r3, #24]
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_MspInit+0x44>)
 8000ca8:	2101      	movs	r1, #1
 8000caa:	430a      	orrs	r2, r1
 8000cac:	619a      	str	r2, [r3, #24]
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cbc:	69da      	ldr	r2, [r3, #28]
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	0549      	lsls	r1, r1, #21
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	61da      	str	r2, [r3, #28]
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_MspInit+0x44>)
 8000cca:	69da      	ldr	r2, [r3, #28]
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	055b      	lsls	r3, r3, #21
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f9c2 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <USART2_IRQHandler+0x14>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f001 faf6 	bl	800230c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	200002a4 	.word	0x200002a4

08000d2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e00a      	b.n	8000d54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d3e:	e000      	b.n	8000d42 <_read+0x16>
 8000d40:	bf00      	nop
 8000d42:	0001      	movs	r1, r0
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	b2ca      	uxtb	r2, r1
 8000d4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697a      	ldr	r2, [r7, #20]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	dbf0      	blt.n	8000d3e <_read+0x12>
	}

return len;
 8000d5c:	687b      	ldr	r3, [r7, #4]
}
 8000d5e:	0018      	movs	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b006      	add	sp, #24
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e009      	b.n	8000d8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	1c5a      	adds	r2, r3, #1
 8000d7c:	60ba      	str	r2, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff fe11 	bl	80009a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf1      	blt.n	8000d78 <_write+0x12>
	}
	return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b006      	add	sp, #24
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_close>:

int _close(int file)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
	return -1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	425b      	negs	r3, r3
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	0192      	lsls	r2, r2, #6
 8000dc2:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b002      	add	sp, #8
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	0018      	movs	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
	return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	0018      	movs	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b004      	add	sp, #16
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	18d3      	adds	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f002 fb28 	bl	800347c <__errno>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	425b      	negs	r3, r3
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	18d2      	adds	r2, r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <_sbrk+0x64>)
 8000e48:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b006      	add	sp, #24
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20001800 	.word	0x20001800
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	20000094 	.word	0x20000094
 8000e60:	20000340 	.word	0x20000340

08000e64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <MX_USART2_UART_Init+0x5c>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e7c:	22e1      	movs	r2, #225	; 0xe1
 8000e7e:	0252      	lsls	r2, r2, #9
 8000e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <MX_USART2_UART_Init+0x58>)
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f001 f8cb 	bl	8002050 <HAL_UART_Init>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ebe:	f7ff fee7 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200002a4 	.word	0x200002a4
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b08b      	sub	sp, #44	; 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	2414      	movs	r4, #20
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f002 fafd 	bl	80034e2 <memset>
  if(uartHandle->Instance==USART2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a20      	ldr	r2, [pc, #128]	; (8000f70 <HAL_UART_MspInit+0xa0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d13a      	bne.n	8000f68 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <HAL_UART_MspInit+0xa4>)
 8000ef4:	69da      	ldr	r2, [r3, #28]
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_UART_MspInit+0xa4>)
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	0289      	lsls	r1, r1, #10
 8000efc:	430a      	orrs	r2, r1
 8000efe:	61da      	str	r2, [r3, #28]
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_UART_MspInit+0xa4>)
 8000f02:	69da      	ldr	r2, [r3, #28]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	029b      	lsls	r3, r3, #10
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_UART_MspInit+0xa4>)
 8000f10:	695a      	ldr	r2, [r3, #20]
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_UART_MspInit+0xa4>)
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	0289      	lsls	r1, r1, #10
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_UART_MspInit+0xa4>)
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f2a:	0021      	movs	r1, r4
 8000f2c:	187b      	adds	r3, r7, r1
 8000f2e:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_UART_MspInit+0xa8>)
 8000f30:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2202      	movs	r2, #2
 8000f36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2203      	movs	r2, #3
 8000f42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2201      	movs	r2, #1
 8000f48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	187a      	adds	r2, r7, r1
 8000f4c:	2390      	movs	r3, #144	; 0x90
 8000f4e:	05db      	lsls	r3, r3, #23
 8000f50:	0011      	movs	r1, r2
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 fa14 	bl	8001380 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	201c      	movs	r0, #28
 8000f5e:	f000 f95f 	bl	8001220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f62:	201c      	movs	r0, #28
 8000f64:	f000 f971 	bl	800124a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b00b      	add	sp, #44	; 0x2c
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	40004400 	.word	0x40004400
 8000f74:	40021000 	.word	0x40021000
 8000f78:	00008004 	.word	0x00008004

08000f7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f7c:	4813      	ldr	r0, [pc, #76]	; (8000fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000f80:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <LoopForever+0x6>)
    LDR R1, [R0]
 8000f82:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000f84:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000f86:	4a13      	ldr	r2, [pc, #76]	; (8000fd4 <LoopForever+0xa>)
    CMP R1, R2
 8000f88:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000f8a:	d105      	bne.n	8000f98 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000f8c:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000f8e:	4913      	ldr	r1, [pc, #76]	; (8000fdc <LoopForever+0x12>)
    STR R1, [R0]
 8000f90:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000f94:	4913      	ldr	r1, [pc, #76]	; (8000fe4 <LoopForever+0x1a>)
    STR R1, [R0]
 8000f96:	6001      	str	r1, [r0, #0]

08000f98 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000f9a:	4914      	ldr	r1, [pc, #80]	; (8000fec <LoopForever+0x22>)
  ldr r2, =_sidata
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <LoopForever+0x26>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000fb0:	4c11      	ldr	r4, [pc, #68]	; (8000ff8 <LoopForever+0x2e>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fbe:	f7ff ff51 	bl	8000e64 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fc2:	f002 fa61 	bl	8003488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc6:	f7ff fd03 	bl	80009d0 <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   r0, =_estack
 8000fcc:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000fd0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000fd4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000fd8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000fdc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000fe0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000fe4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ff0:	08004808 	.word	0x08004808
  ldr r2, =_sbss
 8000ff4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ff8:	2000033c 	.word	0x2000033c

08000ffc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_IRQHandler>
	...

08001000 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <HAL_Init+0x24>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_Init+0x24>)
 800100a:	2110      	movs	r1, #16
 800100c:	430a      	orrs	r2, r1
 800100e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001010:	2000      	movs	r0, #0
 8001012:	f000 f809 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001016:	f7ff fe41 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_InitTick+0x5c>)
 8001032:	681c      	ldr	r4, [r3, #0]
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_InitTick+0x60>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	0019      	movs	r1, r3
 800103a:	23fa      	movs	r3, #250	; 0xfa
 800103c:	0098      	lsls	r0, r3, #2
 800103e:	f7ff f875 	bl	800012c <__udivsi3>
 8001042:	0003      	movs	r3, r0
 8001044:	0019      	movs	r1, r3
 8001046:	0020      	movs	r0, r4
 8001048:	f7ff f870 	bl	800012c <__udivsi3>
 800104c:	0003      	movs	r3, r0
 800104e:	0018      	movs	r0, r3
 8001050:	f000 f90b 	bl	800126a <HAL_SYSTICK_Config>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d001      	beq.n	800105c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e00f      	b.n	800107c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d80b      	bhi.n	800107a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	2301      	movs	r3, #1
 8001066:	425b      	negs	r3, r3
 8001068:	2200      	movs	r2, #0
 800106a:	0018      	movs	r0, r3
 800106c:	f000 f8d8 	bl	8001220 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_InitTick+0x64>)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b003      	add	sp, #12
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	20000004 	.word	0x20000004
 8001088:	2000000c 	.word	0x2000000c
 800108c:	20000008 	.word	0x20000008

08001090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x1c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	001a      	movs	r2, r3
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_IncTick+0x20>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	18d2      	adds	r2, r2, r3
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_IncTick+0x20>)
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	20000328 	.word	0x20000328

080010b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <HAL_GetTick+0x10>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	20000328 	.word	0x20000328

080010c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b7f      	cmp	r3, #127	; 0x7f
 80010da:	d809      	bhi.n	80010f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	001a      	movs	r2, r3
 80010e2:	231f      	movs	r3, #31
 80010e4:	401a      	ands	r2, r3
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_EnableIRQ+0x30>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	4091      	lsls	r1, r2
 80010ec:	000a      	movs	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]
  }
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b002      	add	sp, #8
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	0002      	movs	r2, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b7f      	cmp	r3, #127	; 0x7f
 8001110:	d828      	bhi.n	8001164 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001112:	4a2f      	ldr	r2, [pc, #188]	; (80011d0 <__NVIC_SetPriority+0xd4>)
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b25b      	sxtb	r3, r3
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	33c0      	adds	r3, #192	; 0xc0
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	589b      	ldr	r3, [r3, r2]
 8001122:	1dfa      	adds	r2, r7, #7
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	0011      	movs	r1, r2
 8001128:	2203      	movs	r2, #3
 800112a:	400a      	ands	r2, r1
 800112c:	00d2      	lsls	r2, r2, #3
 800112e:	21ff      	movs	r1, #255	; 0xff
 8001130:	4091      	lsls	r1, r2
 8001132:	000a      	movs	r2, r1
 8001134:	43d2      	mvns	r2, r2
 8001136:	401a      	ands	r2, r3
 8001138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	019b      	lsls	r3, r3, #6
 800113e:	22ff      	movs	r2, #255	; 0xff
 8001140:	401a      	ands	r2, r3
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	0018      	movs	r0, r3
 8001148:	2303      	movs	r3, #3
 800114a:	4003      	ands	r3, r0
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001150:	481f      	ldr	r0, [pc, #124]	; (80011d0 <__NVIC_SetPriority+0xd4>)
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	b25b      	sxtb	r3, r3
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	430a      	orrs	r2, r1
 800115c:	33c0      	adds	r3, #192	; 0xc0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001162:	e031      	b.n	80011c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001164:	4a1b      	ldr	r2, [pc, #108]	; (80011d4 <__NVIC_SetPriority+0xd8>)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0019      	movs	r1, r3
 800116c:	230f      	movs	r3, #15
 800116e:	400b      	ands	r3, r1
 8001170:	3b08      	subs	r3, #8
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3306      	adds	r3, #6
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	18d3      	adds	r3, r2, r3
 800117a:	3304      	adds	r3, #4
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1dfa      	adds	r2, r7, #7
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	0011      	movs	r1, r2
 8001184:	2203      	movs	r2, #3
 8001186:	400a      	ands	r2, r1
 8001188:	00d2      	lsls	r2, r2, #3
 800118a:	21ff      	movs	r1, #255	; 0xff
 800118c:	4091      	lsls	r1, r2
 800118e:	000a      	movs	r2, r1
 8001190:	43d2      	mvns	r2, r2
 8001192:	401a      	ands	r2, r3
 8001194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	22ff      	movs	r2, #255	; 0xff
 800119c:	401a      	ands	r2, r3
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	2303      	movs	r3, #3
 80011a6:	4003      	ands	r3, r0
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <__NVIC_SetPriority+0xd8>)
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	001c      	movs	r4, r3
 80011b4:	230f      	movs	r3, #15
 80011b6:	4023      	ands	r3, r4
 80011b8:	3b08      	subs	r3, #8
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	430a      	orrs	r2, r1
 80011be:	3306      	adds	r3, #6
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	18c3      	adds	r3, r0, r3
 80011c4:	3304      	adds	r3, #4
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b003      	add	sp, #12
 80011ce:	bd90      	pop	{r4, r7, pc}
 80011d0:	e000e100 	.word	0xe000e100
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	1e5a      	subs	r2, r3, #1
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	045b      	lsls	r3, r3, #17
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d301      	bcc.n	80011f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ec:	2301      	movs	r3, #1
 80011ee:	e010      	b.n	8001212 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <SysTick_Config+0x44>)
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	3a01      	subs	r2, #1
 80011f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	2103      	movs	r1, #3
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff ff7c 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <SysTick_Config+0x44>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	; (800121c <SysTick_Config+0x44>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	210f      	movs	r1, #15
 800122c:	187b      	adds	r3, r7, r1
 800122e:	1c02      	adds	r2, r0, #0
 8001230:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	187b      	adds	r3, r7, r1
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b25b      	sxtb	r3, r3
 800123a:	0011      	movs	r1, r2
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ff5d 	bl	80010fc <__NVIC_SetPriority>
}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	0002      	movs	r2, r0
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff ff33 	bl	80010c8 <__NVIC_EnableIRQ>
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b002      	add	sp, #8
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff ffaf 	bl	80011d8 <SysTick_Config>
 800127a:	0003      	movs	r3, r0
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b002      	add	sp, #8
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2221      	movs	r2, #33	; 0x21
 8001290:	5c9b      	ldrb	r3, [r3, r2]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d008      	beq.n	80012aa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e020      	b.n	80012ec <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	210e      	movs	r1, #14
 80012b6:	438a      	bics	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2101      	movs	r1, #1
 80012c6:	438a      	bics	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d2:	2101      	movs	r1, #1
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2221      	movs	r2, #33	; 0x21
 80012de:	2101      	movs	r1, #1
 80012e0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2220      	movs	r2, #32
 80012e6:	2100      	movs	r1, #0
 80012e8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	0018      	movs	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	b002      	add	sp, #8
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012fc:	210f      	movs	r1, #15
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2221      	movs	r2, #33	; 0x21
 8001308:	5c9b      	ldrb	r3, [r3, r2]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d006      	beq.n	800131e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2204      	movs	r2, #4
 8001314:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	e028      	b.n	8001370 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	210e      	movs	r1, #14
 800132a:	438a      	bics	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	438a      	bics	r2, r1
 800133c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001346:	2101      	movs	r1, #1
 8001348:	4091      	lsls	r1, r2
 800134a:	000a      	movs	r2, r1
 800134c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2221      	movs	r2, #33	; 0x21
 8001352:	2101      	movs	r1, #1
 8001354:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2220      	movs	r2, #32
 800135a:	2100      	movs	r1, #0
 800135c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	0010      	movs	r0, r2
 800136e:	4798      	blx	r3
    } 
  }
  return status;
 8001370:	230f      	movs	r3, #15
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	781b      	ldrb	r3, [r3, #0]
}
 8001376:	0018      	movs	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	b004      	add	sp, #16
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800138e:	e149      	b.n	8001624 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4091      	lsls	r1, r2
 800139a:	000a      	movs	r2, r1
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d100      	bne.n	80013a8 <HAL_GPIO_Init+0x28>
 80013a6:	e13a      	b.n	800161e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2203      	movs	r2, #3
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d005      	beq.n	80013c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2203      	movs	r2, #3
 80013ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d130      	bne.n	8001422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	409a      	lsls	r2, r3
 80013ce:	0013      	movs	r3, r2
 80013d0:	43da      	mvns	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	409a      	lsls	r2, r3
 80013e2:	0013      	movs	r3, r2
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013f6:	2201      	movs	r2, #1
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	2201      	movs	r2, #1
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2203      	movs	r2, #3
 8001428:	4013      	ands	r3, r2
 800142a:	2b03      	cmp	r3, #3
 800142c:	d017      	beq.n	800145e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2203      	movs	r2, #3
 8001464:	4013      	ands	r3, r2
 8001466:	2b02      	cmp	r3, #2
 8001468:	d123      	bne.n	80014b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	08da      	lsrs	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3208      	adds	r2, #8
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	58d3      	ldr	r3, [r2, r3]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2207      	movs	r2, #7
 800147c:	4013      	ands	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	220f      	movs	r2, #15
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691a      	ldr	r2, [r3, #16]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2107      	movs	r1, #7
 8001496:	400b      	ands	r3, r1
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	409a      	lsls	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	08da      	lsrs	r2, r3, #3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3208      	adds	r2, #8
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	6939      	ldr	r1, [r7, #16]
 80014b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	2203      	movs	r2, #3
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	43da      	mvns	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2203      	movs	r2, #3
 80014d0:	401a      	ands	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	23c0      	movs	r3, #192	; 0xc0
 80014ec:	029b      	lsls	r3, r3, #10
 80014ee:	4013      	ands	r3, r2
 80014f0:	d100      	bne.n	80014f4 <HAL_GPIO_Init+0x174>
 80014f2:	e094      	b.n	800161e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f4:	4b51      	ldr	r3, [pc, #324]	; (800163c <HAL_GPIO_Init+0x2bc>)
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_GPIO_Init+0x2bc>)
 80014fa:	2101      	movs	r1, #1
 80014fc:	430a      	orrs	r2, r1
 80014fe:	619a      	str	r2, [r3, #24]
 8001500:	4b4e      	ldr	r3, [pc, #312]	; (800163c <HAL_GPIO_Init+0x2bc>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	589b      	ldr	r3, [r3, r2]
 8001518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2203      	movs	r2, #3
 800151e:	4013      	ands	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	220f      	movs	r2, #15
 8001524:	409a      	lsls	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	43da      	mvns	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	2390      	movs	r3, #144	; 0x90
 8001534:	05db      	lsls	r3, r3, #23
 8001536:	429a      	cmp	r2, r3
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x1d6>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a41      	ldr	r2, [pc, #260]	; (8001644 <HAL_GPIO_Init+0x2c4>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x1d2>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a40      	ldr	r2, [pc, #256]	; (8001648 <HAL_GPIO_Init+0x2c8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x1ce>
 800154a:	2302      	movs	r3, #2
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x1d8>
 800154e:	2305      	movs	r3, #5
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x1d8>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x1d8>
 8001556:	2300      	movs	r3, #0
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	2103      	movs	r1, #3
 800155c:	400a      	ands	r2, r1
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001568:	4935      	ldr	r1, [pc, #212]	; (8001640 <HAL_GPIO_Init+0x2c0>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001576:	4b35      	ldr	r3, [pc, #212]	; (800164c <HAL_GPIO_Init+0x2cc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	2380      	movs	r3, #128	; 0x80
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	4013      	ands	r3, r2
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800159a:	4b2c      	ldr	r3, [pc, #176]	; (800164c <HAL_GPIO_Init+0x2cc>)
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_GPIO_Init+0x2cc>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	43da      	mvns	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	029b      	lsls	r3, r3, #10
 80015b8:	4013      	ands	r3, r2
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_GPIO_Init+0x2cc>)
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_GPIO_Init+0x2cc>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43da      	mvns	r2, r3
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4013      	ands	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	035b      	lsls	r3, r3, #13
 80015e2:	4013      	ands	r3, r2
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015ee:	4b17      	ldr	r3, [pc, #92]	; (800164c <HAL_GPIO_Init+0x2cc>)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_GPIO_Init+0x2cc>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	43da      	mvns	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	039b      	lsls	r3, r3, #14
 800160c:	4013      	ands	r3, r2
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_GPIO_Init+0x2cc>)
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	40da      	lsrs	r2, r3
 800162c:	1e13      	subs	r3, r2, #0
 800162e:	d000      	beq.n	8001632 <HAL_GPIO_Init+0x2b2>
 8001630:	e6ae      	b.n	8001390 <HAL_GPIO_Init+0x10>
  } 
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46c0      	nop			; (mov r8, r8)
 8001636:	46bd      	mov	sp, r7
 8001638:	b006      	add	sp, #24
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	40010400 	.word	0x40010400

08001650 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	f000 fb76 	bl	8001d50 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	4013      	ands	r3, r2
 800166c:	d100      	bne.n	8001670 <HAL_RCC_OscConfig+0x20>
 800166e:	e08e      	b.n	800178e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001670:	4bc5      	ldr	r3, [pc, #788]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	220c      	movs	r2, #12
 8001676:	4013      	ands	r3, r2
 8001678:	2b04      	cmp	r3, #4
 800167a:	d00e      	beq.n	800169a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800167c:	4bc2      	ldr	r3, [pc, #776]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	220c      	movs	r2, #12
 8001682:	4013      	ands	r3, r2
 8001684:	2b08      	cmp	r3, #8
 8001686:	d117      	bne.n	80016b8 <HAL_RCC_OscConfig+0x68>
 8001688:	4bbf      	ldr	r3, [pc, #764]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	23c0      	movs	r3, #192	; 0xc0
 800168e:	025b      	lsls	r3, r3, #9
 8001690:	401a      	ands	r2, r3
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	429a      	cmp	r2, r3
 8001698:	d10e      	bne.n	80016b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169a:	4bbb      	ldr	r3, [pc, #748]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	029b      	lsls	r3, r3, #10
 80016a2:	4013      	ands	r3, r2
 80016a4:	d100      	bne.n	80016a8 <HAL_RCC_OscConfig+0x58>
 80016a6:	e071      	b.n	800178c <HAL_RCC_OscConfig+0x13c>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d000      	beq.n	80016b2 <HAL_RCC_OscConfig+0x62>
 80016b0:	e06c      	b.n	800178c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	f000 fb4c 	bl	8001d50 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x80>
 80016c0:	4bb1      	ldr	r3, [pc, #708]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4bb0      	ldr	r3, [pc, #704]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	0249      	lsls	r1, r1, #9
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e02f      	b.n	8001730 <HAL_RCC_OscConfig+0xe0>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10c      	bne.n	80016f2 <HAL_RCC_OscConfig+0xa2>
 80016d8:	4bab      	ldr	r3, [pc, #684]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4baa      	ldr	r3, [pc, #680]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80016de:	49ab      	ldr	r1, [pc, #684]	; (800198c <HAL_RCC_OscConfig+0x33c>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	4ba8      	ldr	r3, [pc, #672]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4ba7      	ldr	r3, [pc, #668]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80016ea:	49a9      	ldr	r1, [pc, #676]	; (8001990 <HAL_RCC_OscConfig+0x340>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	e01e      	b.n	8001730 <HAL_RCC_OscConfig+0xe0>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d10e      	bne.n	8001718 <HAL_RCC_OscConfig+0xc8>
 80016fa:	4ba3      	ldr	r3, [pc, #652]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4ba2      	ldr	r3, [pc, #648]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	02c9      	lsls	r1, r1, #11
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	4b9f      	ldr	r3, [pc, #636]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b9e      	ldr	r3, [pc, #632]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	0249      	lsls	r1, r1, #9
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e00b      	b.n	8001730 <HAL_RCC_OscConfig+0xe0>
 8001718:	4b9b      	ldr	r3, [pc, #620]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b9a      	ldr	r3, [pc, #616]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800171e:	499b      	ldr	r1, [pc, #620]	; (800198c <HAL_RCC_OscConfig+0x33c>)
 8001720:	400a      	ands	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	4b98      	ldr	r3, [pc, #608]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b97      	ldr	r3, [pc, #604]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800172a:	4999      	ldr	r1, [pc, #612]	; (8001990 <HAL_RCC_OscConfig+0x340>)
 800172c:	400a      	ands	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d014      	beq.n	8001762 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fcbc 	bl	80010b4 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001742:	f7ff fcb7 	bl	80010b4 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	; 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e2fd      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001754:	4b8c      	ldr	r3, [pc, #560]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	029b      	lsls	r3, r3, #10
 800175c:	4013      	ands	r3, r2
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0xf2>
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fca7 	bl	80010b4 <HAL_GetTick>
 8001766:	0003      	movs	r3, r0
 8001768:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fca2 	bl	80010b4 <HAL_GetTick>
 8001770:	0002      	movs	r2, r0
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e2e8      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b82      	ldr	r3, [pc, #520]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	029b      	lsls	r3, r3, #10
 8001786:	4013      	ands	r3, r2
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x11c>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d100      	bne.n	800179a <HAL_RCC_OscConfig+0x14a>
 8001798:	e06c      	b.n	8001874 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800179a:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	220c      	movs	r2, #12
 80017a0:	4013      	ands	r3, r2
 80017a2:	d00e      	beq.n	80017c2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017a4:	4b78      	ldr	r3, [pc, #480]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	220c      	movs	r2, #12
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d11f      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1a0>
 80017b0:	4b75      	ldr	r3, [pc, #468]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	23c0      	movs	r3, #192	; 0xc0
 80017b6:	025b      	lsls	r3, r3, #9
 80017b8:	401a      	ands	r2, r3
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	429a      	cmp	r2, r3
 80017c0:	d116      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c2:	4b71      	ldr	r3, [pc, #452]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x188>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e2bb      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d8:	4b6b      	ldr	r3, [pc, #428]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	22f8      	movs	r2, #248	; 0xf8
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	00da      	lsls	r2, r3, #3
 80017e8:	4b67      	ldr	r3, [pc, #412]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80017ea:	430a      	orrs	r2, r1
 80017ec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	e041      	b.n	8001874 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d024      	beq.n	8001842 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f8:	4b63      	ldr	r3, [pc, #396]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b62      	ldr	r3, [pc, #392]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80017fe:	2101      	movs	r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff fc56 	bl	80010b4 <HAL_GetTick>
 8001808:	0003      	movs	r3, r0
 800180a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fc51 	bl	80010b4 <HAL_GetTick>
 8001812:	0002      	movs	r2, r0
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e297      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	4b59      	ldr	r3, [pc, #356]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2202      	movs	r2, #2
 8001826:	4013      	ands	r3, r2
 8001828:	d0f1      	beq.n	800180e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182a:	4b57      	ldr	r3, [pc, #348]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	22f8      	movs	r2, #248	; 0xf8
 8001830:	4393      	bics	r3, r2
 8001832:	0019      	movs	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	00da      	lsls	r2, r3, #3
 800183a:	4b53      	ldr	r3, [pc, #332]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e018      	b.n	8001874 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001842:	4b51      	ldr	r3, [pc, #324]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b50      	ldr	r3, [pc, #320]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001848:	2101      	movs	r1, #1
 800184a:	438a      	bics	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff fc31 	bl	80010b4 <HAL_GetTick>
 8001852:	0003      	movs	r3, r0
 8001854:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001858:	f7ff fc2c 	bl	80010b4 <HAL_GetTick>
 800185c:	0002      	movs	r2, r0
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e272      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800186a:	4b47      	ldr	r3, [pc, #284]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	d1f1      	bne.n	8001858 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2208      	movs	r2, #8
 800187a:	4013      	ands	r3, r2
 800187c:	d036      	beq.n	80018ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d019      	beq.n	80018ba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001886:	4b40      	ldr	r3, [pc, #256]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	4b3f      	ldr	r3, [pc, #252]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff fc0f 	bl	80010b4 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff fc0a 	bl	80010b4 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e250      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d0f1      	beq.n	800189c <HAL_RCC_OscConfig+0x24c>
 80018b8:	e018      	b.n	80018ec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ba:	4b33      	ldr	r3, [pc, #204]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80018bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018be:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80018c0:	2101      	movs	r1, #1
 80018c2:	438a      	bics	r2, r1
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fbf5 	bl	80010b4 <HAL_GetTick>
 80018ca:	0003      	movs	r3, r0
 80018cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff fbf0 	bl	80010b4 <HAL_GetTick>
 80018d4:	0002      	movs	r2, r0
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e236      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e2:	4b29      	ldr	r3, [pc, #164]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	2202      	movs	r2, #2
 80018e8:	4013      	ands	r3, r2
 80018ea:	d1f1      	bne.n	80018d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2204      	movs	r2, #4
 80018f2:	4013      	ands	r3, r2
 80018f4:	d100      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2a8>
 80018f6:	e0b5      	b.n	8001a64 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018f8:	201f      	movs	r0, #31
 80018fa:	183b      	adds	r3, r7, r0
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001902:	69da      	ldr	r2, [r3, #28]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	055b      	lsls	r3, r3, #21
 8001908:	4013      	ands	r3, r2
 800190a:	d110      	bne.n	800192e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800190e:	69da      	ldr	r2, [r3, #28]
 8001910:	4b1d      	ldr	r3, [pc, #116]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	0549      	lsls	r1, r1, #21
 8001916:	430a      	orrs	r2, r1
 8001918:	61da      	str	r2, [r3, #28]
 800191a:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	055b      	lsls	r3, r3, #21
 8001922:	4013      	ands	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001928:	183b      	adds	r3, r7, r0
 800192a:	2201      	movs	r2, #1
 800192c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_OscConfig+0x344>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4013      	ands	r3, r2
 8001938:	d11a      	bne.n	8001970 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_RCC_OscConfig+0x344>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_RCC_OscConfig+0x344>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	0049      	lsls	r1, r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001948:	f7ff fbb4 	bl	80010b4 <HAL_GetTick>
 800194c:	0003      	movs	r3, r0
 800194e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001952:	f7ff fbaf 	bl	80010b4 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1f5      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_OscConfig+0x344>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4013      	ands	r3, r2
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d10f      	bne.n	8001998 <HAL_RCC_OscConfig+0x348>
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	4b02      	ldr	r3, [pc, #8]	; (8001988 <HAL_RCC_OscConfig+0x338>)
 800197e:	2101      	movs	r1, #1
 8001980:	430a      	orrs	r2, r1
 8001982:	621a      	str	r2, [r3, #32]
 8001984:	e036      	b.n	80019f4 <HAL_RCC_OscConfig+0x3a4>
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	40021000 	.word	0x40021000
 800198c:	fffeffff 	.word	0xfffeffff
 8001990:	fffbffff 	.word	0xfffbffff
 8001994:	40007000 	.word	0x40007000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x36a>
 80019a0:	4bca      	ldr	r3, [pc, #808]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019a2:	6a1a      	ldr	r2, [r3, #32]
 80019a4:	4bc9      	ldr	r3, [pc, #804]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	438a      	bics	r2, r1
 80019aa:	621a      	str	r2, [r3, #32]
 80019ac:	4bc7      	ldr	r3, [pc, #796]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019ae:	6a1a      	ldr	r2, [r3, #32]
 80019b0:	4bc6      	ldr	r3, [pc, #792]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019b2:	2104      	movs	r1, #4
 80019b4:	438a      	bics	r2, r1
 80019b6:	621a      	str	r2, [r3, #32]
 80019b8:	e01c      	b.n	80019f4 <HAL_RCC_OscConfig+0x3a4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b05      	cmp	r3, #5
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x38c>
 80019c2:	4bc2      	ldr	r3, [pc, #776]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019c4:	6a1a      	ldr	r2, [r3, #32]
 80019c6:	4bc1      	ldr	r3, [pc, #772]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019c8:	2104      	movs	r1, #4
 80019ca:	430a      	orrs	r2, r1
 80019cc:	621a      	str	r2, [r3, #32]
 80019ce:	4bbf      	ldr	r3, [pc, #764]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019d0:	6a1a      	ldr	r2, [r3, #32]
 80019d2:	4bbe      	ldr	r3, [pc, #760]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019d4:	2101      	movs	r1, #1
 80019d6:	430a      	orrs	r2, r1
 80019d8:	621a      	str	r2, [r3, #32]
 80019da:	e00b      	b.n	80019f4 <HAL_RCC_OscConfig+0x3a4>
 80019dc:	4bbb      	ldr	r3, [pc, #748]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019de:	6a1a      	ldr	r2, [r3, #32]
 80019e0:	4bba      	ldr	r3, [pc, #744]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019e2:	2101      	movs	r1, #1
 80019e4:	438a      	bics	r2, r1
 80019e6:	621a      	str	r2, [r3, #32]
 80019e8:	4bb8      	ldr	r3, [pc, #736]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019ea:	6a1a      	ldr	r2, [r3, #32]
 80019ec:	4bb7      	ldr	r3, [pc, #732]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 80019ee:	2104      	movs	r1, #4
 80019f0:	438a      	bics	r2, r1
 80019f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d014      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fc:	f7ff fb5a 	bl	80010b4 <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a04:	e009      	b.n	8001a1a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff fb55 	bl	80010b4 <HAL_GetTick>
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	4aaf      	ldr	r2, [pc, #700]	; (8001cd0 <HAL_RCC_OscConfig+0x680>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e19a      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1a:	4bac      	ldr	r3, [pc, #688]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x3b6>
 8001a24:	e013      	b.n	8001a4e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb45 	bl	80010b4 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2e:	e009      	b.n	8001a44 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff fb40 	bl	80010b4 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4aa5      	ldr	r2, [pc, #660]	; (8001cd0 <HAL_RCC_OscConfig+0x680>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e185      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4ba1      	ldr	r3, [pc, #644]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a4e:	231f      	movs	r3, #31
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b9c      	ldr	r3, [pc, #624]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001a5a:	69da      	ldr	r2, [r3, #28]
 8001a5c:	4b9b      	ldr	r3, [pc, #620]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001a5e:	499d      	ldr	r1, [pc, #628]	; (8001cd4 <HAL_RCC_OscConfig+0x684>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d063      	beq.n	8001b36 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695b      	ldr	r3, [r3, #20]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d12a      	bne.n	8001acc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a76:	4b95      	ldr	r3, [pc, #596]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a7a:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001a7c:	2104      	movs	r1, #4
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a82:	4b92      	ldr	r3, [pc, #584]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a86:	4b91      	ldr	r3, [pc, #580]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb11 	bl	80010b4 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a98:	f7ff fb0c 	bl	80010b4 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e152      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001aaa:	4b88      	ldr	r3, [pc, #544]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0f1      	beq.n	8001a98 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ab4:	4b85      	ldr	r3, [pc, #532]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	22f8      	movs	r2, #248	; 0xf8
 8001aba:	4393      	bics	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	00da      	lsls	r2, r3, #3
 8001ac4:	4b81      	ldr	r3, [pc, #516]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aca:	e034      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	3305      	adds	r3, #5
 8001ad2:	d111      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ad4:	4b7d      	ldr	r3, [pc, #500]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad8:	4b7c      	ldr	r3, [pc, #496]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001ada:	2104      	movs	r1, #4
 8001adc:	438a      	bics	r2, r1
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ae0:	4b7a      	ldr	r3, [pc, #488]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	22f8      	movs	r2, #248	; 0xf8
 8001ae6:	4393      	bics	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	00da      	lsls	r2, r3, #3
 8001af0:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	635a      	str	r2, [r3, #52]	; 0x34
 8001af6:	e01e      	b.n	8001b36 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001af8:	4b74      	ldr	r3, [pc, #464]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001afc:	4b73      	ldr	r3, [pc, #460]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001afe:	2104      	movs	r1, #4
 8001b00:	430a      	orrs	r2, r1
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b04:	4b71      	ldr	r3, [pc, #452]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b08:	4b70      	ldr	r3, [pc, #448]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b10:	f7ff fad0 	bl	80010b4 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b1a:	f7ff facb 	bl	80010b4 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e111      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b2c:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	2202      	movs	r2, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	d1f1      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d05c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b40:	4b62      	ldr	r3, [pc, #392]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	220c      	movs	r2, #12
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b0c      	cmp	r3, #12
 8001b4a:	d00e      	beq.n	8001b6a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b4c:	4b5f      	ldr	r3, [pc, #380]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	220c      	movs	r2, #12
 8001b52:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d114      	bne.n	8001b82 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b58:	4b5c      	ldr	r3, [pc, #368]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	23c0      	movs	r3, #192	; 0xc0
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	401a      	ands	r2, r3
 8001b62:	23c0      	movs	r3, #192	; 0xc0
 8001b64:	025b      	lsls	r3, r3, #9
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d10b      	bne.n	8001b82 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b6a:	4b58      	ldr	r3, [pc, #352]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	025b      	lsls	r3, r3, #9
 8001b72:	4013      	ands	r3, r2
 8001b74:	d040      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x5a8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d03c      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0e6      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b8a:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b8e:	4b4f      	ldr	r3, [pc, #316]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	0249      	lsls	r1, r1, #9
 8001b94:	430a      	orrs	r2, r1
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fa8c 	bl	80010b4 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba2:	f7ff fa87 	bl	80010b4 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0cd      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bb4:	4b45      	ldr	r3, [pc, #276]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	025b      	lsls	r3, r3, #9
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d0f0      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x552>
 8001bc0:	e01b      	b.n	8001bfa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001bc8:	4943      	ldr	r1, [pc, #268]	; (8001cd8 <HAL_RCC_OscConfig+0x688>)
 8001bca:	400a      	ands	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fa71 	bl	80010b4 <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd8:	f7ff fa6c 	bl	80010b4 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0b2      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	025b      	lsls	r3, r3, #9
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x588>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001bf8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d100      	bne.n	8001c04 <HAL_RCC_OscConfig+0x5b4>
 8001c02:	e0a4      	b.n	8001d4e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	220c      	movs	r2, #12
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d100      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5c2>
 8001c10:	e078      	b.n	8001d04 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d14c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c20:	492e      	ldr	r1, [pc, #184]	; (8001cdc <HAL_RCC_OscConfig+0x68c>)
 8001c22:	400a      	ands	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff fa45 	bl	80010b4 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff fa40 	bl	80010b4 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e086      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	049b      	lsls	r3, r3, #18
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	220f      	movs	r2, #15
 8001c54:	4393      	bics	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4a1e      	ldr	r2, [pc, #120]	; (8001ce0 <HAL_RCC_OscConfig+0x690>)
 8001c68:	4013      	ands	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	431a      	orrs	r2, r3
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	0449      	lsls	r1, r1, #17
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fa13 	bl	80010b4 <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff fa0e 	bl	80010b4 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e054      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	049b      	lsls	r3, r3, #18
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x644>
 8001cb2:	e04c      	b.n	8001d4e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <HAL_RCC_OscConfig+0x67c>)
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <HAL_RCC_OscConfig+0x68c>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f9f8 	bl	80010b4 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc8:	e015      	b.n	8001cf6 <HAL_RCC_OscConfig+0x6a6>
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	00001388 	.word	0x00001388
 8001cd4:	efffffff 	.word	0xefffffff
 8001cd8:	fffeffff 	.word	0xfffeffff
 8001cdc:	feffffff 	.word	0xfeffffff
 8001ce0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f9e6 	bl	80010b4 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e02c      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf6:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_RCC_OscConfig+0x708>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	049b      	lsls	r3, r3, #18
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x694>
 8001d02:	e024      	b.n	8001d4e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e01f      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_RCC_OscConfig+0x708>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_RCC_OscConfig+0x708>)
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	025b      	lsls	r3, r3, #9
 8001d22:	401a      	ands	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d10e      	bne.n	8001d4a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	220f      	movs	r2, #15
 8001d30:	401a      	ands	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	23f0      	movs	r3, #240	; 0xf0
 8001d3e:	039b      	lsls	r3, r3, #14
 8001d40:	401a      	ands	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b008      	add	sp, #32
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000

08001d5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0bf      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d70:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <HAL_RCC_ClockConfig+0x19c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	4013      	ands	r3, r2
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d911      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b5e      	ldr	r3, [pc, #376]	; (8001ef8 <HAL_RCC_ClockConfig+0x19c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4393      	bics	r3, r2
 8001d86:	0019      	movs	r1, r3
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <HAL_RCC_ClockConfig+0x19c>)
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d90:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <HAL_RCC_ClockConfig+0x19c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4013      	ands	r3, r2
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0a6      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d015      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2204      	movs	r2, #4
 8001db2:	4013      	ands	r3, r2
 8001db4:	d006      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001db6:	4b51      	ldr	r3, [pc, #324]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4b50      	ldr	r3, [pc, #320]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001dbc:	21e0      	movs	r1, #224	; 0xe0
 8001dbe:	00c9      	lsls	r1, r1, #3
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc4:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	22f0      	movs	r2, #240	; 0xf0
 8001dca:	4393      	bics	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4013      	ands	r3, r2
 8001de0:	d04c      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	4b44      	ldr	r3, [pc, #272]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	029b      	lsls	r3, r3, #10
 8001df2:	4013      	ands	r3, r2
 8001df4:	d120      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e07a      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d107      	bne.n	8001e12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4b3e      	ldr	r3, [pc, #248]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	049b      	lsls	r3, r3, #18
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d114      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06e      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001e1a:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	025b      	lsls	r3, r3, #9
 8001e22:	4013      	ands	r3, r2
 8001e24:	d108      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e062      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e2a:	4b34      	ldr	r3, [pc, #208]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e05b      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4393      	bics	r3, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e4c:	f7ff f932 	bl	80010b4 <HAL_GetTick>
 8001e50:	0003      	movs	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e54:	e009      	b.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e56:	f7ff f92d 	bl	80010b4 <HAL_GetTick>
 8001e5a:	0002      	movs	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	4a27      	ldr	r2, [pc, #156]	; (8001f00 <HAL_RCC_ClockConfig+0x1a4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e042      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	220c      	movs	r2, #12
 8001e70:	401a      	ands	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1ec      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_ClockConfig+0x19c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2201      	movs	r2, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d211      	bcs.n	8001eae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HAL_RCC_ClockConfig+0x19c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4393      	bics	r3, r2
 8001e92:	0019      	movs	r1, r3
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HAL_RCC_ClockConfig+0x19c>)
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_RCC_ClockConfig+0x19c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e020      	b.n	8001ef0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d009      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001eb8:	4b10      	ldr	r3, [pc, #64]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_RCC_ClockConfig+0x1a8>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ecc:	f000 f820 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001ed0:	0001      	movs	r1, r0
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_RCC_ClockConfig+0x1a0>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	220f      	movs	r2, #15
 8001eda:	4013      	ands	r3, r2
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1ac>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	000a      	movs	r2, r1
 8001ee2:	40da      	lsrs	r2, r3
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1b0>)
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7ff f89d 	bl	8001028 <HAL_InitTick>
  
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b004      	add	sp, #16
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40022000 	.word	0x40022000
 8001efc:	40021000 	.word	0x40021000
 8001f00:	00001388 	.word	0x00001388
 8001f04:	fffff8ff 	.word	0xfffff8ff
 8001f08:	08004750 	.word	0x08004750
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b08f      	sub	sp, #60	; 0x3c
 8001f14:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f16:	2314      	movs	r3, #20
 8001f18:	18fb      	adds	r3, r7, r3
 8001f1a:	4a38      	ldr	r2, [pc, #224]	; (8001ffc <HAL_RCC_GetSysClockFreq+0xec>)
 8001f1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f1e:	c313      	stmia	r3!, {r0, r1, r4}
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4a36      	ldr	r2, [pc, #216]	; (8002000 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001f28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f2a:	c313      	stmia	r3!, {r0, r1, r4}
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f38:	2300      	movs	r3, #0
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	220c      	movs	r2, #12
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b0c      	cmp	r3, #12
 8001f52:	d047      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001f54:	d849      	bhi.n	8001fea <HAL_RCC_GetSysClockFreq+0xda>
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d002      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x50>
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d003      	beq.n	8001f66 <HAL_RCC_GetSysClockFreq+0x56>
 8001f5e:	e044      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f60:	4b29      	ldr	r3, [pc, #164]	; (8002008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f64:	e044      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2214      	movs	r2, #20
 8001f70:	18ba      	adds	r2, r7, r2
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	220f      	movs	r2, #15
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	1d3a      	adds	r2, r7, #4
 8001f80:	5cd3      	ldrb	r3, [r2, r3]
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f86:	23c0      	movs	r3, #192	; 0xc0
 8001f88:	025b      	lsls	r3, r3, #9
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	025b      	lsls	r3, r3, #9
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d109      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f96:	481c      	ldr	r0, [pc, #112]	; (8002008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f98:	f7fe f8c8 	bl	800012c <__udivsi3>
 8001f9c:	0003      	movs	r3, r0
 8001f9e:	001a      	movs	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	4353      	muls	r3, r2
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8001fa6:	e01a      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001faa:	23c0      	movs	r3, #192	; 0xc0
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	401a      	ands	r2, r3
 8001fb0:	23c0      	movs	r3, #192	; 0xc0
 8001fb2:	025b      	lsls	r3, r3, #9
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d109      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fba:	4814      	ldr	r0, [pc, #80]	; (800200c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fbc:	f7fe f8b6 	bl	800012c <__udivsi3>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	4353      	muls	r3, r2
 8001fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001fca:	e008      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fce:	480e      	ldr	r0, [pc, #56]	; (8002008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd0:	f7fe f8ac 	bl	800012c <__udivsi3>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	4353      	muls	r3, r2
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fe8:	e002      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fea:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b00f      	add	sp, #60	; 0x3c
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	08004600 	.word	0x08004600
 8002000:	08004610 	.word	0x08004610
 8002004:	40021000 	.word	0x40021000
 8002008:	007a1200 	.word	0x007a1200
 800200c:	02dc6c00 	.word	0x02dc6c00

08002010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002014:	4b02      	ldr	r3, [pc, #8]	; (8002020 <HAL_RCC_GetHCLKFreq+0x10>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	20000004 	.word	0x20000004

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002028:	f7ff fff2 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 800202c:	0001      	movs	r1, r0
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	2207      	movs	r2, #7
 8002036:	4013      	ands	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_GetPCLK1Freq+0x28>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	40d9      	lsrs	r1, r3
 800203e:	000b      	movs	r3, r1
}    
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	40021000 	.word	0x40021000
 800204c:	08004760 	.word	0x08004760

08002050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e044      	b.n	80020ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002066:	2b00      	cmp	r3, #0
 8002068:	d107      	bne.n	800207a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2274      	movs	r2, #116	; 0x74
 800206e:	2100      	movs	r1, #0
 8002070:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	0018      	movs	r0, r3
 8002076:	f7fe ff2b 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2224      	movs	r2, #36	; 0x24
 800207e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2101      	movs	r1, #1
 800208c:	438a      	bics	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f000 fc2e 	bl	80028f4 <UART_SetConfig>
 8002098:	0003      	movs	r3, r0
 800209a:	2b01      	cmp	r3, #1
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e024      	b.n	80020ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 fd61 	bl	8002b74 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	490d      	ldr	r1, [pc, #52]	; (80020f4 <HAL_UART_Init+0xa4>)
 80020be:	400a      	ands	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	212a      	movs	r1, #42	; 0x2a
 80020ce:	438a      	bics	r2, r1
 80020d0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2101      	movs	r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 fdf9 	bl	8002cdc <UART_CheckIdleState>
 80020ea:	0003      	movs	r3, r0
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	ffffb7ff 	.word	0xffffb7ff

080020f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	1dbb      	adds	r3, r7, #6
 8002106:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800210c:	2b20      	cmp	r3, #32
 800210e:	d000      	beq.n	8002112 <HAL_UART_Transmit+0x1a>
 8002110:	e096      	b.n	8002240 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_UART_Transmit+0x28>
 8002118:	1dbb      	adds	r3, r7, #6
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e08e      	b.n	8002242 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	429a      	cmp	r2, r3
 800212e:	d109      	bne.n	8002144 <HAL_UART_Transmit+0x4c>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2201      	movs	r2, #1
 800213c:	4013      	ands	r3, r2
 800213e:	d001      	beq.n	8002144 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e07e      	b.n	8002242 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2274      	movs	r2, #116	; 0x74
 8002148:	5c9b      	ldrb	r3, [r3, r2]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_UART_Transmit+0x5a>
 800214e:	2302      	movs	r3, #2
 8002150:	e077      	b.n	8002242 <HAL_UART_Transmit+0x14a>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2274      	movs	r2, #116	; 0x74
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	2100      	movs	r1, #0
 8002160:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2221      	movs	r2, #33	; 0x21
 8002166:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002168:	f7fe ffa4 	bl	80010b4 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1dba      	adds	r2, r7, #6
 8002174:	2150      	movs	r1, #80	; 0x50
 8002176:	8812      	ldrh	r2, [r2, #0]
 8002178:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1dba      	adds	r2, r7, #6
 800217e:	2152      	movs	r1, #82	; 0x52
 8002180:	8812      	ldrh	r2, [r2, #0]
 8002182:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	015b      	lsls	r3, r3, #5
 800218c:	429a      	cmp	r2, r3
 800218e:	d108      	bne.n	80021a2 <HAL_UART_Transmit+0xaa>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d104      	bne.n	80021a2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	e003      	b.n	80021aa <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2274      	movs	r2, #116	; 0x74
 80021ae:	2100      	movs	r1, #0
 80021b0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80021b2:	e02d      	b.n	8002210 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	0013      	movs	r3, r2
 80021be:	2200      	movs	r2, #0
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	f000 fdd3 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d001      	beq.n	80021ce <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e039      	b.n	8002242 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	881a      	ldrh	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	05d2      	lsls	r2, r2, #23
 80021de:	0dd2      	lsrs	r2, r2, #23
 80021e0:	b292      	uxth	r2, r2
 80021e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	3302      	adds	r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	e008      	b.n	80021fe <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	781a      	ldrb	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b292      	uxth	r2, r2
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	3301      	adds	r3, #1
 80021fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2252      	movs	r2, #82	; 0x52
 8002202:	5a9b      	ldrh	r3, [r3, r2]
 8002204:	b29b      	uxth	r3, r3
 8002206:	3b01      	subs	r3, #1
 8002208:	b299      	uxth	r1, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2252      	movs	r2, #82	; 0x52
 800220e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2252      	movs	r2, #82	; 0x52
 8002214:	5a9b      	ldrh	r3, [r3, r2]
 8002216:	b29b      	uxth	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1cb      	bne.n	80021b4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	0013      	movs	r3, r2
 8002226:	2200      	movs	r2, #0
 8002228:	2140      	movs	r1, #64	; 0x40
 800222a:	f000 fd9f 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d001      	beq.n	8002236 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e005      	b.n	8002242 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	e000      	b.n	8002242 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002240:	2302      	movs	r3, #2
  }
}
 8002242:	0018      	movs	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	b008      	add	sp, #32
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b088      	sub	sp, #32
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800225c:	2b20      	cmp	r3, #32
 800225e:	d150      	bne.n	8002302 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_UART_Receive_IT+0x24>
 8002266:	1dbb      	adds	r3, r7, #6
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e048      	b.n	8002304 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	2380      	movs	r3, #128	; 0x80
 8002278:	015b      	lsls	r3, r3, #5
 800227a:	429a      	cmp	r2, r3
 800227c:	d109      	bne.n	8002292 <HAL_UART_Receive_IT+0x48>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2201      	movs	r2, #1
 800228a:	4013      	ands	r3, r2
 800228c:	d001      	beq.n	8002292 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e038      	b.n	8002304 <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2274      	movs	r2, #116	; 0x74
 8002296:	5c9b      	ldrb	r3, [r3, r2]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_UART_Receive_IT+0x56>
 800229c:	2302      	movs	r3, #2
 800229e:	e031      	b.n	8002304 <HAL_UART_Receive_IT+0xba>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2274      	movs	r2, #116	; 0x74
 80022a4:	2101      	movs	r1, #1
 80022a6:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	4013      	ands	r3, r2
 80022ba:	d019      	beq.n	80022f0 <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022bc:	f3ef 8310 	mrs	r3, PRIMASK
 80022c0:	613b      	str	r3, [r7, #16]
  return(result);
 80022c2:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	2301      	movs	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f383 8810 	msr	PRIMASK, r3
}
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	04c9      	lsls	r1, r1, #19
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f383 8810 	msr	PRIMASK, r3
}
 80022ee:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022f0:	1dbb      	adds	r3, r7, #6
 80022f2:	881a      	ldrh	r2, [r3, #0]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f000 fdfb 	bl	8002ef4 <UART_Start_Receive_IT>
 80022fe:	0003      	movs	r3, r0
 8002300:	e000      	b.n	8002304 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
  }
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b008      	add	sp, #32
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b0ab      	sub	sp, #172	; 0xac
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	22a4      	movs	r2, #164	; 0xa4
 800231c:	18b9      	adds	r1, r7, r2
 800231e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	20a0      	movs	r0, #160	; 0xa0
 8002328:	1839      	adds	r1, r7, r0
 800232a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	219c      	movs	r1, #156	; 0x9c
 8002334:	1879      	adds	r1, r7, r1
 8002336:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002338:	0011      	movs	r1, r2
 800233a:	18bb      	adds	r3, r7, r2
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a99      	ldr	r2, [pc, #612]	; (80025a4 <HAL_UART_IRQHandler+0x298>)
 8002340:	4013      	ands	r3, r2
 8002342:	2298      	movs	r2, #152	; 0x98
 8002344:	18bc      	adds	r4, r7, r2
 8002346:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002348:	18bb      	adds	r3, r7, r2
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d114      	bne.n	800237a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002350:	187b      	adds	r3, r7, r1
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2220      	movs	r2, #32
 8002356:	4013      	ands	r3, r2
 8002358:	d00f      	beq.n	800237a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800235a:	183b      	adds	r3, r7, r0
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2220      	movs	r2, #32
 8002360:	4013      	ands	r3, r2
 8002362:	d00a      	beq.n	800237a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002368:	2b00      	cmp	r3, #0
 800236a:	d100      	bne.n	800236e <HAL_UART_IRQHandler+0x62>
 800236c:	e296      	b.n	800289c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	0010      	movs	r0, r2
 8002376:	4798      	blx	r3
      }
      return;
 8002378:	e290      	b.n	800289c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800237a:	2398      	movs	r3, #152	; 0x98
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d100      	bne.n	8002386 <HAL_UART_IRQHandler+0x7a>
 8002384:	e114      	b.n	80025b0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002386:	239c      	movs	r3, #156	; 0x9c
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2201      	movs	r2, #1
 800238e:	4013      	ands	r3, r2
 8002390:	d106      	bne.n	80023a0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002392:	23a0      	movs	r3, #160	; 0xa0
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a83      	ldr	r2, [pc, #524]	; (80025a8 <HAL_UART_IRQHandler+0x29c>)
 800239a:	4013      	ands	r3, r2
 800239c:	d100      	bne.n	80023a0 <HAL_UART_IRQHandler+0x94>
 800239e:	e107      	b.n	80025b0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023a0:	23a4      	movs	r3, #164	; 0xa4
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d012      	beq.n	80023d2 <HAL_UART_IRQHandler+0xc6>
 80023ac:	23a0      	movs	r3, #160	; 0xa0
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4013      	ands	r3, r2
 80023b8:	d00b      	beq.n	80023d2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2201      	movs	r2, #1
 80023c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	589b      	ldr	r3, [r3, r2]
 80023c8:	2201      	movs	r2, #1
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2180      	movs	r1, #128	; 0x80
 80023d0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023d2:	23a4      	movs	r3, #164	; 0xa4
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2202      	movs	r2, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d011      	beq.n	8002402 <HAL_UART_IRQHandler+0xf6>
 80023de:	239c      	movs	r3, #156	; 0x9c
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	d00b      	beq.n	8002402 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2202      	movs	r2, #2
 80023f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2280      	movs	r2, #128	; 0x80
 80023f6:	589b      	ldr	r3, [r3, r2]
 80023f8:	2204      	movs	r2, #4
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2180      	movs	r1, #128	; 0x80
 8002400:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002402:	23a4      	movs	r3, #164	; 0xa4
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2204      	movs	r2, #4
 800240a:	4013      	ands	r3, r2
 800240c:	d011      	beq.n	8002432 <HAL_UART_IRQHandler+0x126>
 800240e:	239c      	movs	r3, #156	; 0x9c
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	4013      	ands	r3, r2
 8002418:	d00b      	beq.n	8002432 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2204      	movs	r2, #4
 8002420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	589b      	ldr	r3, [r3, r2]
 8002428:	2202      	movs	r2, #2
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002432:	23a4      	movs	r3, #164	; 0xa4
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2208      	movs	r2, #8
 800243a:	4013      	ands	r3, r2
 800243c:	d017      	beq.n	800246e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800243e:	23a0      	movs	r3, #160	; 0xa0
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2220      	movs	r2, #32
 8002446:	4013      	ands	r3, r2
 8002448:	d105      	bne.n	8002456 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800244a:	239c      	movs	r3, #156	; 0x9c
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2201      	movs	r2, #1
 8002452:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002454:	d00b      	beq.n	800246e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2208      	movs	r2, #8
 800245c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2280      	movs	r2, #128	; 0x80
 8002462:	589b      	ldr	r3, [r3, r2]
 8002464:	2208      	movs	r2, #8
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800246e:	23a4      	movs	r3, #164	; 0xa4
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	4013      	ands	r3, r2
 800247a:	d013      	beq.n	80024a4 <HAL_UART_IRQHandler+0x198>
 800247c:	23a0      	movs	r3, #160	; 0xa0
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	04db      	lsls	r3, r3, #19
 8002486:	4013      	ands	r3, r2
 8002488:	d00c      	beq.n	80024a4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	589b      	ldr	r3, [r3, r2]
 800249a:	2220      	movs	r2, #32
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	589b      	ldr	r3, [r3, r2]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d100      	bne.n	80024b0 <HAL_UART_IRQHandler+0x1a4>
 80024ae:	e1f7      	b.n	80028a0 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80024b0:	23a4      	movs	r3, #164	; 0xa4
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2220      	movs	r2, #32
 80024b8:	4013      	ands	r3, r2
 80024ba:	d00e      	beq.n	80024da <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024bc:	23a0      	movs	r3, #160	; 0xa0
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2220      	movs	r2, #32
 80024c4:	4013      	ands	r3, r2
 80024c6:	d008      	beq.n	80024da <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	0010      	movs	r0, r2
 80024d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	589b      	ldr	r3, [r3, r2]
 80024e0:	2194      	movs	r1, #148	; 0x94
 80024e2:	187a      	adds	r2, r7, r1
 80024e4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2240      	movs	r2, #64	; 0x40
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b40      	cmp	r3, #64	; 0x40
 80024f2:	d004      	beq.n	80024fe <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2228      	movs	r2, #40	; 0x28
 80024fa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024fc:	d047      	beq.n	800258e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 fda7 	bl	8003054 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2240      	movs	r2, #64	; 0x40
 800250e:	4013      	ands	r3, r2
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d137      	bne.n	8002584 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002514:	f3ef 8310 	mrs	r3, PRIMASK
 8002518:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800251a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800251c:	2090      	movs	r0, #144	; 0x90
 800251e:	183a      	adds	r2, r7, r0
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	2301      	movs	r3, #1
 8002524:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002526:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002528:	f383 8810 	msr	PRIMASK, r3
}
 800252c:	46c0      	nop			; (mov r8, r8)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2140      	movs	r1, #64	; 0x40
 800253a:	438a      	bics	r2, r1
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	183b      	adds	r3, r7, r0
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002546:	f383 8810 	msr	PRIMASK, r3
}
 800254a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002550:	2b00      	cmp	r3, #0
 8002552:	d012      	beq.n	800257a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <HAL_UART_IRQHandler+0x2a0>)
 800255a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	0018      	movs	r0, r3
 8002562:	f7fe fec7 	bl	80012f4 <HAL_DMA_Abort_IT>
 8002566:	1e03      	subs	r3, r0, #0
 8002568:	d01a      	beq.n	80025a0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	0018      	movs	r0, r3
 8002576:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	e012      	b.n	80025a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0018      	movs	r0, r3
 800257e:	f000 f9a5 	bl	80028cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002582:	e00d      	b.n	80025a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f9a0 	bl	80028cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800258c:	e008      	b.n	80025a0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f99b 	bl	80028cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2280      	movs	r2, #128	; 0x80
 800259a:	2100      	movs	r1, #0
 800259c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800259e:	e17f      	b.n	80028a0 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a0:	46c0      	nop			; (mov r8, r8)
    return;
 80025a2:	e17d      	b.n	80028a0 <HAL_UART_IRQHandler+0x594>
 80025a4:	0000080f 	.word	0x0000080f
 80025a8:	04000120 	.word	0x04000120
 80025ac:	08003119 	.word	0x08003119

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d000      	beq.n	80025ba <HAL_UART_IRQHandler+0x2ae>
 80025b8:	e131      	b.n	800281e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80025ba:	23a4      	movs	r3, #164	; 0xa4
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2210      	movs	r2, #16
 80025c2:	4013      	ands	r3, r2
 80025c4:	d100      	bne.n	80025c8 <HAL_UART_IRQHandler+0x2bc>
 80025c6:	e12a      	b.n	800281e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80025c8:	23a0      	movs	r3, #160	; 0xa0
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2210      	movs	r2, #16
 80025d0:	4013      	ands	r3, r2
 80025d2:	d100      	bne.n	80025d6 <HAL_UART_IRQHandler+0x2ca>
 80025d4:	e123      	b.n	800281e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2210      	movs	r2, #16
 80025dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2240      	movs	r2, #64	; 0x40
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b40      	cmp	r3, #64	; 0x40
 80025ea:	d000      	beq.n	80025ee <HAL_UART_IRQHandler+0x2e2>
 80025ec:	e09b      	b.n	8002726 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	217e      	movs	r1, #126	; 0x7e
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d100      	bne.n	8002606 <HAL_UART_IRQHandler+0x2fa>
 8002604:	e14e      	b.n	80028a4 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2258      	movs	r2, #88	; 0x58
 800260a:	5a9b      	ldrh	r3, [r3, r2]
 800260c:	187a      	adds	r2, r7, r1
 800260e:	8812      	ldrh	r2, [r2, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d300      	bcc.n	8002616 <HAL_UART_IRQHandler+0x30a>
 8002614:	e146      	b.n	80028a4 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	187a      	adds	r2, r7, r1
 800261a:	215a      	movs	r1, #90	; 0x5a
 800261c:	8812      	ldrh	r2, [r2, #0]
 800261e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	2b20      	cmp	r3, #32
 8002628:	d06e      	beq.n	8002708 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800262a:	f3ef 8310 	mrs	r3, PRIMASK
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002632:	67bb      	str	r3, [r7, #120]	; 0x78
 8002634:	2301      	movs	r3, #1
 8002636:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	f383 8810 	msr	PRIMASK, r3
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	499a      	ldr	r1, [pc, #616]	; (80028b4 <HAL_UART_IRQHandler+0x5a8>)
 800264c:	400a      	ands	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002656:	f383 8810 	msr	PRIMASK, r3
}
 800265a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265c:	f3ef 8310 	mrs	r3, PRIMASK
 8002660:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002664:	677b      	str	r3, [r7, #116]	; 0x74
 8002666:	2301      	movs	r3, #1
 8002668:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800266c:	f383 8810 	msr	PRIMASK, r3
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2101      	movs	r1, #1
 800267e:	438a      	bics	r2, r1
 8002680:	609a      	str	r2, [r3, #8]
 8002682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002684:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002688:	f383 8810 	msr	PRIMASK, r3
}
 800268c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800268e:	f3ef 8310 	mrs	r3, PRIMASK
 8002692:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002694:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002696:	673b      	str	r3, [r7, #112]	; 0x70
 8002698:	2301      	movs	r3, #1
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269e:	f383 8810 	msr	PRIMASK, r3
}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2140      	movs	r1, #64	; 0x40
 80026b0:	438a      	bics	r2, r1
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026b6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ba:	f383 8810 	msr	PRIMASK, r3
}
 80026be:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2220      	movs	r2, #32
 80026c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026cc:	f3ef 8310 	mrs	r3, PRIMASK
 80026d0:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026d6:	2301      	movs	r3, #1
 80026d8:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026dc:	f383 8810 	msr	PRIMASK, r3
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2110      	movs	r1, #16
 80026ee:	438a      	bics	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f8:	f383 8810 	msr	PRIMASK, r3
}
 80026fc:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002702:	0018      	movs	r0, r3
 8002704:	f7fe fdbe 	bl	8001284 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2258      	movs	r2, #88	; 0x58
 800270c:	5a9a      	ldrh	r2, [r3, r2]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	215a      	movs	r1, #90	; 0x5a
 8002712:	5a5b      	ldrh	r3, [r3, r1]
 8002714:	b29b      	uxth	r3, r3
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	b29a      	uxth	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f8dc 	bl	80028dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002724:	e0be      	b.n	80028a4 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2258      	movs	r2, #88	; 0x58
 800272a:	5a99      	ldrh	r1, [r3, r2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	225a      	movs	r2, #90	; 0x5a
 8002730:	5a9b      	ldrh	r3, [r3, r2]
 8002732:	b29a      	uxth	r2, r3
 8002734:	208e      	movs	r0, #142	; 0x8e
 8002736:	183b      	adds	r3, r7, r0
 8002738:	1a8a      	subs	r2, r1, r2
 800273a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	225a      	movs	r2, #90	; 0x5a
 8002740:	5a9b      	ldrh	r3, [r3, r2]
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d100      	bne.n	800274a <HAL_UART_IRQHandler+0x43e>
 8002748:	e0ae      	b.n	80028a8 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800274a:	183b      	adds	r3, r7, r0
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d100      	bne.n	8002754 <HAL_UART_IRQHandler+0x448>
 8002752:	e0a9      	b.n	80028a8 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002754:	f3ef 8310 	mrs	r3, PRIMASK
 8002758:	60fb      	str	r3, [r7, #12]
  return(result);
 800275a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800275c:	2488      	movs	r4, #136	; 0x88
 800275e:	193a      	adds	r2, r7, r4
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	2301      	movs	r3, #1
 8002764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f383 8810 	msr	PRIMASK, r3
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	494f      	ldr	r1, [pc, #316]	; (80028b8 <HAL_UART_IRQHandler+0x5ac>)
 800277a:	400a      	ands	r2, r1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	193b      	adds	r3, r7, r4
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f383 8810 	msr	PRIMASK, r3
}
 800278a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800278c:	f3ef 8310 	mrs	r3, PRIMASK
 8002790:	61bb      	str	r3, [r7, #24]
  return(result);
 8002792:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002794:	2484      	movs	r4, #132	; 0x84
 8002796:	193a      	adds	r2, r7, r4
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	2301      	movs	r3, #1
 800279c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f383 8810 	msr	PRIMASK, r3
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	438a      	bics	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	193b      	adds	r3, r7, r4
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027bc:	6a3b      	ldr	r3, [r7, #32]
 80027be:	f383 8810 	msr	PRIMASK, r3
}
 80027c2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2220      	movs	r2, #32
 80027c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d6:	f3ef 8310 	mrs	r3, PRIMASK
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027de:	2480      	movs	r4, #128	; 0x80
 80027e0:	193a      	adds	r2, r7, r4
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	2301      	movs	r3, #1
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	f383 8810 	msr	PRIMASK, r3
}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2110      	movs	r1, #16
 80027fc:	438a      	bics	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	193b      	adds	r3, r7, r4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	f383 8810 	msr	PRIMASK, r3
}
 800280c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800280e:	183b      	adds	r3, r7, r0
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0011      	movs	r1, r2
 8002816:	0018      	movs	r0, r3
 8002818:	f000 f860 	bl	80028dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800281c:	e044      	b.n	80028a8 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800281e:	23a4      	movs	r3, #164	; 0xa4
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	035b      	lsls	r3, r3, #13
 8002828:	4013      	ands	r3, r2
 800282a:	d010      	beq.n	800284e <HAL_UART_IRQHandler+0x542>
 800282c:	239c      	movs	r3, #156	; 0x9c
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	03db      	lsls	r3, r3, #15
 8002836:	4013      	ands	r3, r2
 8002838:	d009      	beq.n	800284e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	0352      	lsls	r2, r2, #13
 8002842:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	0018      	movs	r0, r3
 8002848:	f000 fe10 	bl	800346c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800284c:	e02f      	b.n	80028ae <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800284e:	23a4      	movs	r3, #164	; 0xa4
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2280      	movs	r2, #128	; 0x80
 8002856:	4013      	ands	r3, r2
 8002858:	d00f      	beq.n	800287a <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800285a:	23a0      	movs	r3, #160	; 0xa0
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	4013      	ands	r3, r2
 8002864:	d009      	beq.n	800287a <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01e      	beq.n	80028ac <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	0010      	movs	r0, r2
 8002876:	4798      	blx	r3
    }
    return;
 8002878:	e018      	b.n	80028ac <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800287a:	23a4      	movs	r3, #164	; 0xa4
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2240      	movs	r2, #64	; 0x40
 8002882:	4013      	ands	r3, r2
 8002884:	d013      	beq.n	80028ae <HAL_UART_IRQHandler+0x5a2>
 8002886:	23a0      	movs	r3, #160	; 0xa0
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2240      	movs	r2, #64	; 0x40
 800288e:	4013      	ands	r3, r2
 8002890:	d00d      	beq.n	80028ae <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	0018      	movs	r0, r3
 8002896:	f000 fc56 	bl	8003146 <UART_EndTransmit_IT>
    return;
 800289a:	e008      	b.n	80028ae <HAL_UART_IRQHandler+0x5a2>
      return;
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	e006      	b.n	80028ae <HAL_UART_IRQHandler+0x5a2>
    return;
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	e004      	b.n	80028ae <HAL_UART_IRQHandler+0x5a2>
      return;
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	e002      	b.n	80028ae <HAL_UART_IRQHandler+0x5a2>
      return;
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	e000      	b.n	80028ae <HAL_UART_IRQHandler+0x5a2>
    return;
 80028ac:	46c0      	nop			; (mov r8, r8)
  }

}
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b02b      	add	sp, #172	; 0xac
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	fffffeff 	.word	0xfffffeff
 80028b8:	fffffedf 	.word	0xfffffedf

080028bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80028c4:	46c0      	nop			; (mov r8, r8)
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b002      	add	sp, #8
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	000a      	movs	r2, r1
 80028e6:	1cbb      	adds	r3, r7, #2
 80028e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b002      	add	sp, #8
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028fc:	231e      	movs	r3, #30
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a8d      	ldr	r2, [pc, #564]	; (8002b58 <UART_SetConfig+0x264>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	430a      	orrs	r2, r1
 8002930:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a88      	ldr	r2, [pc, #544]	; (8002b5c <UART_SetConfig+0x268>)
 800293a:	4013      	ands	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a7f      	ldr	r2, [pc, #508]	; (8002b60 <UART_SetConfig+0x26c>)
 8002962:	4013      	ands	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a7b      	ldr	r2, [pc, #492]	; (8002b64 <UART_SetConfig+0x270>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d127      	bne.n	80029ca <UART_SetConfig+0xd6>
 800297a:	4b7b      	ldr	r3, [pc, #492]	; (8002b68 <UART_SetConfig+0x274>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	2203      	movs	r2, #3
 8002980:	4013      	ands	r3, r2
 8002982:	2b03      	cmp	r3, #3
 8002984:	d00d      	beq.n	80029a2 <UART_SetConfig+0xae>
 8002986:	d81b      	bhi.n	80029c0 <UART_SetConfig+0xcc>
 8002988:	2b02      	cmp	r3, #2
 800298a:	d014      	beq.n	80029b6 <UART_SetConfig+0xc2>
 800298c:	d818      	bhi.n	80029c0 <UART_SetConfig+0xcc>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <UART_SetConfig+0xa4>
 8002992:	2b01      	cmp	r3, #1
 8002994:	d00a      	beq.n	80029ac <UART_SetConfig+0xb8>
 8002996:	e013      	b.n	80029c0 <UART_SetConfig+0xcc>
 8002998:	231f      	movs	r3, #31
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
 80029a0:	e021      	b.n	80029e6 <UART_SetConfig+0xf2>
 80029a2:	231f      	movs	r3, #31
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2202      	movs	r2, #2
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e01c      	b.n	80029e6 <UART_SetConfig+0xf2>
 80029ac:	231f      	movs	r3, #31
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2204      	movs	r2, #4
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e017      	b.n	80029e6 <UART_SetConfig+0xf2>
 80029b6:	231f      	movs	r3, #31
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	2208      	movs	r2, #8
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e012      	b.n	80029e6 <UART_SetConfig+0xf2>
 80029c0:	231f      	movs	r3, #31
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	2210      	movs	r2, #16
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e00d      	b.n	80029e6 <UART_SetConfig+0xf2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a67      	ldr	r2, [pc, #412]	; (8002b6c <UART_SetConfig+0x278>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d104      	bne.n	80029de <UART_SetConfig+0xea>
 80029d4:	231f      	movs	r3, #31
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e003      	b.n	80029e6 <UART_SetConfig+0xf2>
 80029de:	231f      	movs	r3, #31
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	2210      	movs	r2, #16
 80029e4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69da      	ldr	r2, [r3, #28]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d15d      	bne.n	8002aae <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80029f2:	231f      	movs	r3, #31
 80029f4:	18fb      	adds	r3, r7, r3
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d015      	beq.n	8002a28 <UART_SetConfig+0x134>
 80029fc:	dc18      	bgt.n	8002a30 <UART_SetConfig+0x13c>
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d00d      	beq.n	8002a1e <UART_SetConfig+0x12a>
 8002a02:	dc15      	bgt.n	8002a30 <UART_SetConfig+0x13c>
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <UART_SetConfig+0x11a>
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d005      	beq.n	8002a18 <UART_SetConfig+0x124>
 8002a0c:	e010      	b.n	8002a30 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a0e:	f7ff fb09 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002a12:	0003      	movs	r3, r0
 8002a14:	61bb      	str	r3, [r7, #24]
        break;
 8002a16:	e012      	b.n	8002a3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a18:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <UART_SetConfig+0x27c>)
 8002a1a:	61bb      	str	r3, [r7, #24]
        break;
 8002a1c:	e00f      	b.n	8002a3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a1e:	f7ff fa77 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8002a22:	0003      	movs	r3, r0
 8002a24:	61bb      	str	r3, [r7, #24]
        break;
 8002a26:	e00a      	b.n	8002a3e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	61bb      	str	r3, [r7, #24]
        break;
 8002a2e:	e006      	b.n	8002a3e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a34:	231e      	movs	r3, #30
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
        break;
 8002a3c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d100      	bne.n	8002a46 <UART_SetConfig+0x152>
 8002a44:	e07b      	b.n	8002b3e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	005a      	lsls	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	085b      	lsrs	r3, r3, #1
 8002a50:	18d2      	adds	r2, r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0019      	movs	r1, r3
 8002a58:	0010      	movs	r0, r2
 8002a5a:	f7fd fb67 	bl	800012c <__udivsi3>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	d91c      	bls.n	8002aa4 <UART_SetConfig+0x1b0>
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	025b      	lsls	r3, r3, #9
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d217      	bcs.n	8002aa4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	200e      	movs	r0, #14
 8002a7a:	183b      	adds	r3, r7, r0
 8002a7c:	210f      	movs	r1, #15
 8002a7e:	438a      	bics	r2, r1
 8002a80:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2207      	movs	r2, #7
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b299      	uxth	r1, r3
 8002a8e:	183b      	adds	r3, r7, r0
 8002a90:	183a      	adds	r2, r7, r0
 8002a92:	8812      	ldrh	r2, [r2, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	183a      	adds	r2, r7, r0
 8002a9e:	8812      	ldrh	r2, [r2, #0]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	e04c      	b.n	8002b3e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa4:	231e      	movs	r3, #30
 8002aa6:	18fb      	adds	r3, r7, r3
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	e047      	b.n	8002b3e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aae:	231f      	movs	r3, #31
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d015      	beq.n	8002ae4 <UART_SetConfig+0x1f0>
 8002ab8:	dc18      	bgt.n	8002aec <UART_SetConfig+0x1f8>
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d00d      	beq.n	8002ada <UART_SetConfig+0x1e6>
 8002abe:	dc15      	bgt.n	8002aec <UART_SetConfig+0x1f8>
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <UART_SetConfig+0x1d6>
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d005      	beq.n	8002ad4 <UART_SetConfig+0x1e0>
 8002ac8:	e010      	b.n	8002aec <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aca:	f7ff faab 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	61bb      	str	r3, [r7, #24]
        break;
 8002ad2:	e012      	b.n	8002afa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <UART_SetConfig+0x27c>)
 8002ad6:	61bb      	str	r3, [r7, #24]
        break;
 8002ad8:	e00f      	b.n	8002afa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ada:	f7ff fa19 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	61bb      	str	r3, [r7, #24]
        break;
 8002ae2:	e00a      	b.n	8002afa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	61bb      	str	r3, [r7, #24]
        break;
 8002aea:	e006      	b.n	8002afa <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002af0:	231e      	movs	r3, #30
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2201      	movs	r2, #1
 8002af6:	701a      	strb	r2, [r3, #0]
        break;
 8002af8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d01e      	beq.n	8002b3e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	085a      	lsrs	r2, r3, #1
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	18d2      	adds	r2, r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	0019      	movs	r1, r3
 8002b10:	0010      	movs	r0, r2
 8002b12:	f7fd fb0b 	bl	800012c <__udivsi3>
 8002b16:	0003      	movs	r3, r0
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b0f      	cmp	r3, #15
 8002b20:	d909      	bls.n	8002b36 <UART_SetConfig+0x242>
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	025b      	lsls	r3, r3, #9
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d204      	bcs.n	8002b36 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	e003      	b.n	8002b3e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002b36:	231e      	movs	r3, #30
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002b4a:	231e      	movs	r3, #30
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	781b      	ldrb	r3, [r3, #0]
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b008      	add	sp, #32
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	efff69f3 	.word	0xefff69f3
 8002b5c:	ffffcfff 	.word	0xffffcfff
 8002b60:	fffff4ff 	.word	0xfffff4ff
 8002b64:	40013800 	.word	0x40013800
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40004400 	.word	0x40004400
 8002b70:	007a1200 	.word	0x007a1200

08002b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2201      	movs	r2, #1
 8002b82:	4013      	ands	r3, r2
 8002b84:	d00b      	beq.n	8002b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <UART_AdvFeatureConfig+0x144>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	0019      	movs	r1, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d00b      	beq.n	8002bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a43      	ldr	r2, [pc, #268]	; (8002cbc <UART_AdvFeatureConfig+0x148>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d00b      	beq.n	8002be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a3b      	ldr	r2, [pc, #236]	; (8002cc0 <UART_AdvFeatureConfig+0x14c>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	2208      	movs	r2, #8
 8002be8:	4013      	ands	r3, r2
 8002bea:	d00b      	beq.n	8002c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4a34      	ldr	r2, [pc, #208]	; (8002cc4 <UART_AdvFeatureConfig+0x150>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2210      	movs	r2, #16
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d00b      	beq.n	8002c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a2c      	ldr	r2, [pc, #176]	; (8002cc8 <UART_AdvFeatureConfig+0x154>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d00b      	beq.n	8002c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <UART_AdvFeatureConfig+0x158>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <UART_AdvFeatureConfig+0x15c>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	035b      	lsls	r3, r3, #13
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d10b      	bne.n	8002c8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <UART_AdvFeatureConfig+0x160>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	0019      	movs	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	4013      	ands	r3, r2
 8002c96:	d00b      	beq.n	8002cb0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a0e      	ldr	r2, [pc, #56]	; (8002cd8 <UART_AdvFeatureConfig+0x164>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	605a      	str	r2, [r3, #4]
  }
}
 8002cb0:	46c0      	nop			; (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	fffdffff 	.word	0xfffdffff
 8002cbc:	fffeffff 	.word	0xfffeffff
 8002cc0:	fffbffff 	.word	0xfffbffff
 8002cc4:	ffff7fff 	.word	0xffff7fff
 8002cc8:	ffffefff 	.word	0xffffefff
 8002ccc:	ffffdfff 	.word	0xffffdfff
 8002cd0:	ffefffff 	.word	0xffefffff
 8002cd4:	ff9fffff 	.word	0xff9fffff
 8002cd8:	fff7ffff 	.word	0xfff7ffff

08002cdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2280      	movs	r2, #128	; 0x80
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cec:	f7fe f9e2 	bl	80010b4 <HAL_GetTick>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d10c      	bne.n	8002d1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	0391      	lsls	r1, r2, #14
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <UART_CheckIdleState+0x8c>)
 8002d0c:	9200      	str	r2, [sp, #0]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f000 f82c 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002d14:	1e03      	subs	r3, r0, #0
 8002d16:	d001      	beq.n	8002d1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e021      	b.n	8002d60 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d10c      	bne.n	8002d44 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	03d1      	lsls	r1, r2, #15
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <UART_CheckIdleState+0x8c>)
 8002d34:	9200      	str	r2, [sp, #0]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f000 f818 	bl	8002d6c <UART_WaitOnFlagUntilTimeout>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d001      	beq.n	8002d44 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e00d      	b.n	8002d60 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2274      	movs	r2, #116	; 0x74
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b004      	add	sp, #16
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	01ffffff 	.word	0x01ffffff

08002d6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b094      	sub	sp, #80	; 0x50
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	1dfb      	adds	r3, r7, #7
 8002d7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d7c:	e0a3      	b.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d80:	3301      	adds	r3, #1
 8002d82:	d100      	bne.n	8002d86 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002d84:	e09f      	b.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe f995 	bl	80010b4 <HAL_GetTick>
 8002d8a:	0002      	movs	r2, r0
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d13d      	bne.n	8002e18 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da4:	647b      	str	r3, [r7, #68]	; 0x44
 8002da6:	2301      	movs	r3, #1
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dac:	f383 8810 	msr	PRIMASK, r3
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	494c      	ldr	r1, [pc, #304]	; (8002ef0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dce:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd6:	643b      	str	r3, [r7, #64]	; 0x40
 8002dd8:	2301      	movs	r3, #1
 8002dda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	f383 8810 	msr	PRIMASK, r3
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2101      	movs	r1, #1
 8002df0:	438a      	bics	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	f383 8810 	msr	PRIMASK, r3
}
 8002dfe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2220      	movs	r2, #32
 8002e0a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2274      	movs	r2, #116	; 0x74
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e067      	b.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	4013      	ands	r3, r2
 8002e22:	d050      	beq.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	401a      	ands	r2, r3
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d146      	bne.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e42:	f3ef 8310 	mrs	r3, PRIMASK
 8002e46:	613b      	str	r3, [r7, #16]
  return(result);
 8002e48:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f383 8810 	msr	PRIMASK, r3
}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4923      	ldr	r1, [pc, #140]	; (8002ef0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f383 8810 	msr	PRIMASK, r3
}
 8002e72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e74:	f3ef 8310 	mrs	r3, PRIMASK
 8002e78:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e7a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e7e:	2301      	movs	r3, #1
 8002e80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	438a      	bics	r2, r1
 8002e98:	609a      	str	r2, [r3, #8]
 8002e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	f383 8810 	msr	PRIMASK, r3
}
 8002ea4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	2120      	movs	r1, #32
 8002eb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2274      	movs	r2, #116	; 0x74
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e010      	b.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	425a      	negs	r2, r3
 8002ed6:	4153      	adcs	r3, r2
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	001a      	movs	r2, r3
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d100      	bne.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8002ee4:	e74b      	b.n	8002d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b014      	add	sp, #80	; 0x50
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	fffffe5f 	.word	0xfffffe5f

08002ef4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	; 0x30
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1dba      	adds	r2, r7, #6
 8002f0c:	2158      	movs	r1, #88	; 0x58
 8002f0e:	8812      	ldrh	r2, [r2, #0]
 8002f10:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1dba      	adds	r2, r7, #6
 8002f16:	215a      	movs	r1, #90	; 0x5a
 8002f18:	8812      	ldrh	r2, [r2, #0]
 8002f1a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	015b      	lsls	r3, r3, #5
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d10d      	bne.n	8002f4a <UART_Start_Receive_IT+0x56>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d104      	bne.n	8002f40 <UART_Start_Receive_IT+0x4c>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	225c      	movs	r2, #92	; 0x5c
 8002f3a:	4943      	ldr	r1, [pc, #268]	; (8003048 <UART_Start_Receive_IT+0x154>)
 8002f3c:	5299      	strh	r1, [r3, r2]
 8002f3e:	e02e      	b.n	8002f9e <UART_Start_Receive_IT+0xaa>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	225c      	movs	r2, #92	; 0x5c
 8002f44:	21ff      	movs	r1, #255	; 0xff
 8002f46:	5299      	strh	r1, [r3, r2]
 8002f48:	e029      	b.n	8002f9e <UART_Start_Receive_IT+0xaa>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <UART_Start_Receive_IT+0x7a>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <UART_Start_Receive_IT+0x70>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	225c      	movs	r2, #92	; 0x5c
 8002f5e:	21ff      	movs	r1, #255	; 0xff
 8002f60:	5299      	strh	r1, [r3, r2]
 8002f62:	e01c      	b.n	8002f9e <UART_Start_Receive_IT+0xaa>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	225c      	movs	r2, #92	; 0x5c
 8002f68:	217f      	movs	r1, #127	; 0x7f
 8002f6a:	5299      	strh	r1, [r3, r2]
 8002f6c:	e017      	b.n	8002f9e <UART_Start_Receive_IT+0xaa>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	055b      	lsls	r3, r3, #21
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d10d      	bne.n	8002f96 <UART_Start_Receive_IT+0xa2>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <UART_Start_Receive_IT+0x98>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	225c      	movs	r2, #92	; 0x5c
 8002f86:	217f      	movs	r1, #127	; 0x7f
 8002f88:	5299      	strh	r1, [r3, r2]
 8002f8a:	e008      	b.n	8002f9e <UART_Start_Receive_IT+0xaa>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	225c      	movs	r2, #92	; 0x5c
 8002f90:	213f      	movs	r1, #63	; 0x3f
 8002f92:	5299      	strh	r1, [r3, r2]
 8002f94:	e003      	b.n	8002f9e <UART_Start_Receive_IT+0xaa>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	225c      	movs	r2, #92	; 0x5c
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2222      	movs	r2, #34	; 0x22
 8002faa:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fac:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fb2:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	f383 8810 	msr	PRIMASK, r3
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2101      	movs	r1, #1
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	f383 8810 	msr	PRIMASK, r3
}
 8002fdc:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	015b      	lsls	r3, r3, #5
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d107      	bne.n	8002ffa <UART_Start_Receive_IT+0x106>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4a15      	ldr	r2, [pc, #84]	; (800304c <UART_Start_Receive_IT+0x158>)
 8002ff6:	665a      	str	r2, [r3, #100]	; 0x64
 8002ff8:	e002      	b.n	8003000 <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <UART_Start_Receive_IT+0x15c>)
 8002ffe:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2274      	movs	r2, #116	; 0x74
 8003004:	2100      	movs	r1, #0
 8003006:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003008:	f3ef 8310 	mrs	r3, PRIMASK
 800300c:	613b      	str	r3, [r7, #16]
  return(result);
 800300e:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003010:	62bb      	str	r3, [r7, #40]	; 0x28
 8003012:	2301      	movs	r3, #1
 8003014:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f383 8810 	msr	PRIMASK, r3
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2190      	movs	r1, #144	; 0x90
 800302a:	0049      	lsls	r1, r1, #1
 800302c:	430a      	orrs	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003032:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f383 8810 	msr	PRIMASK, r3
}
 800303a:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b00c      	add	sp, #48	; 0x30
 8003044:	bd80      	pop	{r7, pc}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	000001ff 	.word	0x000001ff
 800304c:	08003305 	.word	0x08003305
 8003050:	0800319d 	.word	0x0800319d

08003054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08e      	sub	sp, #56	; 0x38
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305c:	f3ef 8310 	mrs	r3, PRIMASK
 8003060:	617b      	str	r3, [r7, #20]
  return(result);
 8003062:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003064:	637b      	str	r3, [r7, #52]	; 0x34
 8003066:	2301      	movs	r3, #1
 8003068:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4925      	ldr	r1, [pc, #148]	; (8003114 <UART_EndRxTransfer+0xc0>)
 800307e:	400a      	ands	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f383 8810 	msr	PRIMASK, r3
}
 800308c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308e:	f3ef 8310 	mrs	r3, PRIMASK
 8003092:	623b      	str	r3, [r7, #32]
  return(result);
 8003094:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
 8003098:	2301      	movs	r3, #1
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f383 8810 	msr	PRIMASK, r3
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	438a      	bics	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	f383 8810 	msr	PRIMASK, r3
}
 80030be:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d118      	bne.n	80030fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030c8:	f3ef 8310 	mrs	r3, PRIMASK
 80030cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80030ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d2:	2301      	movs	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2110      	movs	r1, #16
 80030ea:	438a      	bics	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f383 8810 	msr	PRIMASK, r3
}
 80030f8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b00e      	add	sp, #56	; 0x38
 8003112:	bd80      	pop	{r7, pc}
 8003114:	fffffedf 	.word	0xfffffedf

08003118 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	225a      	movs	r2, #90	; 0x5a
 800312a:	2100      	movs	r1, #0
 800312c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2252      	movs	r2, #82	; 0x52
 8003132:	2100      	movs	r1, #0
 8003134:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	0018      	movs	r0, r3
 800313a:	f7ff fbc7 	bl	80028cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b004      	add	sp, #16
 8003144:	bd80      	pop	{r7, pc}

08003146 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314e:	f3ef 8310 	mrs	r3, PRIMASK
 8003152:	60bb      	str	r3, [r7, #8]
  return(result);
 8003154:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	2301      	movs	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f383 8810 	msr	PRIMASK, r3
}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2140      	movs	r1, #64	; 0x40
 8003170:	438a      	bics	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	0018      	movs	r0, r3
 8003190:	f7ff fb94 	bl	80028bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}

0800319c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b090      	sub	sp, #64	; 0x40
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80031a4:	203e      	movs	r0, #62	; 0x3e
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	215c      	movs	r1, #92	; 0x5c
 80031ac:	5a52      	ldrh	r2, [r2, r1]
 80031ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b4:	2b22      	cmp	r3, #34	; 0x22
 80031b6:	d000      	beq.n	80031ba <UART_RxISR_8BIT+0x1e>
 80031b8:	e095      	b.n	80032e6 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	213c      	movs	r1, #60	; 0x3c
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80031c4:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	183b      	adds	r3, r7, r0
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	b2d9      	uxtb	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	400a      	ands	r2, r1
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	225a      	movs	r2, #90	; 0x5a
 80031ea:	5a9b      	ldrh	r3, [r3, r2]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b299      	uxth	r1, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	225a      	movs	r2, #90	; 0x5a
 80031f6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	225a      	movs	r2, #90	; 0x5a
 80031fc:	5a9b      	ldrh	r3, [r3, r2]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d178      	bne.n	80032f6 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003204:	f3ef 8310 	mrs	r3, PRIMASK
 8003208:	61bb      	str	r3, [r7, #24]
  return(result);
 800320a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320c:	63bb      	str	r3, [r7, #56]	; 0x38
 800320e:	2301      	movs	r3, #1
 8003210:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f383 8810 	msr	PRIMASK, r3
}
 8003218:	46c0      	nop			; (mov r8, r8)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4936      	ldr	r1, [pc, #216]	; (8003300 <UART_RxISR_8BIT+0x164>)
 8003226:	400a      	ands	r2, r1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003236:	f3ef 8310 	mrs	r3, PRIMASK
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
 8003240:	2301      	movs	r3, #1
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	f383 8810 	msr	PRIMASK, r3
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2101      	movs	r1, #1
 8003258:	438a      	bics	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003262:	f383 8810 	msr	PRIMASK, r3
}
 8003266:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	2b01      	cmp	r3, #1
 800327a:	d12f      	bne.n	80032dc <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003282:	f3ef 8310 	mrs	r3, PRIMASK
 8003286:	60fb      	str	r3, [r7, #12]
  return(result);
 8003288:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328a:	633b      	str	r3, [r7, #48]	; 0x30
 800328c:	2301      	movs	r3, #1
 800328e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f383 8810 	msr	PRIMASK, r3
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2110      	movs	r1, #16
 80032a4:	438a      	bics	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f383 8810 	msr	PRIMASK, r3
}
 80032b2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	2210      	movs	r2, #16
 80032bc:	4013      	ands	r3, r2
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d103      	bne.n	80032ca <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2210      	movs	r2, #16
 80032c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2258      	movs	r2, #88	; 0x58
 80032ce:	5a9a      	ldrh	r2, [r3, r2]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	0011      	movs	r1, r2
 80032d4:	0018      	movs	r0, r3
 80032d6:	f7ff fb01 	bl	80028dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80032da:	e00c      	b.n	80032f6 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	0018      	movs	r0, r3
 80032e0:	f7fd fc98 	bl	8000c14 <HAL_UART_RxCpltCallback>
}
 80032e4:	e007      	b.n	80032f6 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2108      	movs	r1, #8
 80032f2:	430a      	orrs	r2, r1
 80032f4:	619a      	str	r2, [r3, #24]
}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	46bd      	mov	sp, r7
 80032fa:	b010      	add	sp, #64	; 0x40
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	fffffedf 	.word	0xfffffedf

08003304 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b090      	sub	sp, #64	; 0x40
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800330c:	203e      	movs	r0, #62	; 0x3e
 800330e:	183b      	adds	r3, r7, r0
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	215c      	movs	r1, #92	; 0x5c
 8003314:	5a52      	ldrh	r2, [r2, r1]
 8003316:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800331c:	2b22      	cmp	r3, #34	; 0x22
 800331e:	d000      	beq.n	8003322 <UART_RxISR_16BIT+0x1e>
 8003320:	e095      	b.n	800344e <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	213c      	movs	r1, #60	; 0x3c
 8003328:	187b      	adds	r3, r7, r1
 800332a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800332c:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8003334:	187b      	adds	r3, r7, r1
 8003336:	183a      	adds	r2, r7, r0
 8003338:	881b      	ldrh	r3, [r3, #0]
 800333a:	8812      	ldrh	r2, [r2, #0]
 800333c:	4013      	ands	r3, r2
 800333e:	b29a      	uxth	r2, r3
 8003340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003342:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003348:	1c9a      	adds	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	225a      	movs	r2, #90	; 0x5a
 8003352:	5a9b      	ldrh	r3, [r3, r2]
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b299      	uxth	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	225a      	movs	r2, #90	; 0x5a
 800335e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	225a      	movs	r2, #90	; 0x5a
 8003364:	5a9b      	ldrh	r3, [r3, r2]
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d178      	bne.n	800345e <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336c:	f3ef 8310 	mrs	r3, PRIMASK
 8003370:	617b      	str	r3, [r7, #20]
  return(result);
 8003372:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
 8003376:	2301      	movs	r3, #1
 8003378:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4936      	ldr	r1, [pc, #216]	; (8003468 <UART_RxISR_16BIT+0x164>)
 800338e:	400a      	ands	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339e:	f3ef 8310 	mrs	r3, PRIMASK
 80033a2:	623b      	str	r3, [r7, #32]
  return(result);
 80033a4:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
 80033a8:	2301      	movs	r3, #1
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d12f      	bne.n	8003444 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033ea:	f3ef 8310 	mrs	r3, PRIMASK
 80033ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80033f0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033f4:	2301      	movs	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f383 8810 	msr	PRIMASK, r3
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2110      	movs	r1, #16
 800340c:	438a      	bics	r2, r1
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f383 8810 	msr	PRIMASK, r3
}
 800341a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	2210      	movs	r2, #16
 8003424:	4013      	ands	r3, r2
 8003426:	2b10      	cmp	r3, #16
 8003428:	d103      	bne.n	8003432 <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2210      	movs	r2, #16
 8003430:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2258      	movs	r2, #88	; 0x58
 8003436:	5a9a      	ldrh	r2, [r3, r2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	0011      	movs	r1, r2
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff fa4d 	bl	80028dc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003442:	e00c      	b.n	800345e <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	0018      	movs	r0, r3
 8003448:	f7fd fbe4 	bl	8000c14 <HAL_UART_RxCpltCallback>
}
 800344c:	e007      	b.n	800345e <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699a      	ldr	r2, [r3, #24]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2108      	movs	r1, #8
 800345a:	430a      	orrs	r2, r1
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b010      	add	sp, #64	; 0x40
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	fffffedf 	.word	0xfffffedf

0800346c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <__errno>:
 800347c:	4b01      	ldr	r3, [pc, #4]	; (8003484 <__errno+0x8>)
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	4770      	bx	lr
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	20000010 	.word	0x20000010

08003488 <__libc_init_array>:
 8003488:	b570      	push	{r4, r5, r6, lr}
 800348a:	2600      	movs	r6, #0
 800348c:	4d0c      	ldr	r5, [pc, #48]	; (80034c0 <__libc_init_array+0x38>)
 800348e:	4c0d      	ldr	r4, [pc, #52]	; (80034c4 <__libc_init_array+0x3c>)
 8003490:	1b64      	subs	r4, r4, r5
 8003492:	10a4      	asrs	r4, r4, #2
 8003494:	42a6      	cmp	r6, r4
 8003496:	d109      	bne.n	80034ac <__libc_init_array+0x24>
 8003498:	2600      	movs	r6, #0
 800349a:	f001 f857 	bl	800454c <_init>
 800349e:	4d0a      	ldr	r5, [pc, #40]	; (80034c8 <__libc_init_array+0x40>)
 80034a0:	4c0a      	ldr	r4, [pc, #40]	; (80034cc <__libc_init_array+0x44>)
 80034a2:	1b64      	subs	r4, r4, r5
 80034a4:	10a4      	asrs	r4, r4, #2
 80034a6:	42a6      	cmp	r6, r4
 80034a8:	d105      	bne.n	80034b6 <__libc_init_array+0x2e>
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	00b3      	lsls	r3, r6, #2
 80034ae:	58eb      	ldr	r3, [r5, r3]
 80034b0:	4798      	blx	r3
 80034b2:	3601      	adds	r6, #1
 80034b4:	e7ee      	b.n	8003494 <__libc_init_array+0xc>
 80034b6:	00b3      	lsls	r3, r6, #2
 80034b8:	58eb      	ldr	r3, [r5, r3]
 80034ba:	4798      	blx	r3
 80034bc:	3601      	adds	r6, #1
 80034be:	e7f2      	b.n	80034a6 <__libc_init_array+0x1e>
 80034c0:	08004800 	.word	0x08004800
 80034c4:	08004800 	.word	0x08004800
 80034c8:	08004800 	.word	0x08004800
 80034cc:	08004804 	.word	0x08004804

080034d0 <memcpy>:
 80034d0:	2300      	movs	r3, #0
 80034d2:	b510      	push	{r4, lr}
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d100      	bne.n	80034da <memcpy+0xa>
 80034d8:	bd10      	pop	{r4, pc}
 80034da:	5ccc      	ldrb	r4, [r1, r3]
 80034dc:	54c4      	strb	r4, [r0, r3]
 80034de:	3301      	adds	r3, #1
 80034e0:	e7f8      	b.n	80034d4 <memcpy+0x4>

080034e2 <memset>:
 80034e2:	0003      	movs	r3, r0
 80034e4:	1882      	adds	r2, r0, r2
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d100      	bne.n	80034ec <memset+0xa>
 80034ea:	4770      	bx	lr
 80034ec:	7019      	strb	r1, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	e7f9      	b.n	80034e6 <memset+0x4>
	...

080034f4 <_free_r>:
 80034f4:	b570      	push	{r4, r5, r6, lr}
 80034f6:	0005      	movs	r5, r0
 80034f8:	2900      	cmp	r1, #0
 80034fa:	d010      	beq.n	800351e <_free_r+0x2a>
 80034fc:	1f0c      	subs	r4, r1, #4
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da00      	bge.n	8003506 <_free_r+0x12>
 8003504:	18e4      	adds	r4, r4, r3
 8003506:	0028      	movs	r0, r5
 8003508:	f000 fc62 	bl	8003dd0 <__malloc_lock>
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <_free_r+0x90>)
 800350e:	6813      	ldr	r3, [r2, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <_free_r+0x2c>
 8003514:	6063      	str	r3, [r4, #4]
 8003516:	6014      	str	r4, [r2, #0]
 8003518:	0028      	movs	r0, r5
 800351a:	f000 fc61 	bl	8003de0 <__malloc_unlock>
 800351e:	bd70      	pop	{r4, r5, r6, pc}
 8003520:	42a3      	cmp	r3, r4
 8003522:	d908      	bls.n	8003536 <_free_r+0x42>
 8003524:	6821      	ldr	r1, [r4, #0]
 8003526:	1860      	adds	r0, r4, r1
 8003528:	4283      	cmp	r3, r0
 800352a:	d1f3      	bne.n	8003514 <_free_r+0x20>
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	1841      	adds	r1, r0, r1
 8003532:	6021      	str	r1, [r4, #0]
 8003534:	e7ee      	b.n	8003514 <_free_r+0x20>
 8003536:	001a      	movs	r2, r3
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <_free_r+0x4e>
 800353e:	42a3      	cmp	r3, r4
 8003540:	d9f9      	bls.n	8003536 <_free_r+0x42>
 8003542:	6811      	ldr	r1, [r2, #0]
 8003544:	1850      	adds	r0, r2, r1
 8003546:	42a0      	cmp	r0, r4
 8003548:	d10b      	bne.n	8003562 <_free_r+0x6e>
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	1809      	adds	r1, r1, r0
 800354e:	1850      	adds	r0, r2, r1
 8003550:	6011      	str	r1, [r2, #0]
 8003552:	4283      	cmp	r3, r0
 8003554:	d1e0      	bne.n	8003518 <_free_r+0x24>
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	1841      	adds	r1, r0, r1
 800355c:	6011      	str	r1, [r2, #0]
 800355e:	6053      	str	r3, [r2, #4]
 8003560:	e7da      	b.n	8003518 <_free_r+0x24>
 8003562:	42a0      	cmp	r0, r4
 8003564:	d902      	bls.n	800356c <_free_r+0x78>
 8003566:	230c      	movs	r3, #12
 8003568:	602b      	str	r3, [r5, #0]
 800356a:	e7d5      	b.n	8003518 <_free_r+0x24>
 800356c:	6821      	ldr	r1, [r4, #0]
 800356e:	1860      	adds	r0, r4, r1
 8003570:	4283      	cmp	r3, r0
 8003572:	d103      	bne.n	800357c <_free_r+0x88>
 8003574:	6818      	ldr	r0, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	1841      	adds	r1, r0, r1
 800357a:	6021      	str	r1, [r4, #0]
 800357c:	6063      	str	r3, [r4, #4]
 800357e:	6054      	str	r4, [r2, #4]
 8003580:	e7ca      	b.n	8003518 <_free_r+0x24>
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	20000098 	.word	0x20000098

08003588 <_malloc_r>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	2303      	movs	r3, #3
 800358c:	1ccd      	adds	r5, r1, #3
 800358e:	439d      	bics	r5, r3
 8003590:	3508      	adds	r5, #8
 8003592:	0006      	movs	r6, r0
 8003594:	2d0c      	cmp	r5, #12
 8003596:	d21f      	bcs.n	80035d8 <_malloc_r+0x50>
 8003598:	250c      	movs	r5, #12
 800359a:	42a9      	cmp	r1, r5
 800359c:	d81e      	bhi.n	80035dc <_malloc_r+0x54>
 800359e:	0030      	movs	r0, r6
 80035a0:	f000 fc16 	bl	8003dd0 <__malloc_lock>
 80035a4:	4925      	ldr	r1, [pc, #148]	; (800363c <_malloc_r+0xb4>)
 80035a6:	680a      	ldr	r2, [r1, #0]
 80035a8:	0014      	movs	r4, r2
 80035aa:	2c00      	cmp	r4, #0
 80035ac:	d11a      	bne.n	80035e4 <_malloc_r+0x5c>
 80035ae:	4f24      	ldr	r7, [pc, #144]	; (8003640 <_malloc_r+0xb8>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d104      	bne.n	80035c0 <_malloc_r+0x38>
 80035b6:	0021      	movs	r1, r4
 80035b8:	0030      	movs	r0, r6
 80035ba:	f000 f8d9 	bl	8003770 <_sbrk_r>
 80035be:	6038      	str	r0, [r7, #0]
 80035c0:	0029      	movs	r1, r5
 80035c2:	0030      	movs	r0, r6
 80035c4:	f000 f8d4 	bl	8003770 <_sbrk_r>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	d12b      	bne.n	8003624 <_malloc_r+0x9c>
 80035cc:	230c      	movs	r3, #12
 80035ce:	0030      	movs	r0, r6
 80035d0:	6033      	str	r3, [r6, #0]
 80035d2:	f000 fc05 	bl	8003de0 <__malloc_unlock>
 80035d6:	e003      	b.n	80035e0 <_malloc_r+0x58>
 80035d8:	2d00      	cmp	r5, #0
 80035da:	dade      	bge.n	800359a <_malloc_r+0x12>
 80035dc:	230c      	movs	r3, #12
 80035de:	6033      	str	r3, [r6, #0]
 80035e0:	2000      	movs	r0, #0
 80035e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	1b5b      	subs	r3, r3, r5
 80035e8:	d419      	bmi.n	800361e <_malloc_r+0x96>
 80035ea:	2b0b      	cmp	r3, #11
 80035ec:	d903      	bls.n	80035f6 <_malloc_r+0x6e>
 80035ee:	6023      	str	r3, [r4, #0]
 80035f0:	18e4      	adds	r4, r4, r3
 80035f2:	6025      	str	r5, [r4, #0]
 80035f4:	e003      	b.n	80035fe <_malloc_r+0x76>
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	42a2      	cmp	r2, r4
 80035fa:	d10e      	bne.n	800361a <_malloc_r+0x92>
 80035fc:	600b      	str	r3, [r1, #0]
 80035fe:	0030      	movs	r0, r6
 8003600:	f000 fbee 	bl	8003de0 <__malloc_unlock>
 8003604:	0020      	movs	r0, r4
 8003606:	2207      	movs	r2, #7
 8003608:	300b      	adds	r0, #11
 800360a:	1d23      	adds	r3, r4, #4
 800360c:	4390      	bics	r0, r2
 800360e:	1ac2      	subs	r2, r0, r3
 8003610:	4298      	cmp	r0, r3
 8003612:	d0e6      	beq.n	80035e2 <_malloc_r+0x5a>
 8003614:	1a1b      	subs	r3, r3, r0
 8003616:	50a3      	str	r3, [r4, r2]
 8003618:	e7e3      	b.n	80035e2 <_malloc_r+0x5a>
 800361a:	6053      	str	r3, [r2, #4]
 800361c:	e7ef      	b.n	80035fe <_malloc_r+0x76>
 800361e:	0022      	movs	r2, r4
 8003620:	6864      	ldr	r4, [r4, #4]
 8003622:	e7c2      	b.n	80035aa <_malloc_r+0x22>
 8003624:	2303      	movs	r3, #3
 8003626:	1cc4      	adds	r4, r0, #3
 8003628:	439c      	bics	r4, r3
 800362a:	42a0      	cmp	r0, r4
 800362c:	d0e1      	beq.n	80035f2 <_malloc_r+0x6a>
 800362e:	1a21      	subs	r1, r4, r0
 8003630:	0030      	movs	r0, r6
 8003632:	f000 f89d 	bl	8003770 <_sbrk_r>
 8003636:	1c43      	adds	r3, r0, #1
 8003638:	d1db      	bne.n	80035f2 <_malloc_r+0x6a>
 800363a:	e7c7      	b.n	80035cc <_malloc_r+0x44>
 800363c:	20000098 	.word	0x20000098
 8003640:	2000009c 	.word	0x2000009c

08003644 <iprintf>:
 8003644:	b40f      	push	{r0, r1, r2, r3}
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <iprintf+0x30>)
 8003648:	b513      	push	{r0, r1, r4, lr}
 800364a:	681c      	ldr	r4, [r3, #0]
 800364c:	2c00      	cmp	r4, #0
 800364e:	d005      	beq.n	800365c <iprintf+0x18>
 8003650:	69a3      	ldr	r3, [r4, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <iprintf+0x18>
 8003656:	0020      	movs	r0, r4
 8003658:	f000 faaa 	bl	8003bb0 <__sinit>
 800365c:	ab05      	add	r3, sp, #20
 800365e:	0020      	movs	r0, r4
 8003660:	9a04      	ldr	r2, [sp, #16]
 8003662:	68a1      	ldr	r1, [r4, #8]
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	f000 fbeb 	bl	8003e40 <_vfiprintf_r>
 800366a:	bc16      	pop	{r1, r2, r4}
 800366c:	bc08      	pop	{r3}
 800366e:	b004      	add	sp, #16
 8003670:	4718      	bx	r3
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	20000010 	.word	0x20000010

08003678 <_puts_r>:
 8003678:	b570      	push	{r4, r5, r6, lr}
 800367a:	0005      	movs	r5, r0
 800367c:	000e      	movs	r6, r1
 800367e:	2800      	cmp	r0, #0
 8003680:	d004      	beq.n	800368c <_puts_r+0x14>
 8003682:	6983      	ldr	r3, [r0, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <_puts_r+0x14>
 8003688:	f000 fa92 	bl	8003bb0 <__sinit>
 800368c:	69ab      	ldr	r3, [r5, #24]
 800368e:	68ac      	ldr	r4, [r5, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <_puts_r+0x22>
 8003694:	0028      	movs	r0, r5
 8003696:	f000 fa8b 	bl	8003bb0 <__sinit>
 800369a:	4b2d      	ldr	r3, [pc, #180]	; (8003750 <_puts_r+0xd8>)
 800369c:	429c      	cmp	r4, r3
 800369e:	d122      	bne.n	80036e6 <_puts_r+0x6e>
 80036a0:	686c      	ldr	r4, [r5, #4]
 80036a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a4:	07db      	lsls	r3, r3, #31
 80036a6:	d405      	bmi.n	80036b4 <_puts_r+0x3c>
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	059b      	lsls	r3, r3, #22
 80036ac:	d402      	bmi.n	80036b4 <_puts_r+0x3c>
 80036ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b0:	f000 fb1f 	bl	8003cf2 <__retarget_lock_acquire_recursive>
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	071b      	lsls	r3, r3, #28
 80036b8:	d502      	bpl.n	80036c0 <_puts_r+0x48>
 80036ba:	6923      	ldr	r3, [r4, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d129      	bne.n	8003714 <_puts_r+0x9c>
 80036c0:	0021      	movs	r1, r4
 80036c2:	0028      	movs	r0, r5
 80036c4:	f000 f8ce 	bl	8003864 <__swsetup_r>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d023      	beq.n	8003714 <_puts_r+0x9c>
 80036cc:	2501      	movs	r5, #1
 80036ce:	426d      	negs	r5, r5
 80036d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036d2:	07db      	lsls	r3, r3, #31
 80036d4:	d405      	bmi.n	80036e2 <_puts_r+0x6a>
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	059b      	lsls	r3, r3, #22
 80036da:	d402      	bmi.n	80036e2 <_puts_r+0x6a>
 80036dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036de:	f000 fb09 	bl	8003cf4 <__retarget_lock_release_recursive>
 80036e2:	0028      	movs	r0, r5
 80036e4:	bd70      	pop	{r4, r5, r6, pc}
 80036e6:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <_puts_r+0xdc>)
 80036e8:	429c      	cmp	r4, r3
 80036ea:	d101      	bne.n	80036f0 <_puts_r+0x78>
 80036ec:	68ac      	ldr	r4, [r5, #8]
 80036ee:	e7d8      	b.n	80036a2 <_puts_r+0x2a>
 80036f0:	4b19      	ldr	r3, [pc, #100]	; (8003758 <_puts_r+0xe0>)
 80036f2:	429c      	cmp	r4, r3
 80036f4:	d1d5      	bne.n	80036a2 <_puts_r+0x2a>
 80036f6:	68ec      	ldr	r4, [r5, #12]
 80036f8:	e7d3      	b.n	80036a2 <_puts_r+0x2a>
 80036fa:	3601      	adds	r6, #1
 80036fc:	60a3      	str	r3, [r4, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da04      	bge.n	800370c <_puts_r+0x94>
 8003702:	69a2      	ldr	r2, [r4, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	dc16      	bgt.n	8003736 <_puts_r+0xbe>
 8003708:	290a      	cmp	r1, #10
 800370a:	d014      	beq.n	8003736 <_puts_r+0xbe>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	6022      	str	r2, [r4, #0]
 8003712:	7019      	strb	r1, [r3, #0]
 8003714:	68a3      	ldr	r3, [r4, #8]
 8003716:	7831      	ldrb	r1, [r6, #0]
 8003718:	3b01      	subs	r3, #1
 800371a:	2900      	cmp	r1, #0
 800371c:	d1ed      	bne.n	80036fa <_puts_r+0x82>
 800371e:	60a3      	str	r3, [r4, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	da0f      	bge.n	8003744 <_puts_r+0xcc>
 8003724:	0028      	movs	r0, r5
 8003726:	0022      	movs	r2, r4
 8003728:	310a      	adds	r1, #10
 800372a:	f000 f845 	bl	80037b8 <__swbuf_r>
 800372e:	250a      	movs	r5, #10
 8003730:	1c43      	adds	r3, r0, #1
 8003732:	d1cd      	bne.n	80036d0 <_puts_r+0x58>
 8003734:	e7ca      	b.n	80036cc <_puts_r+0x54>
 8003736:	0022      	movs	r2, r4
 8003738:	0028      	movs	r0, r5
 800373a:	f000 f83d 	bl	80037b8 <__swbuf_r>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	d1e8      	bne.n	8003714 <_puts_r+0x9c>
 8003742:	e7c3      	b.n	80036cc <_puts_r+0x54>
 8003744:	250a      	movs	r5, #10
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	6022      	str	r2, [r4, #0]
 800374c:	701d      	strb	r5, [r3, #0]
 800374e:	e7bf      	b.n	80036d0 <_puts_r+0x58>
 8003750:	0800478c 	.word	0x0800478c
 8003754:	080047ac 	.word	0x080047ac
 8003758:	0800476c 	.word	0x0800476c

0800375c <puts>:
 800375c:	b510      	push	{r4, lr}
 800375e:	4b03      	ldr	r3, [pc, #12]	; (800376c <puts+0x10>)
 8003760:	0001      	movs	r1, r0
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	f7ff ff88 	bl	8003678 <_puts_r>
 8003768:	bd10      	pop	{r4, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	20000010 	.word	0x20000010

08003770 <_sbrk_r>:
 8003770:	2300      	movs	r3, #0
 8003772:	b570      	push	{r4, r5, r6, lr}
 8003774:	4d06      	ldr	r5, [pc, #24]	; (8003790 <_sbrk_r+0x20>)
 8003776:	0004      	movs	r4, r0
 8003778:	0008      	movs	r0, r1
 800377a:	602b      	str	r3, [r5, #0]
 800377c:	f7fd fb3c 	bl	8000df8 <_sbrk>
 8003780:	1c43      	adds	r3, r0, #1
 8003782:	d103      	bne.n	800378c <_sbrk_r+0x1c>
 8003784:	682b      	ldr	r3, [r5, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d000      	beq.n	800378c <_sbrk_r+0x1c>
 800378a:	6023      	str	r3, [r4, #0]
 800378c:	bd70      	pop	{r4, r5, r6, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	20000338 	.word	0x20000338

08003794 <strncmp>:
 8003794:	b530      	push	{r4, r5, lr}
 8003796:	0005      	movs	r5, r0
 8003798:	1e10      	subs	r0, r2, #0
 800379a:	d00b      	beq.n	80037b4 <strncmp+0x20>
 800379c:	2400      	movs	r4, #0
 800379e:	3a01      	subs	r2, #1
 80037a0:	5d2b      	ldrb	r3, [r5, r4]
 80037a2:	5d08      	ldrb	r0, [r1, r4]
 80037a4:	4283      	cmp	r3, r0
 80037a6:	d104      	bne.n	80037b2 <strncmp+0x1e>
 80037a8:	4294      	cmp	r4, r2
 80037aa:	d002      	beq.n	80037b2 <strncmp+0x1e>
 80037ac:	3401      	adds	r4, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f6      	bne.n	80037a0 <strncmp+0xc>
 80037b2:	1a18      	subs	r0, r3, r0
 80037b4:	bd30      	pop	{r4, r5, pc}
	...

080037b8 <__swbuf_r>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	0005      	movs	r5, r0
 80037bc:	000e      	movs	r6, r1
 80037be:	0014      	movs	r4, r2
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d004      	beq.n	80037ce <__swbuf_r+0x16>
 80037c4:	6983      	ldr	r3, [r0, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <__swbuf_r+0x16>
 80037ca:	f000 f9f1 	bl	8003bb0 <__sinit>
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <__swbuf_r+0xa0>)
 80037d0:	429c      	cmp	r4, r3
 80037d2:	d12e      	bne.n	8003832 <__swbuf_r+0x7a>
 80037d4:	686c      	ldr	r4, [r5, #4]
 80037d6:	69a3      	ldr	r3, [r4, #24]
 80037d8:	60a3      	str	r3, [r4, #8]
 80037da:	89a3      	ldrh	r3, [r4, #12]
 80037dc:	071b      	lsls	r3, r3, #28
 80037de:	d532      	bpl.n	8003846 <__swbuf_r+0x8e>
 80037e0:	6923      	ldr	r3, [r4, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d02f      	beq.n	8003846 <__swbuf_r+0x8e>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	6922      	ldr	r2, [r4, #16]
 80037ea:	b2f7      	uxtb	r7, r6
 80037ec:	1a98      	subs	r0, r3, r2
 80037ee:	6963      	ldr	r3, [r4, #20]
 80037f0:	b2f6      	uxtb	r6, r6
 80037f2:	4283      	cmp	r3, r0
 80037f4:	dc05      	bgt.n	8003802 <__swbuf_r+0x4a>
 80037f6:	0021      	movs	r1, r4
 80037f8:	0028      	movs	r0, r5
 80037fa:	f000 f937 	bl	8003a6c <_fflush_r>
 80037fe:	2800      	cmp	r0, #0
 8003800:	d127      	bne.n	8003852 <__swbuf_r+0x9a>
 8003802:	68a3      	ldr	r3, [r4, #8]
 8003804:	3001      	adds	r0, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	60a3      	str	r3, [r4, #8]
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	6022      	str	r2, [r4, #0]
 8003810:	701f      	strb	r7, [r3, #0]
 8003812:	6963      	ldr	r3, [r4, #20]
 8003814:	4283      	cmp	r3, r0
 8003816:	d004      	beq.n	8003822 <__swbuf_r+0x6a>
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	07db      	lsls	r3, r3, #31
 800381c:	d507      	bpl.n	800382e <__swbuf_r+0x76>
 800381e:	2e0a      	cmp	r6, #10
 8003820:	d105      	bne.n	800382e <__swbuf_r+0x76>
 8003822:	0021      	movs	r1, r4
 8003824:	0028      	movs	r0, r5
 8003826:	f000 f921 	bl	8003a6c <_fflush_r>
 800382a:	2800      	cmp	r0, #0
 800382c:	d111      	bne.n	8003852 <__swbuf_r+0x9a>
 800382e:	0030      	movs	r0, r6
 8003830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <__swbuf_r+0xa4>)
 8003834:	429c      	cmp	r4, r3
 8003836:	d101      	bne.n	800383c <__swbuf_r+0x84>
 8003838:	68ac      	ldr	r4, [r5, #8]
 800383a:	e7cc      	b.n	80037d6 <__swbuf_r+0x1e>
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <__swbuf_r+0xa8>)
 800383e:	429c      	cmp	r4, r3
 8003840:	d1c9      	bne.n	80037d6 <__swbuf_r+0x1e>
 8003842:	68ec      	ldr	r4, [r5, #12]
 8003844:	e7c7      	b.n	80037d6 <__swbuf_r+0x1e>
 8003846:	0021      	movs	r1, r4
 8003848:	0028      	movs	r0, r5
 800384a:	f000 f80b 	bl	8003864 <__swsetup_r>
 800384e:	2800      	cmp	r0, #0
 8003850:	d0c9      	beq.n	80037e6 <__swbuf_r+0x2e>
 8003852:	2601      	movs	r6, #1
 8003854:	4276      	negs	r6, r6
 8003856:	e7ea      	b.n	800382e <__swbuf_r+0x76>
 8003858:	0800478c 	.word	0x0800478c
 800385c:	080047ac 	.word	0x080047ac
 8003860:	0800476c 	.word	0x0800476c

08003864 <__swsetup_r>:
 8003864:	4b37      	ldr	r3, [pc, #220]	; (8003944 <__swsetup_r+0xe0>)
 8003866:	b570      	push	{r4, r5, r6, lr}
 8003868:	681d      	ldr	r5, [r3, #0]
 800386a:	0006      	movs	r6, r0
 800386c:	000c      	movs	r4, r1
 800386e:	2d00      	cmp	r5, #0
 8003870:	d005      	beq.n	800387e <__swsetup_r+0x1a>
 8003872:	69ab      	ldr	r3, [r5, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <__swsetup_r+0x1a>
 8003878:	0028      	movs	r0, r5
 800387a:	f000 f999 	bl	8003bb0 <__sinit>
 800387e:	4b32      	ldr	r3, [pc, #200]	; (8003948 <__swsetup_r+0xe4>)
 8003880:	429c      	cmp	r4, r3
 8003882:	d10f      	bne.n	80038a4 <__swsetup_r+0x40>
 8003884:	686c      	ldr	r4, [r5, #4]
 8003886:	230c      	movs	r3, #12
 8003888:	5ee2      	ldrsh	r2, [r4, r3]
 800388a:	b293      	uxth	r3, r2
 800388c:	0711      	lsls	r1, r2, #28
 800388e:	d42d      	bmi.n	80038ec <__swsetup_r+0x88>
 8003890:	06d9      	lsls	r1, r3, #27
 8003892:	d411      	bmi.n	80038b8 <__swsetup_r+0x54>
 8003894:	2309      	movs	r3, #9
 8003896:	2001      	movs	r0, #1
 8003898:	6033      	str	r3, [r6, #0]
 800389a:	3337      	adds	r3, #55	; 0x37
 800389c:	4313      	orrs	r3, r2
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	4240      	negs	r0, r0
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	4b29      	ldr	r3, [pc, #164]	; (800394c <__swsetup_r+0xe8>)
 80038a6:	429c      	cmp	r4, r3
 80038a8:	d101      	bne.n	80038ae <__swsetup_r+0x4a>
 80038aa:	68ac      	ldr	r4, [r5, #8]
 80038ac:	e7eb      	b.n	8003886 <__swsetup_r+0x22>
 80038ae:	4b28      	ldr	r3, [pc, #160]	; (8003950 <__swsetup_r+0xec>)
 80038b0:	429c      	cmp	r4, r3
 80038b2:	d1e8      	bne.n	8003886 <__swsetup_r+0x22>
 80038b4:	68ec      	ldr	r4, [r5, #12]
 80038b6:	e7e6      	b.n	8003886 <__swsetup_r+0x22>
 80038b8:	075b      	lsls	r3, r3, #29
 80038ba:	d513      	bpl.n	80038e4 <__swsetup_r+0x80>
 80038bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038be:	2900      	cmp	r1, #0
 80038c0:	d008      	beq.n	80038d4 <__swsetup_r+0x70>
 80038c2:	0023      	movs	r3, r4
 80038c4:	3344      	adds	r3, #68	; 0x44
 80038c6:	4299      	cmp	r1, r3
 80038c8:	d002      	beq.n	80038d0 <__swsetup_r+0x6c>
 80038ca:	0030      	movs	r0, r6
 80038cc:	f7ff fe12 	bl	80034f4 <_free_r>
 80038d0:	2300      	movs	r3, #0
 80038d2:	6363      	str	r3, [r4, #52]	; 0x34
 80038d4:	2224      	movs	r2, #36	; 0x24
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	4393      	bics	r3, r2
 80038da:	81a3      	strh	r3, [r4, #12]
 80038dc:	2300      	movs	r3, #0
 80038de:	6063      	str	r3, [r4, #4]
 80038e0:	6923      	ldr	r3, [r4, #16]
 80038e2:	6023      	str	r3, [r4, #0]
 80038e4:	2308      	movs	r3, #8
 80038e6:	89a2      	ldrh	r2, [r4, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	81a3      	strh	r3, [r4, #12]
 80038ec:	6923      	ldr	r3, [r4, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10b      	bne.n	800390a <__swsetup_r+0xa6>
 80038f2:	21a0      	movs	r1, #160	; 0xa0
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	89a3      	ldrh	r3, [r4, #12]
 80038f8:	0089      	lsls	r1, r1, #2
 80038fa:	0092      	lsls	r2, r2, #2
 80038fc:	400b      	ands	r3, r1
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <__swsetup_r+0xa6>
 8003902:	0021      	movs	r1, r4
 8003904:	0030      	movs	r0, r6
 8003906:	f000 fa1f 	bl	8003d48 <__smakebuf_r>
 800390a:	220c      	movs	r2, #12
 800390c:	5ea3      	ldrsh	r3, [r4, r2]
 800390e:	2001      	movs	r0, #1
 8003910:	001a      	movs	r2, r3
 8003912:	b299      	uxth	r1, r3
 8003914:	4002      	ands	r2, r0
 8003916:	4203      	tst	r3, r0
 8003918:	d00f      	beq.n	800393a <__swsetup_r+0xd6>
 800391a:	2200      	movs	r2, #0
 800391c:	60a2      	str	r2, [r4, #8]
 800391e:	6962      	ldr	r2, [r4, #20]
 8003920:	4252      	negs	r2, r2
 8003922:	61a2      	str	r2, [r4, #24]
 8003924:	2000      	movs	r0, #0
 8003926:	6922      	ldr	r2, [r4, #16]
 8003928:	4282      	cmp	r2, r0
 800392a:	d1ba      	bne.n	80038a2 <__swsetup_r+0x3e>
 800392c:	060a      	lsls	r2, r1, #24
 800392e:	d5b8      	bpl.n	80038a2 <__swsetup_r+0x3e>
 8003930:	2240      	movs	r2, #64	; 0x40
 8003932:	4313      	orrs	r3, r2
 8003934:	81a3      	strh	r3, [r4, #12]
 8003936:	3801      	subs	r0, #1
 8003938:	e7b3      	b.n	80038a2 <__swsetup_r+0x3e>
 800393a:	0788      	lsls	r0, r1, #30
 800393c:	d400      	bmi.n	8003940 <__swsetup_r+0xdc>
 800393e:	6962      	ldr	r2, [r4, #20]
 8003940:	60a2      	str	r2, [r4, #8]
 8003942:	e7ef      	b.n	8003924 <__swsetup_r+0xc0>
 8003944:	20000010 	.word	0x20000010
 8003948:	0800478c 	.word	0x0800478c
 800394c:	080047ac 	.word	0x080047ac
 8003950:	0800476c 	.word	0x0800476c

08003954 <__sflush_r>:
 8003954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003956:	898b      	ldrh	r3, [r1, #12]
 8003958:	0005      	movs	r5, r0
 800395a:	000c      	movs	r4, r1
 800395c:	071a      	lsls	r2, r3, #28
 800395e:	d45f      	bmi.n	8003a20 <__sflush_r+0xcc>
 8003960:	684a      	ldr	r2, [r1, #4]
 8003962:	2a00      	cmp	r2, #0
 8003964:	dc04      	bgt.n	8003970 <__sflush_r+0x1c>
 8003966:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003968:	2a00      	cmp	r2, #0
 800396a:	dc01      	bgt.n	8003970 <__sflush_r+0x1c>
 800396c:	2000      	movs	r0, #0
 800396e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003970:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003972:	2f00      	cmp	r7, #0
 8003974:	d0fa      	beq.n	800396c <__sflush_r+0x18>
 8003976:	2200      	movs	r2, #0
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	682e      	ldr	r6, [r5, #0]
 800397c:	602a      	str	r2, [r5, #0]
 800397e:	001a      	movs	r2, r3
 8003980:	0149      	lsls	r1, r1, #5
 8003982:	400a      	ands	r2, r1
 8003984:	420b      	tst	r3, r1
 8003986:	d034      	beq.n	80039f2 <__sflush_r+0x9e>
 8003988:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	075b      	lsls	r3, r3, #29
 800398e:	d506      	bpl.n	800399e <__sflush_r+0x4a>
 8003990:	6863      	ldr	r3, [r4, #4]
 8003992:	1ac0      	subs	r0, r0, r3
 8003994:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <__sflush_r+0x4a>
 800399a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800399c:	1ac0      	subs	r0, r0, r3
 800399e:	0002      	movs	r2, r0
 80039a0:	6a21      	ldr	r1, [r4, #32]
 80039a2:	2300      	movs	r3, #0
 80039a4:	0028      	movs	r0, r5
 80039a6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80039a8:	47b8      	blx	r7
 80039aa:	89a1      	ldrh	r1, [r4, #12]
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d106      	bne.n	80039be <__sflush_r+0x6a>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	2b1d      	cmp	r3, #29
 80039b4:	d831      	bhi.n	8003a1a <__sflush_r+0xc6>
 80039b6:	4a2c      	ldr	r2, [pc, #176]	; (8003a68 <__sflush_r+0x114>)
 80039b8:	40da      	lsrs	r2, r3
 80039ba:	07d3      	lsls	r3, r2, #31
 80039bc:	d52d      	bpl.n	8003a1a <__sflush_r+0xc6>
 80039be:	2300      	movs	r3, #0
 80039c0:	6063      	str	r3, [r4, #4]
 80039c2:	6923      	ldr	r3, [r4, #16]
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	04cb      	lsls	r3, r1, #19
 80039c8:	d505      	bpl.n	80039d6 <__sflush_r+0x82>
 80039ca:	1c43      	adds	r3, r0, #1
 80039cc:	d102      	bne.n	80039d4 <__sflush_r+0x80>
 80039ce:	682b      	ldr	r3, [r5, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d100      	bne.n	80039d6 <__sflush_r+0x82>
 80039d4:	6560      	str	r0, [r4, #84]	; 0x54
 80039d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80039d8:	602e      	str	r6, [r5, #0]
 80039da:	2900      	cmp	r1, #0
 80039dc:	d0c6      	beq.n	800396c <__sflush_r+0x18>
 80039de:	0023      	movs	r3, r4
 80039e0:	3344      	adds	r3, #68	; 0x44
 80039e2:	4299      	cmp	r1, r3
 80039e4:	d002      	beq.n	80039ec <__sflush_r+0x98>
 80039e6:	0028      	movs	r0, r5
 80039e8:	f7ff fd84 	bl	80034f4 <_free_r>
 80039ec:	2000      	movs	r0, #0
 80039ee:	6360      	str	r0, [r4, #52]	; 0x34
 80039f0:	e7bd      	b.n	800396e <__sflush_r+0x1a>
 80039f2:	2301      	movs	r3, #1
 80039f4:	0028      	movs	r0, r5
 80039f6:	6a21      	ldr	r1, [r4, #32]
 80039f8:	47b8      	blx	r7
 80039fa:	1c43      	adds	r3, r0, #1
 80039fc:	d1c5      	bne.n	800398a <__sflush_r+0x36>
 80039fe:	682b      	ldr	r3, [r5, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0c2      	beq.n	800398a <__sflush_r+0x36>
 8003a04:	2b1d      	cmp	r3, #29
 8003a06:	d001      	beq.n	8003a0c <__sflush_r+0xb8>
 8003a08:	2b16      	cmp	r3, #22
 8003a0a:	d101      	bne.n	8003a10 <__sflush_r+0xbc>
 8003a0c:	602e      	str	r6, [r5, #0]
 8003a0e:	e7ad      	b.n	800396c <__sflush_r+0x18>
 8003a10:	2340      	movs	r3, #64	; 0x40
 8003a12:	89a2      	ldrh	r2, [r4, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	81a3      	strh	r3, [r4, #12]
 8003a18:	e7a9      	b.n	800396e <__sflush_r+0x1a>
 8003a1a:	2340      	movs	r3, #64	; 0x40
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	e7fa      	b.n	8003a16 <__sflush_r+0xc2>
 8003a20:	690f      	ldr	r7, [r1, #16]
 8003a22:	2f00      	cmp	r7, #0
 8003a24:	d0a2      	beq.n	800396c <__sflush_r+0x18>
 8003a26:	680a      	ldr	r2, [r1, #0]
 8003a28:	600f      	str	r7, [r1, #0]
 8003a2a:	1bd2      	subs	r2, r2, r7
 8003a2c:	9201      	str	r2, [sp, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	079b      	lsls	r3, r3, #30
 8003a32:	d100      	bne.n	8003a36 <__sflush_r+0xe2>
 8003a34:	694a      	ldr	r2, [r1, #20]
 8003a36:	60a2      	str	r2, [r4, #8]
 8003a38:	9b01      	ldr	r3, [sp, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dc00      	bgt.n	8003a40 <__sflush_r+0xec>
 8003a3e:	e795      	b.n	800396c <__sflush_r+0x18>
 8003a40:	003a      	movs	r2, r7
 8003a42:	0028      	movs	r0, r5
 8003a44:	9b01      	ldr	r3, [sp, #4]
 8003a46:	6a21      	ldr	r1, [r4, #32]
 8003a48:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003a4a:	47b0      	blx	r6
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	dc06      	bgt.n	8003a5e <__sflush_r+0x10a>
 8003a50:	2340      	movs	r3, #64	; 0x40
 8003a52:	2001      	movs	r0, #1
 8003a54:	89a2      	ldrh	r2, [r4, #12]
 8003a56:	4240      	negs	r0, r0
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	81a3      	strh	r3, [r4, #12]
 8003a5c:	e787      	b.n	800396e <__sflush_r+0x1a>
 8003a5e:	9b01      	ldr	r3, [sp, #4]
 8003a60:	183f      	adds	r7, r7, r0
 8003a62:	1a1b      	subs	r3, r3, r0
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	e7e7      	b.n	8003a38 <__sflush_r+0xe4>
 8003a68:	20400001 	.word	0x20400001

08003a6c <_fflush_r>:
 8003a6c:	690b      	ldr	r3, [r1, #16]
 8003a6e:	b570      	push	{r4, r5, r6, lr}
 8003a70:	0005      	movs	r5, r0
 8003a72:	000c      	movs	r4, r1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <_fflush_r+0x12>
 8003a78:	2500      	movs	r5, #0
 8003a7a:	0028      	movs	r0, r5
 8003a7c:	bd70      	pop	{r4, r5, r6, pc}
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d004      	beq.n	8003a8c <_fflush_r+0x20>
 8003a82:	6983      	ldr	r3, [r0, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <_fflush_r+0x20>
 8003a88:	f000 f892 	bl	8003bb0 <__sinit>
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <_fflush_r+0x74>)
 8003a8e:	429c      	cmp	r4, r3
 8003a90:	d11b      	bne.n	8003aca <_fflush_r+0x5e>
 8003a92:	686c      	ldr	r4, [r5, #4]
 8003a94:	220c      	movs	r2, #12
 8003a96:	5ea3      	ldrsh	r3, [r4, r2]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0ed      	beq.n	8003a78 <_fflush_r+0xc>
 8003a9c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a9e:	07d2      	lsls	r2, r2, #31
 8003aa0:	d404      	bmi.n	8003aac <_fflush_r+0x40>
 8003aa2:	059b      	lsls	r3, r3, #22
 8003aa4:	d402      	bmi.n	8003aac <_fflush_r+0x40>
 8003aa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003aa8:	f000 f923 	bl	8003cf2 <__retarget_lock_acquire_recursive>
 8003aac:	0028      	movs	r0, r5
 8003aae:	0021      	movs	r1, r4
 8003ab0:	f7ff ff50 	bl	8003954 <__sflush_r>
 8003ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ab6:	0005      	movs	r5, r0
 8003ab8:	07db      	lsls	r3, r3, #31
 8003aba:	d4de      	bmi.n	8003a7a <_fflush_r+0xe>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	059b      	lsls	r3, r3, #22
 8003ac0:	d4db      	bmi.n	8003a7a <_fflush_r+0xe>
 8003ac2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ac4:	f000 f916 	bl	8003cf4 <__retarget_lock_release_recursive>
 8003ac8:	e7d7      	b.n	8003a7a <_fflush_r+0xe>
 8003aca:	4b06      	ldr	r3, [pc, #24]	; (8003ae4 <_fflush_r+0x78>)
 8003acc:	429c      	cmp	r4, r3
 8003ace:	d101      	bne.n	8003ad4 <_fflush_r+0x68>
 8003ad0:	68ac      	ldr	r4, [r5, #8]
 8003ad2:	e7df      	b.n	8003a94 <_fflush_r+0x28>
 8003ad4:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <_fflush_r+0x7c>)
 8003ad6:	429c      	cmp	r4, r3
 8003ad8:	d1dc      	bne.n	8003a94 <_fflush_r+0x28>
 8003ada:	68ec      	ldr	r4, [r5, #12]
 8003adc:	e7da      	b.n	8003a94 <_fflush_r+0x28>
 8003ade:	46c0      	nop			; (mov r8, r8)
 8003ae0:	0800478c 	.word	0x0800478c
 8003ae4:	080047ac 	.word	0x080047ac
 8003ae8:	0800476c 	.word	0x0800476c

08003aec <std>:
 8003aec:	2300      	movs	r3, #0
 8003aee:	b510      	push	{r4, lr}
 8003af0:	0004      	movs	r4, r0
 8003af2:	6003      	str	r3, [r0, #0]
 8003af4:	6043      	str	r3, [r0, #4]
 8003af6:	6083      	str	r3, [r0, #8]
 8003af8:	8181      	strh	r1, [r0, #12]
 8003afa:	6643      	str	r3, [r0, #100]	; 0x64
 8003afc:	0019      	movs	r1, r3
 8003afe:	81c2      	strh	r2, [r0, #14]
 8003b00:	6103      	str	r3, [r0, #16]
 8003b02:	6143      	str	r3, [r0, #20]
 8003b04:	6183      	str	r3, [r0, #24]
 8003b06:	2208      	movs	r2, #8
 8003b08:	305c      	adds	r0, #92	; 0x5c
 8003b0a:	f7ff fcea 	bl	80034e2 <memset>
 8003b0e:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <std+0x38>)
 8003b10:	6263      	str	r3, [r4, #36]	; 0x24
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <std+0x3c>)
 8003b14:	6224      	str	r4, [r4, #32]
 8003b16:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <std+0x40>)
 8003b1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <std+0x44>)
 8003b1e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b20:	bd10      	pop	{r4, pc}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	080043b9 	.word	0x080043b9
 8003b28:	080043e1 	.word	0x080043e1
 8003b2c:	08004419 	.word	0x08004419
 8003b30:	08004445 	.word	0x08004445

08003b34 <_cleanup_r>:
 8003b34:	b510      	push	{r4, lr}
 8003b36:	4902      	ldr	r1, [pc, #8]	; (8003b40 <_cleanup_r+0xc>)
 8003b38:	f000 f8ba 	bl	8003cb0 <_fwalk_reent>
 8003b3c:	bd10      	pop	{r4, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	08003a6d 	.word	0x08003a6d

08003b44 <__sfmoreglue>:
 8003b44:	b570      	push	{r4, r5, r6, lr}
 8003b46:	2568      	movs	r5, #104	; 0x68
 8003b48:	1e4a      	subs	r2, r1, #1
 8003b4a:	4355      	muls	r5, r2
 8003b4c:	000e      	movs	r6, r1
 8003b4e:	0029      	movs	r1, r5
 8003b50:	3174      	adds	r1, #116	; 0x74
 8003b52:	f7ff fd19 	bl	8003588 <_malloc_r>
 8003b56:	1e04      	subs	r4, r0, #0
 8003b58:	d008      	beq.n	8003b6c <__sfmoreglue+0x28>
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	002a      	movs	r2, r5
 8003b5e:	6001      	str	r1, [r0, #0]
 8003b60:	6046      	str	r6, [r0, #4]
 8003b62:	300c      	adds	r0, #12
 8003b64:	60a0      	str	r0, [r4, #8]
 8003b66:	3268      	adds	r2, #104	; 0x68
 8003b68:	f7ff fcbb 	bl	80034e2 <memset>
 8003b6c:	0020      	movs	r0, r4
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}

08003b70 <__sfp_lock_acquire>:
 8003b70:	b510      	push	{r4, lr}
 8003b72:	4802      	ldr	r0, [pc, #8]	; (8003b7c <__sfp_lock_acquire+0xc>)
 8003b74:	f000 f8bd 	bl	8003cf2 <__retarget_lock_acquire_recursive>
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	20000334 	.word	0x20000334

08003b80 <__sfp_lock_release>:
 8003b80:	b510      	push	{r4, lr}
 8003b82:	4802      	ldr	r0, [pc, #8]	; (8003b8c <__sfp_lock_release+0xc>)
 8003b84:	f000 f8b6 	bl	8003cf4 <__retarget_lock_release_recursive>
 8003b88:	bd10      	pop	{r4, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	20000334 	.word	0x20000334

08003b90 <__sinit_lock_acquire>:
 8003b90:	b510      	push	{r4, lr}
 8003b92:	4802      	ldr	r0, [pc, #8]	; (8003b9c <__sinit_lock_acquire+0xc>)
 8003b94:	f000 f8ad 	bl	8003cf2 <__retarget_lock_acquire_recursive>
 8003b98:	bd10      	pop	{r4, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	2000032f 	.word	0x2000032f

08003ba0 <__sinit_lock_release>:
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	4802      	ldr	r0, [pc, #8]	; (8003bac <__sinit_lock_release+0xc>)
 8003ba4:	f000 f8a6 	bl	8003cf4 <__retarget_lock_release_recursive>
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	2000032f 	.word	0x2000032f

08003bb0 <__sinit>:
 8003bb0:	b513      	push	{r0, r1, r4, lr}
 8003bb2:	0004      	movs	r4, r0
 8003bb4:	f7ff ffec 	bl	8003b90 <__sinit_lock_acquire>
 8003bb8:	69a3      	ldr	r3, [r4, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <__sinit+0x14>
 8003bbe:	f7ff ffef 	bl	8003ba0 <__sinit_lock_release>
 8003bc2:	bd13      	pop	{r0, r1, r4, pc}
 8003bc4:	64a3      	str	r3, [r4, #72]	; 0x48
 8003bc6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8003bca:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <__sinit+0x68>)
 8003bcc:	4a13      	ldr	r2, [pc, #76]	; (8003c1c <__sinit+0x6c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d101      	bne.n	8003bdc <__sinit+0x2c>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	61a3      	str	r3, [r4, #24]
 8003bdc:	0020      	movs	r0, r4
 8003bde:	f000 f81f 	bl	8003c20 <__sfp>
 8003be2:	6060      	str	r0, [r4, #4]
 8003be4:	0020      	movs	r0, r4
 8003be6:	f000 f81b 	bl	8003c20 <__sfp>
 8003bea:	60a0      	str	r0, [r4, #8]
 8003bec:	0020      	movs	r0, r4
 8003bee:	f000 f817 	bl	8003c20 <__sfp>
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2104      	movs	r1, #4
 8003bf6:	60e0      	str	r0, [r4, #12]
 8003bf8:	6860      	ldr	r0, [r4, #4]
 8003bfa:	f7ff ff77 	bl	8003aec <std>
 8003bfe:	2201      	movs	r2, #1
 8003c00:	2109      	movs	r1, #9
 8003c02:	68a0      	ldr	r0, [r4, #8]
 8003c04:	f7ff ff72 	bl	8003aec <std>
 8003c08:	2202      	movs	r2, #2
 8003c0a:	2112      	movs	r1, #18
 8003c0c:	68e0      	ldr	r0, [r4, #12]
 8003c0e:	f7ff ff6d 	bl	8003aec <std>
 8003c12:	2301      	movs	r3, #1
 8003c14:	61a3      	str	r3, [r4, #24]
 8003c16:	e7d2      	b.n	8003bbe <__sinit+0xe>
 8003c18:	08004768 	.word	0x08004768
 8003c1c:	08003b35 	.word	0x08003b35

08003c20 <__sfp>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	0007      	movs	r7, r0
 8003c24:	f7ff ffa4 	bl	8003b70 <__sfp_lock_acquire>
 8003c28:	4b1f      	ldr	r3, [pc, #124]	; (8003ca8 <__sfp+0x88>)
 8003c2a:	681e      	ldr	r6, [r3, #0]
 8003c2c:	69b3      	ldr	r3, [r6, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <__sfp+0x18>
 8003c32:	0030      	movs	r0, r6
 8003c34:	f7ff ffbc 	bl	8003bb0 <__sinit>
 8003c38:	3648      	adds	r6, #72	; 0x48
 8003c3a:	68b4      	ldr	r4, [r6, #8]
 8003c3c:	6873      	ldr	r3, [r6, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	d504      	bpl.n	8003c4c <__sfp+0x2c>
 8003c42:	6833      	ldr	r3, [r6, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d022      	beq.n	8003c8e <__sfp+0x6e>
 8003c48:	6836      	ldr	r6, [r6, #0]
 8003c4a:	e7f6      	b.n	8003c3a <__sfp+0x1a>
 8003c4c:	220c      	movs	r2, #12
 8003c4e:	5ea5      	ldrsh	r5, [r4, r2]
 8003c50:	2d00      	cmp	r5, #0
 8003c52:	d11a      	bne.n	8003c8a <__sfp+0x6a>
 8003c54:	0020      	movs	r0, r4
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <__sfp+0x8c>)
 8003c58:	3058      	adds	r0, #88	; 0x58
 8003c5a:	60e3      	str	r3, [r4, #12]
 8003c5c:	6665      	str	r5, [r4, #100]	; 0x64
 8003c5e:	f000 f847 	bl	8003cf0 <__retarget_lock_init_recursive>
 8003c62:	f7ff ff8d 	bl	8003b80 <__sfp_lock_release>
 8003c66:	0020      	movs	r0, r4
 8003c68:	2208      	movs	r2, #8
 8003c6a:	0029      	movs	r1, r5
 8003c6c:	6025      	str	r5, [r4, #0]
 8003c6e:	60a5      	str	r5, [r4, #8]
 8003c70:	6065      	str	r5, [r4, #4]
 8003c72:	6125      	str	r5, [r4, #16]
 8003c74:	6165      	str	r5, [r4, #20]
 8003c76:	61a5      	str	r5, [r4, #24]
 8003c78:	305c      	adds	r0, #92	; 0x5c
 8003c7a:	f7ff fc32 	bl	80034e2 <memset>
 8003c7e:	6365      	str	r5, [r4, #52]	; 0x34
 8003c80:	63a5      	str	r5, [r4, #56]	; 0x38
 8003c82:	64a5      	str	r5, [r4, #72]	; 0x48
 8003c84:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003c86:	0020      	movs	r0, r4
 8003c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c8a:	3468      	adds	r4, #104	; 0x68
 8003c8c:	e7d7      	b.n	8003c3e <__sfp+0x1e>
 8003c8e:	2104      	movs	r1, #4
 8003c90:	0038      	movs	r0, r7
 8003c92:	f7ff ff57 	bl	8003b44 <__sfmoreglue>
 8003c96:	1e04      	subs	r4, r0, #0
 8003c98:	6030      	str	r0, [r6, #0]
 8003c9a:	d1d5      	bne.n	8003c48 <__sfp+0x28>
 8003c9c:	f7ff ff70 	bl	8003b80 <__sfp_lock_release>
 8003ca0:	230c      	movs	r3, #12
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	e7ef      	b.n	8003c86 <__sfp+0x66>
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	08004768 	.word	0x08004768
 8003cac:	ffff0001 	.word	0xffff0001

08003cb0 <_fwalk_reent>:
 8003cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cb2:	0004      	movs	r4, r0
 8003cb4:	0006      	movs	r6, r0
 8003cb6:	2700      	movs	r7, #0
 8003cb8:	9101      	str	r1, [sp, #4]
 8003cba:	3448      	adds	r4, #72	; 0x48
 8003cbc:	6863      	ldr	r3, [r4, #4]
 8003cbe:	68a5      	ldr	r5, [r4, #8]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	9b00      	ldr	r3, [sp, #0]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	d504      	bpl.n	8003cd4 <_fwalk_reent+0x24>
 8003cca:	6824      	ldr	r4, [r4, #0]
 8003ccc:	2c00      	cmp	r4, #0
 8003cce:	d1f5      	bne.n	8003cbc <_fwalk_reent+0xc>
 8003cd0:	0038      	movs	r0, r7
 8003cd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cd4:	89ab      	ldrh	r3, [r5, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d908      	bls.n	8003cec <_fwalk_reent+0x3c>
 8003cda:	220e      	movs	r2, #14
 8003cdc:	5eab      	ldrsh	r3, [r5, r2]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	d004      	beq.n	8003cec <_fwalk_reent+0x3c>
 8003ce2:	0029      	movs	r1, r5
 8003ce4:	0030      	movs	r0, r6
 8003ce6:	9b01      	ldr	r3, [sp, #4]
 8003ce8:	4798      	blx	r3
 8003cea:	4307      	orrs	r7, r0
 8003cec:	3568      	adds	r5, #104	; 0x68
 8003cee:	e7e8      	b.n	8003cc2 <_fwalk_reent+0x12>

08003cf0 <__retarget_lock_init_recursive>:
 8003cf0:	4770      	bx	lr

08003cf2 <__retarget_lock_acquire_recursive>:
 8003cf2:	4770      	bx	lr

08003cf4 <__retarget_lock_release_recursive>:
 8003cf4:	4770      	bx	lr
	...

08003cf8 <__swhatbuf_r>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	000e      	movs	r6, r1
 8003cfc:	001d      	movs	r5, r3
 8003cfe:	230e      	movs	r3, #14
 8003d00:	5ec9      	ldrsh	r1, [r1, r3]
 8003d02:	0014      	movs	r4, r2
 8003d04:	b096      	sub	sp, #88	; 0x58
 8003d06:	2900      	cmp	r1, #0
 8003d08:	da07      	bge.n	8003d1a <__swhatbuf_r+0x22>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	602b      	str	r3, [r5, #0]
 8003d0e:	89b3      	ldrh	r3, [r6, #12]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	d411      	bmi.n	8003d38 <__swhatbuf_r+0x40>
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	e00f      	b.n	8003d3a <__swhatbuf_r+0x42>
 8003d1a:	466a      	mov	r2, sp
 8003d1c:	f000 fbbe 	bl	800449c <_fstat_r>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	dbf2      	blt.n	8003d0a <__swhatbuf_r+0x12>
 8003d24:	23f0      	movs	r3, #240	; 0xf0
 8003d26:	9901      	ldr	r1, [sp, #4]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	4019      	ands	r1, r3
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <__swhatbuf_r+0x4c>)
 8003d2e:	18c9      	adds	r1, r1, r3
 8003d30:	424b      	negs	r3, r1
 8003d32:	4159      	adcs	r1, r3
 8003d34:	6029      	str	r1, [r5, #0]
 8003d36:	e7ed      	b.n	8003d14 <__swhatbuf_r+0x1c>
 8003d38:	2340      	movs	r3, #64	; 0x40
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	b016      	add	sp, #88	; 0x58
 8003d40:	bd70      	pop	{r4, r5, r6, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	ffffe000 	.word	0xffffe000

08003d48 <__smakebuf_r>:
 8003d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d4a:	2602      	movs	r6, #2
 8003d4c:	898b      	ldrh	r3, [r1, #12]
 8003d4e:	0005      	movs	r5, r0
 8003d50:	000c      	movs	r4, r1
 8003d52:	4233      	tst	r3, r6
 8003d54:	d006      	beq.n	8003d64 <__smakebuf_r+0x1c>
 8003d56:	0023      	movs	r3, r4
 8003d58:	3347      	adds	r3, #71	; 0x47
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	6123      	str	r3, [r4, #16]
 8003d5e:	2301      	movs	r3, #1
 8003d60:	6163      	str	r3, [r4, #20]
 8003d62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003d64:	466a      	mov	r2, sp
 8003d66:	ab01      	add	r3, sp, #4
 8003d68:	f7ff ffc6 	bl	8003cf8 <__swhatbuf_r>
 8003d6c:	9900      	ldr	r1, [sp, #0]
 8003d6e:	0007      	movs	r7, r0
 8003d70:	0028      	movs	r0, r5
 8003d72:	f7ff fc09 	bl	8003588 <_malloc_r>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d108      	bne.n	8003d8c <__smakebuf_r+0x44>
 8003d7a:	220c      	movs	r2, #12
 8003d7c:	5ea3      	ldrsh	r3, [r4, r2]
 8003d7e:	059a      	lsls	r2, r3, #22
 8003d80:	d4ef      	bmi.n	8003d62 <__smakebuf_r+0x1a>
 8003d82:	2203      	movs	r2, #3
 8003d84:	4393      	bics	r3, r2
 8003d86:	431e      	orrs	r6, r3
 8003d88:	81a6      	strh	r6, [r4, #12]
 8003d8a:	e7e4      	b.n	8003d56 <__smakebuf_r+0xe>
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <__smakebuf_r+0x84>)
 8003d8e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	89a2      	ldrh	r2, [r4, #12]
 8003d94:	6020      	str	r0, [r4, #0]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	9b00      	ldr	r3, [sp, #0]
 8003d9c:	6120      	str	r0, [r4, #16]
 8003d9e:	6163      	str	r3, [r4, #20]
 8003da0:	9b01      	ldr	r3, [sp, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <__smakebuf_r+0x7a>
 8003da6:	0028      	movs	r0, r5
 8003da8:	230e      	movs	r3, #14
 8003daa:	5ee1      	ldrsh	r1, [r4, r3]
 8003dac:	f000 fb88 	bl	80044c0 <_isatty_r>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d006      	beq.n	8003dc2 <__smakebuf_r+0x7a>
 8003db4:	2203      	movs	r2, #3
 8003db6:	89a3      	ldrh	r3, [r4, #12]
 8003db8:	4393      	bics	r3, r2
 8003dba:	001a      	movs	r2, r3
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	81a3      	strh	r3, [r4, #12]
 8003dc2:	89a0      	ldrh	r0, [r4, #12]
 8003dc4:	4307      	orrs	r7, r0
 8003dc6:	81a7      	strh	r7, [r4, #12]
 8003dc8:	e7cb      	b.n	8003d62 <__smakebuf_r+0x1a>
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	08003b35 	.word	0x08003b35

08003dd0 <__malloc_lock>:
 8003dd0:	b510      	push	{r4, lr}
 8003dd2:	4802      	ldr	r0, [pc, #8]	; (8003ddc <__malloc_lock+0xc>)
 8003dd4:	f7ff ff8d 	bl	8003cf2 <__retarget_lock_acquire_recursive>
 8003dd8:	bd10      	pop	{r4, pc}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	20000330 	.word	0x20000330

08003de0 <__malloc_unlock>:
 8003de0:	b510      	push	{r4, lr}
 8003de2:	4802      	ldr	r0, [pc, #8]	; (8003dec <__malloc_unlock+0xc>)
 8003de4:	f7ff ff86 	bl	8003cf4 <__retarget_lock_release_recursive>
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	20000330 	.word	0x20000330

08003df0 <__sfputc_r>:
 8003df0:	6893      	ldr	r3, [r2, #8]
 8003df2:	b510      	push	{r4, lr}
 8003df4:	3b01      	subs	r3, #1
 8003df6:	6093      	str	r3, [r2, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	da04      	bge.n	8003e06 <__sfputc_r+0x16>
 8003dfc:	6994      	ldr	r4, [r2, #24]
 8003dfe:	42a3      	cmp	r3, r4
 8003e00:	db07      	blt.n	8003e12 <__sfputc_r+0x22>
 8003e02:	290a      	cmp	r1, #10
 8003e04:	d005      	beq.n	8003e12 <__sfputc_r+0x22>
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	1c58      	adds	r0, r3, #1
 8003e0a:	6010      	str	r0, [r2, #0]
 8003e0c:	7019      	strb	r1, [r3, #0]
 8003e0e:	0008      	movs	r0, r1
 8003e10:	bd10      	pop	{r4, pc}
 8003e12:	f7ff fcd1 	bl	80037b8 <__swbuf_r>
 8003e16:	0001      	movs	r1, r0
 8003e18:	e7f9      	b.n	8003e0e <__sfputc_r+0x1e>

08003e1a <__sfputs_r>:
 8003e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1c:	0006      	movs	r6, r0
 8003e1e:	000f      	movs	r7, r1
 8003e20:	0014      	movs	r4, r2
 8003e22:	18d5      	adds	r5, r2, r3
 8003e24:	42ac      	cmp	r4, r5
 8003e26:	d101      	bne.n	8003e2c <__sfputs_r+0x12>
 8003e28:	2000      	movs	r0, #0
 8003e2a:	e007      	b.n	8003e3c <__sfputs_r+0x22>
 8003e2c:	7821      	ldrb	r1, [r4, #0]
 8003e2e:	003a      	movs	r2, r7
 8003e30:	0030      	movs	r0, r6
 8003e32:	f7ff ffdd 	bl	8003df0 <__sfputc_r>
 8003e36:	3401      	adds	r4, #1
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d1f3      	bne.n	8003e24 <__sfputs_r+0xa>
 8003e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e40 <_vfiprintf_r>:
 8003e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e42:	b0a1      	sub	sp, #132	; 0x84
 8003e44:	0006      	movs	r6, r0
 8003e46:	000c      	movs	r4, r1
 8003e48:	001f      	movs	r7, r3
 8003e4a:	9203      	str	r2, [sp, #12]
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d004      	beq.n	8003e5a <_vfiprintf_r+0x1a>
 8003e50:	6983      	ldr	r3, [r0, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <_vfiprintf_r+0x1a>
 8003e56:	f7ff feab 	bl	8003bb0 <__sinit>
 8003e5a:	4b8e      	ldr	r3, [pc, #568]	; (8004094 <_vfiprintf_r+0x254>)
 8003e5c:	429c      	cmp	r4, r3
 8003e5e:	d11c      	bne.n	8003e9a <_vfiprintf_r+0x5a>
 8003e60:	6874      	ldr	r4, [r6, #4]
 8003e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e64:	07db      	lsls	r3, r3, #31
 8003e66:	d405      	bmi.n	8003e74 <_vfiprintf_r+0x34>
 8003e68:	89a3      	ldrh	r3, [r4, #12]
 8003e6a:	059b      	lsls	r3, r3, #22
 8003e6c:	d402      	bmi.n	8003e74 <_vfiprintf_r+0x34>
 8003e6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e70:	f7ff ff3f 	bl	8003cf2 <__retarget_lock_acquire_recursive>
 8003e74:	89a3      	ldrh	r3, [r4, #12]
 8003e76:	071b      	lsls	r3, r3, #28
 8003e78:	d502      	bpl.n	8003e80 <_vfiprintf_r+0x40>
 8003e7a:	6923      	ldr	r3, [r4, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d11d      	bne.n	8003ebc <_vfiprintf_r+0x7c>
 8003e80:	0021      	movs	r1, r4
 8003e82:	0030      	movs	r0, r6
 8003e84:	f7ff fcee 	bl	8003864 <__swsetup_r>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d017      	beq.n	8003ebc <_vfiprintf_r+0x7c>
 8003e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e8e:	07db      	lsls	r3, r3, #31
 8003e90:	d50d      	bpl.n	8003eae <_vfiprintf_r+0x6e>
 8003e92:	2001      	movs	r0, #1
 8003e94:	4240      	negs	r0, r0
 8003e96:	b021      	add	sp, #132	; 0x84
 8003e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e9a:	4b7f      	ldr	r3, [pc, #508]	; (8004098 <_vfiprintf_r+0x258>)
 8003e9c:	429c      	cmp	r4, r3
 8003e9e:	d101      	bne.n	8003ea4 <_vfiprintf_r+0x64>
 8003ea0:	68b4      	ldr	r4, [r6, #8]
 8003ea2:	e7de      	b.n	8003e62 <_vfiprintf_r+0x22>
 8003ea4:	4b7d      	ldr	r3, [pc, #500]	; (800409c <_vfiprintf_r+0x25c>)
 8003ea6:	429c      	cmp	r4, r3
 8003ea8:	d1db      	bne.n	8003e62 <_vfiprintf_r+0x22>
 8003eaa:	68f4      	ldr	r4, [r6, #12]
 8003eac:	e7d9      	b.n	8003e62 <_vfiprintf_r+0x22>
 8003eae:	89a3      	ldrh	r3, [r4, #12]
 8003eb0:	059b      	lsls	r3, r3, #22
 8003eb2:	d4ee      	bmi.n	8003e92 <_vfiprintf_r+0x52>
 8003eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003eb6:	f7ff ff1d 	bl	8003cf4 <__retarget_lock_release_recursive>
 8003eba:	e7ea      	b.n	8003e92 <_vfiprintf_r+0x52>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	ad08      	add	r5, sp, #32
 8003ec0:	616b      	str	r3, [r5, #20]
 8003ec2:	3320      	adds	r3, #32
 8003ec4:	766b      	strb	r3, [r5, #25]
 8003ec6:	3310      	adds	r3, #16
 8003ec8:	76ab      	strb	r3, [r5, #26]
 8003eca:	9707      	str	r7, [sp, #28]
 8003ecc:	9f03      	ldr	r7, [sp, #12]
 8003ece:	783b      	ldrb	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <_vfiprintf_r+0x98>
 8003ed4:	2b25      	cmp	r3, #37	; 0x25
 8003ed6:	d14e      	bne.n	8003f76 <_vfiprintf_r+0x136>
 8003ed8:	9b03      	ldr	r3, [sp, #12]
 8003eda:	1afb      	subs	r3, r7, r3
 8003edc:	9305      	str	r3, [sp, #20]
 8003ede:	9b03      	ldr	r3, [sp, #12]
 8003ee0:	429f      	cmp	r7, r3
 8003ee2:	d00d      	beq.n	8003f00 <_vfiprintf_r+0xc0>
 8003ee4:	9b05      	ldr	r3, [sp, #20]
 8003ee6:	0021      	movs	r1, r4
 8003ee8:	0030      	movs	r0, r6
 8003eea:	9a03      	ldr	r2, [sp, #12]
 8003eec:	f7ff ff95 	bl	8003e1a <__sfputs_r>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d100      	bne.n	8003ef6 <_vfiprintf_r+0xb6>
 8003ef4:	e0b5      	b.n	8004062 <_vfiprintf_r+0x222>
 8003ef6:	696a      	ldr	r2, [r5, #20]
 8003ef8:	9b05      	ldr	r3, [sp, #20]
 8003efa:	4694      	mov	ip, r2
 8003efc:	4463      	add	r3, ip
 8003efe:	616b      	str	r3, [r5, #20]
 8003f00:	783b      	ldrb	r3, [r7, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d100      	bne.n	8003f08 <_vfiprintf_r+0xc8>
 8003f06:	e0ac      	b.n	8004062 <_vfiprintf_r+0x222>
 8003f08:	2201      	movs	r2, #1
 8003f0a:	1c7b      	adds	r3, r7, #1
 8003f0c:	9303      	str	r3, [sp, #12]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4252      	negs	r2, r2
 8003f12:	606a      	str	r2, [r5, #4]
 8003f14:	a904      	add	r1, sp, #16
 8003f16:	3254      	adds	r2, #84	; 0x54
 8003f18:	1852      	adds	r2, r2, r1
 8003f1a:	602b      	str	r3, [r5, #0]
 8003f1c:	60eb      	str	r3, [r5, #12]
 8003f1e:	60ab      	str	r3, [r5, #8]
 8003f20:	7013      	strb	r3, [r2, #0]
 8003f22:	65ab      	str	r3, [r5, #88]	; 0x58
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	2205      	movs	r2, #5
 8003f28:	7819      	ldrb	r1, [r3, #0]
 8003f2a:	485d      	ldr	r0, [pc, #372]	; (80040a0 <_vfiprintf_r+0x260>)
 8003f2c:	f000 faee 	bl	800450c <memchr>
 8003f30:	9b03      	ldr	r3, [sp, #12]
 8003f32:	1c5f      	adds	r7, r3, #1
 8003f34:	2800      	cmp	r0, #0
 8003f36:	d120      	bne.n	8003f7a <_vfiprintf_r+0x13a>
 8003f38:	682a      	ldr	r2, [r5, #0]
 8003f3a:	06d3      	lsls	r3, r2, #27
 8003f3c:	d504      	bpl.n	8003f48 <_vfiprintf_r+0x108>
 8003f3e:	2353      	movs	r3, #83	; 0x53
 8003f40:	a904      	add	r1, sp, #16
 8003f42:	185b      	adds	r3, r3, r1
 8003f44:	2120      	movs	r1, #32
 8003f46:	7019      	strb	r1, [r3, #0]
 8003f48:	0713      	lsls	r3, r2, #28
 8003f4a:	d504      	bpl.n	8003f56 <_vfiprintf_r+0x116>
 8003f4c:	2353      	movs	r3, #83	; 0x53
 8003f4e:	a904      	add	r1, sp, #16
 8003f50:	185b      	adds	r3, r3, r1
 8003f52:	212b      	movs	r1, #43	; 0x2b
 8003f54:	7019      	strb	r1, [r3, #0]
 8003f56:	9b03      	ldr	r3, [sp, #12]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f5c:	d016      	beq.n	8003f8c <_vfiprintf_r+0x14c>
 8003f5e:	2100      	movs	r1, #0
 8003f60:	68eb      	ldr	r3, [r5, #12]
 8003f62:	9f03      	ldr	r7, [sp, #12]
 8003f64:	783a      	ldrb	r2, [r7, #0]
 8003f66:	1c78      	adds	r0, r7, #1
 8003f68:	3a30      	subs	r2, #48	; 0x30
 8003f6a:	4684      	mov	ip, r0
 8003f6c:	2a09      	cmp	r2, #9
 8003f6e:	d94f      	bls.n	8004010 <_vfiprintf_r+0x1d0>
 8003f70:	2900      	cmp	r1, #0
 8003f72:	d111      	bne.n	8003f98 <_vfiprintf_r+0x158>
 8003f74:	e017      	b.n	8003fa6 <_vfiprintf_r+0x166>
 8003f76:	3701      	adds	r7, #1
 8003f78:	e7a9      	b.n	8003ece <_vfiprintf_r+0x8e>
 8003f7a:	4b49      	ldr	r3, [pc, #292]	; (80040a0 <_vfiprintf_r+0x260>)
 8003f7c:	682a      	ldr	r2, [r5, #0]
 8003f7e:	1ac0      	subs	r0, r0, r3
 8003f80:	2301      	movs	r3, #1
 8003f82:	4083      	lsls	r3, r0
 8003f84:	4313      	orrs	r3, r2
 8003f86:	602b      	str	r3, [r5, #0]
 8003f88:	9703      	str	r7, [sp, #12]
 8003f8a:	e7cb      	b.n	8003f24 <_vfiprintf_r+0xe4>
 8003f8c:	9b07      	ldr	r3, [sp, #28]
 8003f8e:	1d19      	adds	r1, r3, #4
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	9107      	str	r1, [sp, #28]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	db01      	blt.n	8003f9c <_vfiprintf_r+0x15c>
 8003f98:	930b      	str	r3, [sp, #44]	; 0x2c
 8003f9a:	e004      	b.n	8003fa6 <_vfiprintf_r+0x166>
 8003f9c:	425b      	negs	r3, r3
 8003f9e:	60eb      	str	r3, [r5, #12]
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	602b      	str	r3, [r5, #0]
 8003fa6:	783b      	ldrb	r3, [r7, #0]
 8003fa8:	2b2e      	cmp	r3, #46	; 0x2e
 8003faa:	d10a      	bne.n	8003fc2 <_vfiprintf_r+0x182>
 8003fac:	787b      	ldrb	r3, [r7, #1]
 8003fae:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb0:	d137      	bne.n	8004022 <_vfiprintf_r+0x1e2>
 8003fb2:	9b07      	ldr	r3, [sp, #28]
 8003fb4:	3702      	adds	r7, #2
 8003fb6:	1d1a      	adds	r2, r3, #4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	9207      	str	r2, [sp, #28]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	db2d      	blt.n	800401c <_vfiprintf_r+0x1dc>
 8003fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	7839      	ldrb	r1, [r7, #0]
 8003fc6:	4837      	ldr	r0, [pc, #220]	; (80040a4 <_vfiprintf_r+0x264>)
 8003fc8:	f000 faa0 	bl	800450c <memchr>
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d007      	beq.n	8003fe0 <_vfiprintf_r+0x1a0>
 8003fd0:	4b34      	ldr	r3, [pc, #208]	; (80040a4 <_vfiprintf_r+0x264>)
 8003fd2:	682a      	ldr	r2, [r5, #0]
 8003fd4:	1ac0      	subs	r0, r0, r3
 8003fd6:	2340      	movs	r3, #64	; 0x40
 8003fd8:	4083      	lsls	r3, r0
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	3701      	adds	r7, #1
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	7839      	ldrb	r1, [r7, #0]
 8003fe2:	1c7b      	adds	r3, r7, #1
 8003fe4:	2206      	movs	r2, #6
 8003fe6:	4830      	ldr	r0, [pc, #192]	; (80040a8 <_vfiprintf_r+0x268>)
 8003fe8:	9303      	str	r3, [sp, #12]
 8003fea:	7629      	strb	r1, [r5, #24]
 8003fec:	f000 fa8e 	bl	800450c <memchr>
 8003ff0:	2800      	cmp	r0, #0
 8003ff2:	d045      	beq.n	8004080 <_vfiprintf_r+0x240>
 8003ff4:	4b2d      	ldr	r3, [pc, #180]	; (80040ac <_vfiprintf_r+0x26c>)
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d127      	bne.n	800404a <_vfiprintf_r+0x20a>
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	9b07      	ldr	r3, [sp, #28]
 8003ffe:	3307      	adds	r3, #7
 8004000:	4393      	bics	r3, r2
 8004002:	3308      	adds	r3, #8
 8004004:	9307      	str	r3, [sp, #28]
 8004006:	696b      	ldr	r3, [r5, #20]
 8004008:	9a04      	ldr	r2, [sp, #16]
 800400a:	189b      	adds	r3, r3, r2
 800400c:	616b      	str	r3, [r5, #20]
 800400e:	e75d      	b.n	8003ecc <_vfiprintf_r+0x8c>
 8004010:	210a      	movs	r1, #10
 8004012:	434b      	muls	r3, r1
 8004014:	4667      	mov	r7, ip
 8004016:	189b      	adds	r3, r3, r2
 8004018:	3909      	subs	r1, #9
 800401a:	e7a3      	b.n	8003f64 <_vfiprintf_r+0x124>
 800401c:	2301      	movs	r3, #1
 800401e:	425b      	negs	r3, r3
 8004020:	e7ce      	b.n	8003fc0 <_vfiprintf_r+0x180>
 8004022:	2300      	movs	r3, #0
 8004024:	001a      	movs	r2, r3
 8004026:	3701      	adds	r7, #1
 8004028:	606b      	str	r3, [r5, #4]
 800402a:	7839      	ldrb	r1, [r7, #0]
 800402c:	1c78      	adds	r0, r7, #1
 800402e:	3930      	subs	r1, #48	; 0x30
 8004030:	4684      	mov	ip, r0
 8004032:	2909      	cmp	r1, #9
 8004034:	d903      	bls.n	800403e <_vfiprintf_r+0x1fe>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0c3      	beq.n	8003fc2 <_vfiprintf_r+0x182>
 800403a:	9209      	str	r2, [sp, #36]	; 0x24
 800403c:	e7c1      	b.n	8003fc2 <_vfiprintf_r+0x182>
 800403e:	230a      	movs	r3, #10
 8004040:	435a      	muls	r2, r3
 8004042:	4667      	mov	r7, ip
 8004044:	1852      	adds	r2, r2, r1
 8004046:	3b09      	subs	r3, #9
 8004048:	e7ef      	b.n	800402a <_vfiprintf_r+0x1ea>
 800404a:	ab07      	add	r3, sp, #28
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	0022      	movs	r2, r4
 8004050:	0029      	movs	r1, r5
 8004052:	0030      	movs	r0, r6
 8004054:	4b16      	ldr	r3, [pc, #88]	; (80040b0 <_vfiprintf_r+0x270>)
 8004056:	e000      	b.n	800405a <_vfiprintf_r+0x21a>
 8004058:	bf00      	nop
 800405a:	9004      	str	r0, [sp, #16]
 800405c:	9b04      	ldr	r3, [sp, #16]
 800405e:	3301      	adds	r3, #1
 8004060:	d1d1      	bne.n	8004006 <_vfiprintf_r+0x1c6>
 8004062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004064:	07db      	lsls	r3, r3, #31
 8004066:	d405      	bmi.n	8004074 <_vfiprintf_r+0x234>
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	059b      	lsls	r3, r3, #22
 800406c:	d402      	bmi.n	8004074 <_vfiprintf_r+0x234>
 800406e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004070:	f7ff fe40 	bl	8003cf4 <__retarget_lock_release_recursive>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	065b      	lsls	r3, r3, #25
 8004078:	d500      	bpl.n	800407c <_vfiprintf_r+0x23c>
 800407a:	e70a      	b.n	8003e92 <_vfiprintf_r+0x52>
 800407c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800407e:	e70a      	b.n	8003e96 <_vfiprintf_r+0x56>
 8004080:	ab07      	add	r3, sp, #28
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	0022      	movs	r2, r4
 8004086:	0029      	movs	r1, r5
 8004088:	0030      	movs	r0, r6
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <_vfiprintf_r+0x270>)
 800408c:	f000 f882 	bl	8004194 <_printf_i>
 8004090:	e7e3      	b.n	800405a <_vfiprintf_r+0x21a>
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	0800478c 	.word	0x0800478c
 8004098:	080047ac 	.word	0x080047ac
 800409c:	0800476c 	.word	0x0800476c
 80040a0:	080047cc 	.word	0x080047cc
 80040a4:	080047d2 	.word	0x080047d2
 80040a8:	080047d6 	.word	0x080047d6
 80040ac:	00000000 	.word	0x00000000
 80040b0:	08003e1b 	.word	0x08003e1b

080040b4 <_printf_common>:
 80040b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040b6:	0015      	movs	r5, r2
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	688a      	ldr	r2, [r1, #8]
 80040bc:	690b      	ldr	r3, [r1, #16]
 80040be:	000c      	movs	r4, r1
 80040c0:	9000      	str	r0, [sp, #0]
 80040c2:	4293      	cmp	r3, r2
 80040c4:	da00      	bge.n	80040c8 <_printf_common+0x14>
 80040c6:	0013      	movs	r3, r2
 80040c8:	0022      	movs	r2, r4
 80040ca:	602b      	str	r3, [r5, #0]
 80040cc:	3243      	adds	r2, #67	; 0x43
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	2a00      	cmp	r2, #0
 80040d2:	d001      	beq.n	80040d8 <_printf_common+0x24>
 80040d4:	3301      	adds	r3, #1
 80040d6:	602b      	str	r3, [r5, #0]
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	069b      	lsls	r3, r3, #26
 80040dc:	d502      	bpl.n	80040e4 <_printf_common+0x30>
 80040de:	682b      	ldr	r3, [r5, #0]
 80040e0:	3302      	adds	r3, #2
 80040e2:	602b      	str	r3, [r5, #0]
 80040e4:	6822      	ldr	r2, [r4, #0]
 80040e6:	2306      	movs	r3, #6
 80040e8:	0017      	movs	r7, r2
 80040ea:	401f      	ands	r7, r3
 80040ec:	421a      	tst	r2, r3
 80040ee:	d027      	beq.n	8004140 <_printf_common+0x8c>
 80040f0:	0023      	movs	r3, r4
 80040f2:	3343      	adds	r3, #67	; 0x43
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	1e5a      	subs	r2, r3, #1
 80040f8:	4193      	sbcs	r3, r2
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	0692      	lsls	r2, r2, #26
 80040fe:	d430      	bmi.n	8004162 <_printf_common+0xae>
 8004100:	0022      	movs	r2, r4
 8004102:	9901      	ldr	r1, [sp, #4]
 8004104:	9800      	ldr	r0, [sp, #0]
 8004106:	9e08      	ldr	r6, [sp, #32]
 8004108:	3243      	adds	r2, #67	; 0x43
 800410a:	47b0      	blx	r6
 800410c:	1c43      	adds	r3, r0, #1
 800410e:	d025      	beq.n	800415c <_printf_common+0xa8>
 8004110:	2306      	movs	r3, #6
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	682a      	ldr	r2, [r5, #0]
 8004116:	68e1      	ldr	r1, [r4, #12]
 8004118:	2500      	movs	r5, #0
 800411a:	4003      	ands	r3, r0
 800411c:	2b04      	cmp	r3, #4
 800411e:	d103      	bne.n	8004128 <_printf_common+0x74>
 8004120:	1a8d      	subs	r5, r1, r2
 8004122:	43eb      	mvns	r3, r5
 8004124:	17db      	asrs	r3, r3, #31
 8004126:	401d      	ands	r5, r3
 8004128:	68a3      	ldr	r3, [r4, #8]
 800412a:	6922      	ldr	r2, [r4, #16]
 800412c:	4293      	cmp	r3, r2
 800412e:	dd01      	ble.n	8004134 <_printf_common+0x80>
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	18ed      	adds	r5, r5, r3
 8004134:	2700      	movs	r7, #0
 8004136:	42bd      	cmp	r5, r7
 8004138:	d120      	bne.n	800417c <_printf_common+0xc8>
 800413a:	2000      	movs	r0, #0
 800413c:	e010      	b.n	8004160 <_printf_common+0xac>
 800413e:	3701      	adds	r7, #1
 8004140:	68e3      	ldr	r3, [r4, #12]
 8004142:	682a      	ldr	r2, [r5, #0]
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	42bb      	cmp	r3, r7
 8004148:	ddd2      	ble.n	80040f0 <_printf_common+0x3c>
 800414a:	0022      	movs	r2, r4
 800414c:	2301      	movs	r3, #1
 800414e:	9901      	ldr	r1, [sp, #4]
 8004150:	9800      	ldr	r0, [sp, #0]
 8004152:	9e08      	ldr	r6, [sp, #32]
 8004154:	3219      	adds	r2, #25
 8004156:	47b0      	blx	r6
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d1f0      	bne.n	800413e <_printf_common+0x8a>
 800415c:	2001      	movs	r0, #1
 800415e:	4240      	negs	r0, r0
 8004160:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004162:	2030      	movs	r0, #48	; 0x30
 8004164:	18e1      	adds	r1, r4, r3
 8004166:	3143      	adds	r1, #67	; 0x43
 8004168:	7008      	strb	r0, [r1, #0]
 800416a:	0021      	movs	r1, r4
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	3145      	adds	r1, #69	; 0x45
 8004170:	7809      	ldrb	r1, [r1, #0]
 8004172:	18a2      	adds	r2, r4, r2
 8004174:	3243      	adds	r2, #67	; 0x43
 8004176:	3302      	adds	r3, #2
 8004178:	7011      	strb	r1, [r2, #0]
 800417a:	e7c1      	b.n	8004100 <_printf_common+0x4c>
 800417c:	0022      	movs	r2, r4
 800417e:	2301      	movs	r3, #1
 8004180:	9901      	ldr	r1, [sp, #4]
 8004182:	9800      	ldr	r0, [sp, #0]
 8004184:	9e08      	ldr	r6, [sp, #32]
 8004186:	321a      	adds	r2, #26
 8004188:	47b0      	blx	r6
 800418a:	1c43      	adds	r3, r0, #1
 800418c:	d0e6      	beq.n	800415c <_printf_common+0xa8>
 800418e:	3701      	adds	r7, #1
 8004190:	e7d1      	b.n	8004136 <_printf_common+0x82>
	...

08004194 <_printf_i>:
 8004194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004196:	b08b      	sub	sp, #44	; 0x2c
 8004198:	9206      	str	r2, [sp, #24]
 800419a:	000a      	movs	r2, r1
 800419c:	3243      	adds	r2, #67	; 0x43
 800419e:	9307      	str	r3, [sp, #28]
 80041a0:	9005      	str	r0, [sp, #20]
 80041a2:	9204      	str	r2, [sp, #16]
 80041a4:	7e0a      	ldrb	r2, [r1, #24]
 80041a6:	000c      	movs	r4, r1
 80041a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041aa:	2a78      	cmp	r2, #120	; 0x78
 80041ac:	d806      	bhi.n	80041bc <_printf_i+0x28>
 80041ae:	2a62      	cmp	r2, #98	; 0x62
 80041b0:	d808      	bhi.n	80041c4 <_printf_i+0x30>
 80041b2:	2a00      	cmp	r2, #0
 80041b4:	d100      	bne.n	80041b8 <_printf_i+0x24>
 80041b6:	e0c0      	b.n	800433a <_printf_i+0x1a6>
 80041b8:	2a58      	cmp	r2, #88	; 0x58
 80041ba:	d052      	beq.n	8004262 <_printf_i+0xce>
 80041bc:	0026      	movs	r6, r4
 80041be:	3642      	adds	r6, #66	; 0x42
 80041c0:	7032      	strb	r2, [r6, #0]
 80041c2:	e022      	b.n	800420a <_printf_i+0x76>
 80041c4:	0010      	movs	r0, r2
 80041c6:	3863      	subs	r0, #99	; 0x63
 80041c8:	2815      	cmp	r0, #21
 80041ca:	d8f7      	bhi.n	80041bc <_printf_i+0x28>
 80041cc:	f7fb ffa4 	bl	8000118 <__gnu_thumb1_case_shi>
 80041d0:	001f0016 	.word	0x001f0016
 80041d4:	fff6fff6 	.word	0xfff6fff6
 80041d8:	fff6fff6 	.word	0xfff6fff6
 80041dc:	fff6001f 	.word	0xfff6001f
 80041e0:	fff6fff6 	.word	0xfff6fff6
 80041e4:	00a8fff6 	.word	0x00a8fff6
 80041e8:	009a0036 	.word	0x009a0036
 80041ec:	fff6fff6 	.word	0xfff6fff6
 80041f0:	fff600b9 	.word	0xfff600b9
 80041f4:	fff60036 	.word	0xfff60036
 80041f8:	009efff6 	.word	0x009efff6
 80041fc:	0026      	movs	r6, r4
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	3642      	adds	r6, #66	; 0x42
 8004202:	1d11      	adds	r1, r2, #4
 8004204:	6019      	str	r1, [r3, #0]
 8004206:	6813      	ldr	r3, [r2, #0]
 8004208:	7033      	strb	r3, [r6, #0]
 800420a:	2301      	movs	r3, #1
 800420c:	e0a7      	b.n	800435e <_printf_i+0x1ca>
 800420e:	6808      	ldr	r0, [r1, #0]
 8004210:	6819      	ldr	r1, [r3, #0]
 8004212:	1d0a      	adds	r2, r1, #4
 8004214:	0605      	lsls	r5, r0, #24
 8004216:	d50b      	bpl.n	8004230 <_printf_i+0x9c>
 8004218:	680d      	ldr	r5, [r1, #0]
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	2d00      	cmp	r5, #0
 800421e:	da03      	bge.n	8004228 <_printf_i+0x94>
 8004220:	232d      	movs	r3, #45	; 0x2d
 8004222:	9a04      	ldr	r2, [sp, #16]
 8004224:	426d      	negs	r5, r5
 8004226:	7013      	strb	r3, [r2, #0]
 8004228:	4b61      	ldr	r3, [pc, #388]	; (80043b0 <_printf_i+0x21c>)
 800422a:	270a      	movs	r7, #10
 800422c:	9303      	str	r3, [sp, #12]
 800422e:	e032      	b.n	8004296 <_printf_i+0x102>
 8004230:	680d      	ldr	r5, [r1, #0]
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	0641      	lsls	r1, r0, #25
 8004236:	d5f1      	bpl.n	800421c <_printf_i+0x88>
 8004238:	b22d      	sxth	r5, r5
 800423a:	e7ef      	b.n	800421c <_printf_i+0x88>
 800423c:	680d      	ldr	r5, [r1, #0]
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	1d08      	adds	r0, r1, #4
 8004242:	6018      	str	r0, [r3, #0]
 8004244:	062e      	lsls	r6, r5, #24
 8004246:	d501      	bpl.n	800424c <_printf_i+0xb8>
 8004248:	680d      	ldr	r5, [r1, #0]
 800424a:	e003      	b.n	8004254 <_printf_i+0xc0>
 800424c:	066d      	lsls	r5, r5, #25
 800424e:	d5fb      	bpl.n	8004248 <_printf_i+0xb4>
 8004250:	680d      	ldr	r5, [r1, #0]
 8004252:	b2ad      	uxth	r5, r5
 8004254:	4b56      	ldr	r3, [pc, #344]	; (80043b0 <_printf_i+0x21c>)
 8004256:	270a      	movs	r7, #10
 8004258:	9303      	str	r3, [sp, #12]
 800425a:	2a6f      	cmp	r2, #111	; 0x6f
 800425c:	d117      	bne.n	800428e <_printf_i+0xfa>
 800425e:	2708      	movs	r7, #8
 8004260:	e015      	b.n	800428e <_printf_i+0xfa>
 8004262:	3145      	adds	r1, #69	; 0x45
 8004264:	700a      	strb	r2, [r1, #0]
 8004266:	4a52      	ldr	r2, [pc, #328]	; (80043b0 <_printf_i+0x21c>)
 8004268:	9203      	str	r2, [sp, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	6821      	ldr	r1, [r4, #0]
 800426e:	ca20      	ldmia	r2!, {r5}
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	0608      	lsls	r0, r1, #24
 8004274:	d550      	bpl.n	8004318 <_printf_i+0x184>
 8004276:	07cb      	lsls	r3, r1, #31
 8004278:	d502      	bpl.n	8004280 <_printf_i+0xec>
 800427a:	2320      	movs	r3, #32
 800427c:	4319      	orrs	r1, r3
 800427e:	6021      	str	r1, [r4, #0]
 8004280:	2710      	movs	r7, #16
 8004282:	2d00      	cmp	r5, #0
 8004284:	d103      	bne.n	800428e <_printf_i+0xfa>
 8004286:	2320      	movs	r3, #32
 8004288:	6822      	ldr	r2, [r4, #0]
 800428a:	439a      	bics	r2, r3
 800428c:	6022      	str	r2, [r4, #0]
 800428e:	0023      	movs	r3, r4
 8004290:	2200      	movs	r2, #0
 8004292:	3343      	adds	r3, #67	; 0x43
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	6863      	ldr	r3, [r4, #4]
 8004298:	60a3      	str	r3, [r4, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	db03      	blt.n	80042a6 <_printf_i+0x112>
 800429e:	2204      	movs	r2, #4
 80042a0:	6821      	ldr	r1, [r4, #0]
 80042a2:	4391      	bics	r1, r2
 80042a4:	6021      	str	r1, [r4, #0]
 80042a6:	2d00      	cmp	r5, #0
 80042a8:	d102      	bne.n	80042b0 <_printf_i+0x11c>
 80042aa:	9e04      	ldr	r6, [sp, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00c      	beq.n	80042ca <_printf_i+0x136>
 80042b0:	9e04      	ldr	r6, [sp, #16]
 80042b2:	0028      	movs	r0, r5
 80042b4:	0039      	movs	r1, r7
 80042b6:	f7fb ffbf 	bl	8000238 <__aeabi_uidivmod>
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	3e01      	subs	r6, #1
 80042be:	5c5b      	ldrb	r3, [r3, r1]
 80042c0:	7033      	strb	r3, [r6, #0]
 80042c2:	002b      	movs	r3, r5
 80042c4:	0005      	movs	r5, r0
 80042c6:	429f      	cmp	r7, r3
 80042c8:	d9f3      	bls.n	80042b2 <_printf_i+0x11e>
 80042ca:	2f08      	cmp	r7, #8
 80042cc:	d109      	bne.n	80042e2 <_printf_i+0x14e>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	07db      	lsls	r3, r3, #31
 80042d2:	d506      	bpl.n	80042e2 <_printf_i+0x14e>
 80042d4:	6863      	ldr	r3, [r4, #4]
 80042d6:	6922      	ldr	r2, [r4, #16]
 80042d8:	4293      	cmp	r3, r2
 80042da:	dc02      	bgt.n	80042e2 <_printf_i+0x14e>
 80042dc:	2330      	movs	r3, #48	; 0x30
 80042de:	3e01      	subs	r6, #1
 80042e0:	7033      	strb	r3, [r6, #0]
 80042e2:	9b04      	ldr	r3, [sp, #16]
 80042e4:	1b9b      	subs	r3, r3, r6
 80042e6:	6123      	str	r3, [r4, #16]
 80042e8:	9b07      	ldr	r3, [sp, #28]
 80042ea:	0021      	movs	r1, r4
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	9805      	ldr	r0, [sp, #20]
 80042f0:	9b06      	ldr	r3, [sp, #24]
 80042f2:	aa09      	add	r2, sp, #36	; 0x24
 80042f4:	f7ff fede 	bl	80040b4 <_printf_common>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d135      	bne.n	8004368 <_printf_i+0x1d4>
 80042fc:	2001      	movs	r0, #1
 80042fe:	4240      	negs	r0, r0
 8004300:	b00b      	add	sp, #44	; 0x2c
 8004302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004304:	2220      	movs	r2, #32
 8004306:	6809      	ldr	r1, [r1, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	6022      	str	r2, [r4, #0]
 800430c:	0022      	movs	r2, r4
 800430e:	2178      	movs	r1, #120	; 0x78
 8004310:	3245      	adds	r2, #69	; 0x45
 8004312:	7011      	strb	r1, [r2, #0]
 8004314:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <_printf_i+0x220>)
 8004316:	e7a7      	b.n	8004268 <_printf_i+0xd4>
 8004318:	0648      	lsls	r0, r1, #25
 800431a:	d5ac      	bpl.n	8004276 <_printf_i+0xe2>
 800431c:	b2ad      	uxth	r5, r5
 800431e:	e7aa      	b.n	8004276 <_printf_i+0xe2>
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	680d      	ldr	r5, [r1, #0]
 8004324:	1d10      	adds	r0, r2, #4
 8004326:	6949      	ldr	r1, [r1, #20]
 8004328:	6018      	str	r0, [r3, #0]
 800432a:	6813      	ldr	r3, [r2, #0]
 800432c:	062e      	lsls	r6, r5, #24
 800432e:	d501      	bpl.n	8004334 <_printf_i+0x1a0>
 8004330:	6019      	str	r1, [r3, #0]
 8004332:	e002      	b.n	800433a <_printf_i+0x1a6>
 8004334:	066d      	lsls	r5, r5, #25
 8004336:	d5fb      	bpl.n	8004330 <_printf_i+0x19c>
 8004338:	8019      	strh	r1, [r3, #0]
 800433a:	2300      	movs	r3, #0
 800433c:	9e04      	ldr	r6, [sp, #16]
 800433e:	6123      	str	r3, [r4, #16]
 8004340:	e7d2      	b.n	80042e8 <_printf_i+0x154>
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	1d11      	adds	r1, r2, #4
 8004346:	6019      	str	r1, [r3, #0]
 8004348:	6816      	ldr	r6, [r2, #0]
 800434a:	2100      	movs	r1, #0
 800434c:	0030      	movs	r0, r6
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	f000 f8dc 	bl	800450c <memchr>
 8004354:	2800      	cmp	r0, #0
 8004356:	d001      	beq.n	800435c <_printf_i+0x1c8>
 8004358:	1b80      	subs	r0, r0, r6
 800435a:	6060      	str	r0, [r4, #4]
 800435c:	6863      	ldr	r3, [r4, #4]
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	2300      	movs	r3, #0
 8004362:	9a04      	ldr	r2, [sp, #16]
 8004364:	7013      	strb	r3, [r2, #0]
 8004366:	e7bf      	b.n	80042e8 <_printf_i+0x154>
 8004368:	6923      	ldr	r3, [r4, #16]
 800436a:	0032      	movs	r2, r6
 800436c:	9906      	ldr	r1, [sp, #24]
 800436e:	9805      	ldr	r0, [sp, #20]
 8004370:	9d07      	ldr	r5, [sp, #28]
 8004372:	47a8      	blx	r5
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d0c1      	beq.n	80042fc <_printf_i+0x168>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	079b      	lsls	r3, r3, #30
 800437c:	d415      	bmi.n	80043aa <_printf_i+0x216>
 800437e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004380:	68e0      	ldr	r0, [r4, #12]
 8004382:	4298      	cmp	r0, r3
 8004384:	dabc      	bge.n	8004300 <_printf_i+0x16c>
 8004386:	0018      	movs	r0, r3
 8004388:	e7ba      	b.n	8004300 <_printf_i+0x16c>
 800438a:	0022      	movs	r2, r4
 800438c:	2301      	movs	r3, #1
 800438e:	9906      	ldr	r1, [sp, #24]
 8004390:	9805      	ldr	r0, [sp, #20]
 8004392:	9e07      	ldr	r6, [sp, #28]
 8004394:	3219      	adds	r2, #25
 8004396:	47b0      	blx	r6
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	d0af      	beq.n	80042fc <_printf_i+0x168>
 800439c:	3501      	adds	r5, #1
 800439e:	68e3      	ldr	r3, [r4, #12]
 80043a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	42ab      	cmp	r3, r5
 80043a6:	dcf0      	bgt.n	800438a <_printf_i+0x1f6>
 80043a8:	e7e9      	b.n	800437e <_printf_i+0x1ea>
 80043aa:	2500      	movs	r5, #0
 80043ac:	e7f7      	b.n	800439e <_printf_i+0x20a>
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	080047dd 	.word	0x080047dd
 80043b4:	080047ee 	.word	0x080047ee

080043b8 <__sread>:
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	000c      	movs	r4, r1
 80043bc:	250e      	movs	r5, #14
 80043be:	5f49      	ldrsh	r1, [r1, r5]
 80043c0:	f000 f8b0 	bl	8004524 <_read_r>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	db03      	blt.n	80043d0 <__sread+0x18>
 80043c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043ca:	181b      	adds	r3, r3, r0
 80043cc:	6563      	str	r3, [r4, #84]	; 0x54
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	4a02      	ldr	r2, [pc, #8]	; (80043dc <__sread+0x24>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	81a3      	strh	r3, [r4, #12]
 80043d8:	e7f9      	b.n	80043ce <__sread+0x16>
 80043da:	46c0      	nop			; (mov r8, r8)
 80043dc:	ffffefff 	.word	0xffffefff

080043e0 <__swrite>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	001f      	movs	r7, r3
 80043e4:	898b      	ldrh	r3, [r1, #12]
 80043e6:	0005      	movs	r5, r0
 80043e8:	000c      	movs	r4, r1
 80043ea:	0016      	movs	r6, r2
 80043ec:	05db      	lsls	r3, r3, #23
 80043ee:	d505      	bpl.n	80043fc <__swrite+0x1c>
 80043f0:	230e      	movs	r3, #14
 80043f2:	5ec9      	ldrsh	r1, [r1, r3]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2302      	movs	r3, #2
 80043f8:	f000 f874 	bl	80044e4 <_lseek_r>
 80043fc:	89a3      	ldrh	r3, [r4, #12]
 80043fe:	4a05      	ldr	r2, [pc, #20]	; (8004414 <__swrite+0x34>)
 8004400:	0028      	movs	r0, r5
 8004402:	4013      	ands	r3, r2
 8004404:	81a3      	strh	r3, [r4, #12]
 8004406:	0032      	movs	r2, r6
 8004408:	230e      	movs	r3, #14
 800440a:	5ee1      	ldrsh	r1, [r4, r3]
 800440c:	003b      	movs	r3, r7
 800440e:	f000 f81f 	bl	8004450 <_write_r>
 8004412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004414:	ffffefff 	.word	0xffffefff

08004418 <__sseek>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	000c      	movs	r4, r1
 800441c:	250e      	movs	r5, #14
 800441e:	5f49      	ldrsh	r1, [r1, r5]
 8004420:	f000 f860 	bl	80044e4 <_lseek_r>
 8004424:	89a3      	ldrh	r3, [r4, #12]
 8004426:	1c42      	adds	r2, r0, #1
 8004428:	d103      	bne.n	8004432 <__sseek+0x1a>
 800442a:	4a05      	ldr	r2, [pc, #20]	; (8004440 <__sseek+0x28>)
 800442c:	4013      	ands	r3, r2
 800442e:	81a3      	strh	r3, [r4, #12]
 8004430:	bd70      	pop	{r4, r5, r6, pc}
 8004432:	2280      	movs	r2, #128	; 0x80
 8004434:	0152      	lsls	r2, r2, #5
 8004436:	4313      	orrs	r3, r2
 8004438:	81a3      	strh	r3, [r4, #12]
 800443a:	6560      	str	r0, [r4, #84]	; 0x54
 800443c:	e7f8      	b.n	8004430 <__sseek+0x18>
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	ffffefff 	.word	0xffffefff

08004444 <__sclose>:
 8004444:	b510      	push	{r4, lr}
 8004446:	230e      	movs	r3, #14
 8004448:	5ec9      	ldrsh	r1, [r1, r3]
 800444a:	f000 f815 	bl	8004478 <_close_r>
 800444e:	bd10      	pop	{r4, pc}

08004450 <_write_r>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	0004      	movs	r4, r0
 8004454:	0008      	movs	r0, r1
 8004456:	0011      	movs	r1, r2
 8004458:	001a      	movs	r2, r3
 800445a:	2300      	movs	r3, #0
 800445c:	4d05      	ldr	r5, [pc, #20]	; (8004474 <_write_r+0x24>)
 800445e:	602b      	str	r3, [r5, #0]
 8004460:	f7fc fc81 	bl	8000d66 <_write>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d103      	bne.n	8004470 <_write_r+0x20>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d000      	beq.n	8004470 <_write_r+0x20>
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	bd70      	pop	{r4, r5, r6, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	20000338 	.word	0x20000338

08004478 <_close_r>:
 8004478:	2300      	movs	r3, #0
 800447a:	b570      	push	{r4, r5, r6, lr}
 800447c:	4d06      	ldr	r5, [pc, #24]	; (8004498 <_close_r+0x20>)
 800447e:	0004      	movs	r4, r0
 8004480:	0008      	movs	r0, r1
 8004482:	602b      	str	r3, [r5, #0]
 8004484:	f7fc fc8b 	bl	8000d9e <_close>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	d103      	bne.n	8004494 <_close_r+0x1c>
 800448c:	682b      	ldr	r3, [r5, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d000      	beq.n	8004494 <_close_r+0x1c>
 8004492:	6023      	str	r3, [r4, #0]
 8004494:	bd70      	pop	{r4, r5, r6, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	20000338 	.word	0x20000338

0800449c <_fstat_r>:
 800449c:	2300      	movs	r3, #0
 800449e:	b570      	push	{r4, r5, r6, lr}
 80044a0:	4d06      	ldr	r5, [pc, #24]	; (80044bc <_fstat_r+0x20>)
 80044a2:	0004      	movs	r4, r0
 80044a4:	0008      	movs	r0, r1
 80044a6:	0011      	movs	r1, r2
 80044a8:	602b      	str	r3, [r5, #0]
 80044aa:	f7fc fc82 	bl	8000db2 <_fstat>
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	d103      	bne.n	80044ba <_fstat_r+0x1e>
 80044b2:	682b      	ldr	r3, [r5, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d000      	beq.n	80044ba <_fstat_r+0x1e>
 80044b8:	6023      	str	r3, [r4, #0]
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	20000338 	.word	0x20000338

080044c0 <_isatty_r>:
 80044c0:	2300      	movs	r3, #0
 80044c2:	b570      	push	{r4, r5, r6, lr}
 80044c4:	4d06      	ldr	r5, [pc, #24]	; (80044e0 <_isatty_r+0x20>)
 80044c6:	0004      	movs	r4, r0
 80044c8:	0008      	movs	r0, r1
 80044ca:	602b      	str	r3, [r5, #0]
 80044cc:	f7fc fc7f 	bl	8000dce <_isatty>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d103      	bne.n	80044dc <_isatty_r+0x1c>
 80044d4:	682b      	ldr	r3, [r5, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d000      	beq.n	80044dc <_isatty_r+0x1c>
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	20000338 	.word	0x20000338

080044e4 <_lseek_r>:
 80044e4:	b570      	push	{r4, r5, r6, lr}
 80044e6:	0004      	movs	r4, r0
 80044e8:	0008      	movs	r0, r1
 80044ea:	0011      	movs	r1, r2
 80044ec:	001a      	movs	r2, r3
 80044ee:	2300      	movs	r3, #0
 80044f0:	4d05      	ldr	r5, [pc, #20]	; (8004508 <_lseek_r+0x24>)
 80044f2:	602b      	str	r3, [r5, #0]
 80044f4:	f7fc fc74 	bl	8000de0 <_lseek>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	d103      	bne.n	8004504 <_lseek_r+0x20>
 80044fc:	682b      	ldr	r3, [r5, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d000      	beq.n	8004504 <_lseek_r+0x20>
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	bd70      	pop	{r4, r5, r6, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	20000338 	.word	0x20000338

0800450c <memchr>:
 800450c:	b2c9      	uxtb	r1, r1
 800450e:	1882      	adds	r2, r0, r2
 8004510:	4290      	cmp	r0, r2
 8004512:	d101      	bne.n	8004518 <memchr+0xc>
 8004514:	2000      	movs	r0, #0
 8004516:	4770      	bx	lr
 8004518:	7803      	ldrb	r3, [r0, #0]
 800451a:	428b      	cmp	r3, r1
 800451c:	d0fb      	beq.n	8004516 <memchr+0xa>
 800451e:	3001      	adds	r0, #1
 8004520:	e7f6      	b.n	8004510 <memchr+0x4>
	...

08004524 <_read_r>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	0004      	movs	r4, r0
 8004528:	0008      	movs	r0, r1
 800452a:	0011      	movs	r1, r2
 800452c:	001a      	movs	r2, r3
 800452e:	2300      	movs	r3, #0
 8004530:	4d05      	ldr	r5, [pc, #20]	; (8004548 <_read_r+0x24>)
 8004532:	602b      	str	r3, [r5, #0]
 8004534:	f7fc fbfa 	bl	8000d2c <_read>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d103      	bne.n	8004544 <_read_r+0x20>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d000      	beq.n	8004544 <_read_r+0x20>
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	20000338 	.word	0x20000338

0800454c <_init>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr

08004558 <_fini>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr
